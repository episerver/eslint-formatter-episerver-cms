[
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\AsyncPostQueue\\AsyncPostQueue.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\Common\\DateTimePickerAjax\\CalendarBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\Common\\TextBoxSelector\\TextboxExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\Common\\TimePicker\\TimePickerExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\DateTimePicker\\CalendarBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\DateTimePicker\\TimePickerExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\FilterExpression\\Scripts\\FilterExpressionBuilder.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\Grid\\ControlUpdateExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\Grid\\GridEditorExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\Grid\\GridViewHeaderBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\Grid\\GridViewHeaderBehavior2.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\Grid\\GridViewUpdateExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\Layout\\IeLayoutExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\Layout\\LayoutExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\ListToListSelector\\ListToList.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\MetaForm\\TableLayoutExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\Toolbar\\JsToolbarExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\TreePanel\\JsTreePanelExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.BusinessFoundation\\Util\\AutoResizer.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Catalog\\Scripts\\CatalogClient.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Catalog\\Scripts\\DragAndDropUpload.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\jquery.tinymce.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\langs\\en.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\advhr\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\advhr\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\advhr\\js\\rule.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\advhr\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\advimage\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\advimage\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\advimage\\js\\image.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\advimage\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\advlink\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\advlink\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\advlink\\js\\advlink.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\advlink\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\advlist\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\advlist\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\autoresize\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\autoresize\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\autosave\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\autosave\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\autosave\\langs\\en.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\bbcode\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\bbcode\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\contextmenu\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\contextmenu\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\directionality\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\directionality\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\emotions\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\emotions\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\emotions\\js\\emotions.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\emotions\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiaccesskeysremove\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiaccesskeysremove\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiautoresize\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiautoresize\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epidynamiccontent\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epidynamiccontent\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epidynamiccontent\\langs\\en.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epidynamiccontent\\langs\\sv.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\EPiEditorDisable\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\EPiEditorDisable\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiexternaltoolbar\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiexternaltoolbar\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epifilebrowser\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epifilebrowser\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epifilemanagerdragdrop\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epifilemanagerdragdrop\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epifloatingtoolbar\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epifloatingtoolbar\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiimageeditor\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiimageeditor\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epilink\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epilink\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epipageleavecheck\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epipageleavecheck\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epipersonalizedcontent\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epipersonalizedcontent\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epipersonalizedcontent\\epicontentblockutilities.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiquote\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiquote\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiquote\\js\\epiquote.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiquote\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiquote\\langs\\en.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiquote\\langs\\sv_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiquote\\langs\\sv.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\episearchreplace\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\episearchreplace\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\episearchreplace\\js\\searchreplace.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epistylematcher\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epistylematcher\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epitrailing\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epitrailing\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epivisualaid\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epivisualaid\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiwindowmanager\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\epiwindowmanager\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\example\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\example\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\example\\js\\dialog.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\example\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\example\\langs\\en.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\fullpage\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\fullpage\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\fullpage\\js\\fullpage.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\fullpage\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\fullscreen\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\fullscreen\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\iespell\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\iespell\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\inlinepopups\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\inlinepopups\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\insertdatetime\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\insertdatetime\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\layer\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\layer\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\legacyoutput\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\legacyoutput\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\media\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\media\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\media\\js\\embed.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\media\\js\\media.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\media\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\nonbreaking\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\nonbreaking\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\noneditable\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\noneditable\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\pagebreak\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\pagebreak\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\paste\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\paste\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\paste\\js\\pastetext.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\paste\\js\\pasteword.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\paste\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\preview\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\preview\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\preview\\jscripts\\embed.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\print\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\print\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\productlink\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\productlink\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\save\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\save\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\searchreplace\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\searchreplace\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\searchreplace\\js\\searchreplace.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\searchreplace\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\spellchecker\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\spellchecker\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\style\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\style\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\style\\js\\props.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\style\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\tabfocus\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\tabfocus\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\table\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\table\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\table\\js\\cell.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\table\\js\\merge_cells.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\table\\js\\row.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\table\\js\\table.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\table\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\template\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\template\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\template\\js\\template.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\template\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\visualchars\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\visualchars\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\wordcount\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\wordcount\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\xhtmlxtras\\editor_plugin_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\xhtmlxtras\\editor_plugin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\xhtmlxtras\\js\\abbr.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\xhtmlxtras\\js\\acronym.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\xhtmlxtras\\js\\attributes.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\xhtmlxtras\\js\\cite.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\xhtmlxtras\\js\\del.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\xhtmlxtras\\js\\element_common.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\xhtmlxtras\\js\\ins.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\plugins\\xhtmlxtras\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\themes\\advanced\\editor_template_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\themes\\advanced\\editor_template.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\themes\\advanced\\js\\about.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\themes\\advanced\\js\\anchor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\themes\\advanced\\js\\charmap.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\themes\\advanced\\js\\color_picker.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\themes\\advanced\\js\\image.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\themes\\advanced\\js\\link.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\themes\\advanced\\js\\source_editor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\themes\\advanced\\langs\\en_dlg.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\themes\\advanced\\langs\\en.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\themes\\simple\\editor_template_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\themes\\simple\\editor_template.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\themes\\simple\\langs\\en.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\tiny_mce_popup.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\tiny_mce_src.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\tiny_mce.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\utils\\editable_selects.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\utils\\form_utils.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\utils\\mctabs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Controls\\Editors\\TinyMCE\\tinymce\\utils\\validate.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Layout\\Scripts\\WsLayoutExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Scripts\\CoreClient.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Core\\Scripts\\ValidatorPopupFix.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Customer\\Scripts\\CustomerManagementClient.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Marketing\\Scripts\\MarketingClient.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Markets\\Scripts\\MarketsClient.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Common\\Scripts\\SelectPopupScript.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\browser.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\buttons.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\common.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\ext-all.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\ext-lang-ru.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\ext-yui-adapter.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\ext8.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\FreeTextBox\\FTB-FreeTextBox.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\FreeTextBox\\FTB-ImageGallery.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\FreeTextBox\\FTB-Pro.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\FreeTextBox\\FTB-ToolbarItems.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\FreeTextBox\\FTB-Utility.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\IbnLayoutExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\IbnLayoutIE6Extender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\jquery-1.2.1.min.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\List2List.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\main.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\mcCalendScript.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaDataBase\\Scripts\\yui-utilities.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\MetaUIEntity\\Scripts\\entityDD.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Order\\Scripts\\OrderClient.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\EPi\\Shell\\Light\\jquery.min.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\EPi\\Shell\\Light\\Shell-ext.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\AnimationBehavior.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\AnimationBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\Animations.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\Animations.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\BaseScripts.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\BaseScripts.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\CalendarBehavior.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\CalendarBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\CollapsiblePanelBehavior.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\CollapsiblePanelBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\Common.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\Common.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\DateTime.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\DateTime.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\DragDropScripts.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\DragDropScripts.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\DropShadowBehavior.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\DropShadowBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\DynamicPopulateBehavior.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\DynamicPopulateBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\FloatingBehavior.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\FloatingBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\MaskedEditBehavior.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\MaskedEditBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\MaskedEditValidator.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\MaskedEditValidator.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\ModalPopupBehavior.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\ModalPopupBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\PopupBehavior.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\PopupBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\Resources.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\RoundedCornersBehavior.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\RoundedCornersBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\Tabs.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\Tabs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\Threading.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\Threading.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\Timer.debug.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\AjaxControlToolkit\\Timer.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\AsyncPostQueue.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\AutoResizer.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\CalendarBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\ControlUpdateExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\DualList.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\DynamicListBox.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\FilterExpressionBuilder.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\GridEditorExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\GridViewHeaderBehavior.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\GridViewHeaderBehavior2.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\GridViewUpdateExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\IeLayoutExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\JsToolbarExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\JsTreePanelExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\LayoutExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\ListToList.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\TableLayoutExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\BusinessFoundation\\TimePickerExtender.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.client_scripts.A573G988.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.client_scripts.A573L991.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.client_scripts.A573P290.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.client_scripts.A573P291.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.client_scripts.A573S188.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.client_scripts.A573T069.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.client_scripts.A573Z388.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.ComboBox.client_scripts.A573P123.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.ComboBox.client_scripts.A573P124.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.ComboBox.client_scripts.A573P456.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.Dialog.client_scripts.A573G130.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.Dialog.client_scripts.A573G999.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.Grid.client_scripts.A573G188.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.Grid.client_scripts.A573J198.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.Grid.client_scripts.A573L238.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.Grid.client_scripts.A573R178.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ComponentArt\\ComponentArt.Web.UI.Grid.client_scripts.A573R378.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ext\\ext-all.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\ext\\ext-base.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\FileUploader\\fsc_commonutil.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\FileUploader\\fsc_fileslist.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\FileUploader\\fsc_uploadactions.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\FileUploader\\fsc_uploadcontrol.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\FileUploader\\fsc_uploadiframecontrol.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\FileUploader\\fsc_uploadprogress.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\formcheck.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\jquery.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\jQuery\\lib\\jquery.bgiframe.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\jQuery\\lib\\jquery.linkselect.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\Shell\\EPiServerManagementClient2.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\Shell\\mainHistory.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\Shell\\mainLayout.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\Shell\\mainLayoutEPiServer.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\Shell\\mainLeftTemplate.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\Shell\\mainLeftTemplateResizer.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\Shell\\ManagementClient2.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\Shell\\ManagementClientProxy.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\TreeView.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\yui\\animation-min.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\yui\\dom-min.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\yui\\event-min.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Runaway.ConsoleController\\Apps\\Shell\\Scripts\\yui\\yahoo-min.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.FileUploader\\Resources\\fsc_commonutil.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.FileUploader\\Resources\\fsc_fileslist.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.FileUploader\\Resources\\fsc_uploadactions.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.FileUploader\\Resources\\fsc_uploadcontrol.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.FileUploader\\Resources\\fsc_uploadiframecontrol.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.FileUploader\\Resources\\fsc_uploadprogress.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.WebConsoleLib\\Controls\\DualList.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\ABC\\Mediachase.WebConsoleLib\\Controls\\DynamicListBox.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject SDK\\Knowledge Base\\styles\\footer.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\Mocks\\routes.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\Scripts\\chai-as-promised.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\Scripts\\chai.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\Scripts\\mocha.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\Scripts\\sinon-chai.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\Scripts\\sinon.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\Scripts\\stub-module.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\command\\DetachFromCategory_specs.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/selection' is an internal Episerver module and can have a breaking change in any release.",
                "line": 6,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/selection\"",
                "endLine": 6,
                "endColumn": 26
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // Module being tested\r\n    \"epi-ecf-ui/command/DetachFromCategory\",\r\n\r\n    // Dependencies\r\n    \"epi/shell/selection\"\r\n\r\n], function (\r\n    DetachFromCategory,\r\n    Selection\r\n) {\r\n\r\n    describe(\"epi-ecf/command/DetachFromCategory\", function () {\r\n\r\n        var selection, modelMock, storeMock, currentContext, contentData;\r\n        var command;\r\n\r\n        beforeEach(function () {\r\n\r\n            currentContext = {\r\n                id: 1\r\n            };\r\n\r\n            storeMock = {\r\n                query: function () {\r\n                    return [\"relation1\", \"relation2\"];\r\n                }\r\n            };\r\n\r\n            modelMock = {\r\n                getCurrentContext: function () {\r\n                    return currentContext;\r\n                }\r\n            };\r\n\r\n            selection = new Selection();\r\n\r\n            command = new DetachFromCategory({\r\n                selection: selection,\r\n                model: modelMock,\r\n                _store: storeMock,\r\n                _typeIsAssignableFrom: function () {\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            contentData = {\r\n                parentLink: 1,\r\n                properties: {\r\n                    isRelatedToCurrentCategory: true\r\n                }\r\n            };\r\n\r\n            selection.set(\"data\", [{\r\n                type: \"epi.cms.contentdata\", data: contentData\r\n            }]);\r\n\r\n        });\r\n\r\n        afterEach(function () {\r\n            command = null;\r\n            selection = null;\r\n        });\r\n\r\n\r\n        describe(\"#_onModelChange\", function () {\r\n\r\n            describe(\"when selectionData has been set with property isRelatedToCurrentCategory to true\", function () {\r\n                beforeEach(function () {\r\n                    contentData.properties.isRelatedToCurrentCategory = true;\r\n                });\r\n\r\n                describe(\"and currentContext is parent\", function () {\r\n                    beforeEach(function () {\r\n                        currentContext.id = 666;\r\n                        contentData.parentLink = currentContext.id;\r\n                        command._onModelChange();\r\n                    });\r\n\r\n                    it(\"detach command should not be executable\", function () {\r\n                        expect(command.canExecute).to.be.equal(false);\r\n                    });\r\n                });\r\n\r\n                describe(\"and currentContext is not parent\", function () {\r\n                    beforeEach(function () {\r\n                        currentContext.id = 666;\r\n                        contentData.parentLink = 667;\r\n                        command._onModelChange();\r\n                    });\r\n\r\n                    it(\"detach command should be executable\", function () {\r\n                        expect(command.canExecute).to.be.equal(true);\r\n                    });\r\n                });\r\n            });\r\n\r\n            describe(\"when selectionData has been set with property isRelatedToCurrentCategory to false\", function () {\r\n                beforeEach(function () {\r\n                    contentData.properties.isRelatedToCurrentCategory = false;\r\n                    command._onModelChange();\r\n                });\r\n\r\n                it(\"detach command should not be executable\", function () {\r\n                    expect(command.canExecute).to.be.equal(false);\r\n                });\r\n            });\r\n\r\n            describe(\"when isUsedByCollectionEditor has been set to true\", function () {\r\n                beforeEach(function () {\r\n                    command.isUsedByCollectionEditor = true;\r\n                });\r\n\r\n                describe(\"and categoryLink has not been set\", function () {\r\n                    beforeEach(function () {\r\n                        command.categoryLink = null;\r\n                        command._onModelChange();\r\n                    });\r\n\r\n                    it(\"detach command should not be executable\", function () {\r\n                        expect(command.canExecute).to.be.equal(false);\r\n                    });\r\n                });\r\n\r\n                describe(\"and categoryLink has been set same as parentlink\", function () {\r\n                    beforeEach(function () {\r\n                        command.categoryLink = 666;\r\n                        contentData.parentLink = command.categoryLink;\r\n                        command._onModelChange();\r\n                    });\r\n\r\n                    it(\"detach command should not be executable\", function () {\r\n                        expect(command.canExecute).to.be.equal(false);\r\n                    });\r\n                });\r\n\r\n                describe(\"and categoryLink has been set different from parentlink\", function () {\r\n                    beforeEach(function () {\r\n                        command.categoryLink = 666;\r\n                        contentData.parentLink = 667;\r\n                        command._onModelChange();\r\n                    });\r\n\r\n                    it(\"detach command should be executable\", function () {\r\n                        expect(command.canExecute).to.be.equal(true);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\command\\NavigateToEditPage_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\command\\PasteCatalogContent_specs.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/ClipboardManager' is an internal Episerver module and can have a breaking change in any release.",
                "line": 7,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/ClipboardManager\",",
                "endLine": 7,
                "endColumn": 33
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/selection' is an internal Episerver module and can have a breaking change in any release.",
                "line": 8,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/selection\",",
                "endLine": 8,
                "endColumn": 26
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // Module being tested\r\n    \"epi-ecf-ui/command/PasteCatalogContent\",\r\n    \"epi-ecf-ui/contentediting/ModelSupport\",\r\n\r\n    // Dependencies\r\n    \"epi/shell/ClipboardManager\",\r\n    \"epi/shell/selection\",\r\n\r\n    // framework\r\n    \"epi/shell/TypeDescriptorManager\"\r\n], function (\r\n    PasteContent,\r\n    ModelSupport,\r\n    ClipboardManager,\r\n    Selection,\r\n    TypeDescriptorManager\r\n) {\r\n\r\n        describe(\"epi-cms/command/PasteCatalogContent\", function () {\r\n\r\n            var clipboard, selection;\r\n            var command, typeDescriptorManagerMock, isBaseTypeIdentifierSpy;\r\n\r\n            beforeEach(function () {\r\n                clipboard = new ClipboardManager({\r\n                });\r\n\r\n                selection = new Selection();\r\n\r\n                command = new PasteContent({\r\n                    clipboard: clipboard,\r\n                    selection: selection,\r\n                    model: {\r\n                        canPaste: function () {\r\n                            return true;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                typeDescriptorManagerMock = {\r\n                    isBaseTypeIdentifier: function () {\r\n                        return true;\r\n                    }\r\n                };\r\n\r\n                command.typeDescriptorManager = typeDescriptorManagerMock;\r\n\r\n                isBaseTypeIdentifierSpy = sinon.spy(typeDescriptorManagerMock, \"isBaseTypeIdentifier\");\r\n            });\r\n\r\n            afterEach(function () {\r\n                clipboard = null;\r\n                command = null;\r\n                selection = null;\r\n            });\r\n\r\n            describe(\"#_typeIsAssignableFrom\", function () {\r\n\r\n                var firstArgument = \"first\";\r\n                var secondArgument = \"second\";\r\n\r\n                beforeEach(function () {\r\n                    command._typeIsAssignableFrom(firstArgument, secondArgument);\r\n                });\r\n\r\n                it(\"should call isBaseTypeIdentifier on TypeDescriptorManager.\", function () {\r\n                    expect(isBaseTypeIdentifierSpy).to.be.called;\r\n                });\r\n\r\n                it(\"first argument to isBaseTypeIdentifier should be same as first argument to method.\", function () {\r\n                    expect(isBaseTypeIdentifierSpy.firstCall.args[0]).to.be.equal(firstArgument);\r\n                });\r\n\r\n                it(\"second argument to isBaseTypeIdentifier should be same as second argument to method.\", function () {\r\n                    expect(isBaseTypeIdentifierSpy.firstCall.args[1]).to.be.equal(secondArgument);\r\n                });\r\n            });\r\n\r\n            describe(\"#_onModelChange\", function () {\r\n                describe(\"when selectionData has not been set\", function () {\r\n                    beforeEach(function () {\r\n                        command.canExecute = true;\r\n                        command._onModelChange();\r\n                    });\r\n\r\n                    it(\"should set 'canExecute' to 'false'\", function () {\r\n                        expect(command.get(\"canExecute\")).to.be.equal(false);\r\n                    });\r\n                });\r\n\r\n                describe(\"when selectionData has been set\", function () {\r\n                    var contentNodeType = \"episerver.commerce.catalog.contenttypes.contentnode\";\r\n                    beforeEach(function () {\r\n                        command.canExecute = false;\r\n                        selection.set(\"data\", [{ type: \"epi.cms.contentdata\", data: { typeIdentifier: contentNodeType } }]);\r\n                    });\r\n\r\n                    it(\"should call isBaseTypeIdentifier on TypeDescriptorManager.\", function () {\r\n                        expect(isBaseTypeIdentifierSpy).to.be.called;\r\n                    });\r\n\r\n                    it(\"first argument to isBaseTypeIdentifier should be same as 'typeIdentifier' on selectedData.\", function () {\r\n                        expect(isBaseTypeIdentifierSpy.secondCall.args[0]).to.be.equal(contentNodeType);\r\n                    });\r\n\r\n                    it(\"second argument to isBaseTypeIdentifier should be 'episerver.commerce.catalog.contenttypes.nodecontentbase'\", function () {\r\n                        expect(isBaseTypeIdentifierSpy.secondCall.args[1]).to.be.equal(\"episerver.commerce.catalog.contenttypes.nodecontentbase\");\r\n                    });\r\n\r\n                    describe(\"when clipboard is empty\", function () {\r\n                        it(\"should keep 'canExecute' value of 'false'.\", function () {\r\n                            expect(command.get(\"canExecute\")).to.be.equal(false);\r\n                        });\r\n                    });\r\n\r\n                    describe(\"when clipboard has data\", function () {\r\n                        beforeEach(function () {\r\n                            clipboard.set(\"data\", [{ type: \"epi.cms.contentdata\", data: { typeIdentifier: contentNodeType } }]);\r\n                        });\r\n\r\n                        it(\"should set 'canExecute' to 'true'.\", function () {\r\n                            expect(command.get(\"canExecute\")).to.be.equal(true);\r\n                        });\r\n                    });\r\n                });\r\n\r\n                describe(\"when copy a product then set selectionData with product content type\", function () {\r\n                    var productType = \"episerver.commerce.sample.models.metadataclasses.mediaproductcontent\";\r\n                    beforeEach(function () {\r\n                        command.typeDescriptorManager.isBaseTypeIdentifier = function (type, base) {\r\n                            return base === ModelSupport.contentTypeIdentifier.productContent;\r\n                        };\r\n\r\n                        selection.set(\"data\", [{ type: \"epi.cms.contentdata\", data: { typeIdentifier: productType } }]);\r\n                        clipboard.set(\"copy\", true);\r\n                        command._onModelChange();\r\n                    });\r\n                });\r\n\r\n                describe(\"when cut a product then set selectionData with product content type\", function () {\r\n                    var productType = \"episerver.commerce.sample.models.metadataclasses.mediaproductcontent\";\r\n                    beforeEach(function () {\r\n                        command.typeDescriptorManager.isBaseTypeIdentifier = function (type, base) {\r\n                            return base === ModelSupport.contentTypeIdentifier.productContent;\r\n                        };\r\n\r\n                        selection.set(\"data\", [{ type: \"epi.cms.contentdata\", data: { typeIdentifier: productType } }]);\r\n                        clipboard.set(\"copy\", false);\r\n                        command._onModelChange();\r\n                    });\r\n\r\n                    it(\"should set 'canExecute' to 'false'.\", function () {\r\n                        expect(command.get(\"canExecute\")).to.be.equal(false);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\component\\Catalog_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\component\\CommerceMediaItemModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\component\\ContentContextMenuCommandProvider_specs.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/ClipboardManager' is an internal Episerver module and can have a breaking change in any release.",
                "line": 9,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/ClipboardManager\",",
                "endLine": 9,
                "endColumn": 33
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/selection' is an internal Episerver module and can have a breaking change in any release.",
                "line": 10,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/selection\",",
                "endLine": 10,
                "endColumn": 26
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/command/TranslateContent' is an internal Episerver module and can have a breaking change in any release.",
                "line": 17,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/command/TranslateContent\",",
                "endLine": 17,
                "endColumn": 39
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/content-approval/command/EditApprovalDefinition' is an internal Episerver module and can have a breaking change in any release.",
                "line": 18,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/content-approval/command/EditApprovalDefinition\"",
                "endLine": 18,
                "endColumn": 62
            }
        ],
        "errorCount": 4,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    \"dojo/_base/declare\",\r\n    \"dojo/Stateful\",\r\n    \"dojo/Deferred\",\r\n    \"epi-ecf-ui/component/ContentContextMenuCommandProvider\",\r\n    \"epi-ecf-ui/contentediting/ModelSupport\",\r\n    \"epi/dependency\",\r\n    \"epi/shell/store/Registry\",\r\n    \"epi/shell/ClipboardManager\",\r\n    \"epi/shell/selection\",\r\n    \"epi-cms/component/command/ChangeContext\",\r\n    \"epi-cms/command/NewContent\",\r\n    \"epi-cms/command/DeleteContent\",\r\n    \"epi-cms/command/CutContent\",\r\n    \"epi-cms/command/CopyContent\",\r\n    \"epi-cms/command/PasteContent\",\r\n    \"epi-cms/command/TranslateContent\",\r\n    \"epi-cms/content-approval/command/EditApprovalDefinition\"\r\n], function (\r\n    declare,\r\n    Stateful,\r\n    Deferred,\r\n    ContentContextMenuCommandProvider,\r\n    ModelSupport,\r\n    dependency,\r\n    Registry,\r\n    ClipboardManager,\r\n    Selection,\r\n    ChangeContextCommand,\r\n    NewContent,\r\n    DeleteCommand,\r\n    CutCommand,\r\n    CopyCommand,\r\n    PasteCommand,\r\n    TranslateCommand,\r\n    EditApprovalDefinitionCommand\r\n) {\r\n    describe(\"epi-ecf-ui/component/ContentContextMenuCommandProvider\", function () {\r\n\r\n        var provider, contentRepositoryDescriptorsMock, registry, baseCommand;\r\n\r\n        var constructDependencies = function () {\r\n            registry = new Registry();\r\n            registry.add(\"epi.commerce.global.clipboard\", new ClipboardManager());\r\n            dependency.register(\"epi.commerce.global\", registry);\r\n\r\n            registry = new Registry();\r\n            registry.add(\"epi.cms.contenttype\", {\r\n                query: function () {\r\n                    return [{ id: 22 }];\r\n                },\r\n                get: function (contentTypeID) {\r\n                    return {\r\n                        availableContentTypes: [\r\n                            ModelSupport.contentTypeIdentifier.rootContent,\r\n                            ModelSupport.contentTypeIdentifier.catalogContent,\r\n                            ModelSupport.contentTypeIdentifier.nodeContent\r\n                        ]\r\n                    };\r\n                }\r\n            });\r\n            registry.add(\"epi.cms.content.light\", {});\r\n            dependency.register(\"epi.storeregistry\", registry);\r\n            contentRepositoryDescriptorsMock = {\r\n                catalog: {\r\n                    containedTypes: [\"episerver.commerce.product\"],\r\n                    creatableTypes: [\"episerver.commerce.product\", \"episerver.commerce.node\", \"episerver.commerce.catalog\"],\r\n                    mainNavigationTypes: [],\r\n                    roots: [3]\r\n                },\r\n                get: function() { return this.catalog; }\r\n            };\r\n            dependency.register(\"epi.shell.Profile\", {});\r\n            dependency.register(\"epi.cms.ApprovalService\", {});\r\n            dependency.register(\"epi.cms.contentRepositoryDescriptors\", contentRepositoryDescriptorsMock);\r\n\r\n            var clipboard = new ClipboardManager({});\r\n            var selection = new Selection();\r\n            baseCommand = {\r\n                repositoryKey: \"catalog\",\r\n                clipboard: clipboard,\r\n                clipboardManager: clipboard,\r\n                selection: selection\r\n            };\r\n        };\r\n\r\n        beforeEach(function () {\r\n            constructDependencies();\r\n            var clipboard = new ClipboardManager({\r\n            });\r\n            provider = new ContentContextMenuCommandProvider(baseCommand);\r\n        });\r\n\r\n        afterEach(function () {\r\n            dependency.clear();\r\n            registry = null;\r\n            provider = null;\r\n        });\r\n\r\n        describe('#updateCommandModel', function () {\r\n            describe('When updating change context command', function () {\r\n                beforeEach(function () {\r\n                    provider.set(\"commands\", [new ChangeContextCommand()]);\r\n                });\r\n                it('should be disabled for Root content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.rootContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be enabled for Catalog content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.catalogContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n                it('should be enabled for Node content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.nodeContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n                it('should be enabled for Product content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.productContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n            });\r\n\r\n            describe('When updating add content command', function () {\r\n                beforeEach(function () {\r\n                    // create command is a container, which contains a list of NewContent command, for a specific type.\r\n                    var createCommandClass = declare([Stateful], {\r\n                        constructor: function (params) {\r\n                            declare.safeMixin(this, params);\r\n                        },\r\n\r\n                        commands: [new NewContent(baseCommand)]\r\n                    });\r\n                    provider.set(\"commands\", [new createCommandClass(baseCommand)]);\r\n                });\r\n                it('should be disabled for Root content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.rootContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should not change isAvailable for Catalog content', function () {\r\n                    var isAvailable = provider.get(\"commands\")[0].get(\"isAvailable\");\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.catalogContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(isAvailable);\r\n                });\r\n                it('should not change isAvailable for Node content', function () {\r\n                    var isAvailable = provider.get(\"commands\")[0].get(\"isAvailable\");\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.nodeContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(isAvailable);\r\n                });\r\n                it('should not change isAvailable for Product content', function () {\r\n                    var isAvailable = provider.get(\"commands\")[0].get(\"isAvailable\");\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.productContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(isAvailable);\r\n                });\r\n            });\r\n\r\n            describe('When updating edit content command', function () {\r\n                beforeEach(function () {\r\n                    var editCommand = new ChangeContextCommand({\r\n                        category: \"context\",\r\n                        forceContextChange: true,\r\n                        viewName: \"formedit\"\r\n                    });\r\n                    editCommand.set(\"_handles\", []);\r\n                    provider.set(\"commands\", [editCommand]);\r\n                });\r\n                it('should be disabled for Root content', function () {\r\n                    provider.updateCommandModel({\r\n                    typeIdentifier: ModelSupport.contentTypeIdentifier.rootContent,\r\n                    watch: function() {}\r\n                    });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be enabled for Catalog content', function () {\r\n                    provider.updateCommandModel({\r\n                    typeIdentifier: ModelSupport.contentTypeIdentifier.catalogContent,\r\n                    watch: function() {}\r\n                    });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n                it('should be enabled for Node content', function () {\r\n                    provider.updateCommandModel({\r\n                    typeIdentifier: ModelSupport.contentTypeIdentifier.nodeContent,\r\n                    watch: function() {}\r\n                    });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n                it('should be enabled for Product content', function () {\r\n                    provider.updateCommandModel({\r\n                    typeIdentifier: ModelSupport.contentTypeIdentifier.productContent,\r\n                    watch: function() {}\r\n                    });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n            });\r\n\r\n            describe('When updating cut content command', function () {\r\n                beforeEach(function () {\r\n                    provider.set(\"commands\", [new CutCommand(baseCommand)]);\r\n                });\r\n                it('should be disabled for Root content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.rootContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be disabled for Catalog content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.catalogContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be enabled for Node content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.nodeContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n                it('should be enabled for Product content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.productContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n            });\r\n\r\n            describe('When updating copy content command', function () {\r\n                beforeEach(function () {\r\n                    provider.set(\"commands\", [new CopyCommand(baseCommand)]);\r\n                });\r\n                it('should be disabled for Root content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.rootContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be disabled for Catalog content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.catalogContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be enabled for Node content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.nodeContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n                it('should be enabled for Product content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.productContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n            });\r\n\r\n            describe('When updating delete content command', function () {\r\n                beforeEach(function () {\r\n                    provider.set(\"commands\", [new DeleteCommand(baseCommand)]);\r\n                });\r\n                it('should be disabled for Root content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.rootContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be enabled for Catalog content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.catalogContent, name: 'test' });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n                it('should be enabled for Node content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.nodeContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n                it('should be enabled for Product content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.productContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n            });\r\n\r\n            describe('When updating paste content command', function () {\r\n                beforeEach(function () {\r\n                    provider.set(\"commands\", [new PasteCommand(baseCommand)]);\r\n                });\r\n                it('should be disabled for Root content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.rootContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be enabled for Catalog content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.catalogContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n                it('should be enabled for Node content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.nodeContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n                it('should be enabled for Product content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.productContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n            });\r\n\r\n            describe('When updating translate content command', function () {\r\n                beforeEach(function () {\r\n                    provider.set(\"commands\", [new TranslateCommand(baseCommand)]);\r\n                });\r\n                it('should be disabled for Root content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.rootContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be disabled for Catalog content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.catalogContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be disabled for Node content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.nodeContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be disabled for Product content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.productContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n            });\r\n\r\n            describe('When updating command with null model', function () {\r\n                beforeEach(function () {\r\n                    provider.set(\"commands\", [new TranslateCommand(baseCommand)]);\r\n                });\r\n                it('should be disabled for Root content', function () {\r\n                    provider.updateCommandModel(null);\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be disabled for Catalog content', function () {\r\n                    provider.updateCommandModel(null);\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be disabled for Node content', function () {\r\n                    provider.updateCommandModel(null);\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be disabled for Product content', function () {\r\n                    provider.updateCommandModel(null);\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n            });\r\n\r\n            describe('When updating add catalog content command', function () {\r\n                beforeEach(function () {\r\n                    provider.set(\"commands\", [new NewContent(baseCommand)]);\r\n                });\r\n                it('should be enabled for Root content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.rootContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n                it('should be disabled for Catalog content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.catalogContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be disabled for Node content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.nodeContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n                it('should be disabled for Product content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.productContent });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(false);\r\n                });\r\n            });\r\n\r\n            describe('When updating edit approval definition command', function () {\r\n                beforeEach(function () {\r\n                    var profileMock = {\r\n                        get: sinon.stub().returns(new Deferred().resolve())\r\n                    };\r\n\r\n                    provider.set(\"commands\", [new EditApprovalDefinitionCommand({\r\n                        profile: profileMock\r\n                    })]);\r\n                });\r\n                it('should be enabled for Root content', function () {\r\n                    provider.updateCommandModel({ typeIdentifier: ModelSupport.contentTypeIdentifier.rootContent, capabilities: {} });\r\n                    expect(provider.get(\"commands\")[0].get(\"isAvailable\")).to.be.equal(true);\r\n                });\r\n            });\r\n        });\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\component\\DiscountPriority_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\component\\viewmodel\\CatalogsViewModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\_LanguageRestrictedEditButtonMixin_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\AmountEditor_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\AssociationGroupSelectionEditor_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\DictionaryEditor_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\DictionaryItemEditor_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\HelpTextSpinner_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\InventoryOverviewEditor_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\model\\ContentReferenceListEditorModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\MonetaryRewardEditor_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\MoneyEditor_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\MoneyListEditor_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\PriceCollectionReadOnlyEditor_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\PromotionScheduleEditor_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\SaleCodeEditor_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\SelectionEditorWithEmptyOption_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\ShippingMethodListEditor_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\VisitorGroupList_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\VisitorGroupSelector_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\editors\\VisitorGroupSelectorDialog_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\GridContentPane_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\GridFormContainer_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\ModelSupport_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\PromotionContainer_specs.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/form/formFieldRegistry' is an internal Episerver module and can have a breaking change in any release.",
                "line": 3,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/form/formFieldRegistry\",",
                "endLine": 3,
                "endColumn": 39
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    \"dijit/_WidgetBase\",\r\n    \"epi/shell/form/formFieldRegistry\",\r\n    \"epi-ecf-ui/contentediting/PromotionContainer\"\r\n],\r\n\r\nfunction (\r\n    _WidgetBase,\r\n    formFieldRegistry,\r\n    PromotionContainer\r\n    ) {\r\n\r\n    describe(\"epi-ecf-ui/contentediting/PromotionContainer\", function () {\r\n        var subject;\r\n        beforeEach(function () {\r\n            subject = new PromotionContainer({ contentType: {} });\r\n        });\r\n        describe(\"#_injectSpan\", function () {\r\n            describe(\"when text is null\", function () {\r\n                it(\"should return null\", function () {\r\n                    var result = subject._injectSpan(null);\r\n                    expect(result).to.equal(null);\r\n                });\r\n            });\r\n            describe(\"when text has no segment\", function () {\r\n                it(\"should return same text\", function () {\r\n                    var text = \"Text without segment\";\r\n                    var result = subject._injectSpan(text);\r\n                    expect(result).to.equal(text);\r\n                });\r\n            });\r\n            describe(\"when text has one segment\", function () {\r\n                it(\"should replace segment with span and set css class\", function () {\r\n                    var result = subject._injectSpan(\"Text with {one}one segment{/}\");\r\n                    expect(result).to.equal('Text with <span class=\"epi-promotion-link epi-promotion--one\">one segment</span>');\r\n                });\r\n            });\r\n            describe(\"when text has multiple segments\", function () {\r\n                it(\"should replace all segments\", function () {\r\n                    var result = subject._injectSpan(\"{text}Text{/} {multiple}with multiple{/} {segments}different segments{/}\");\r\n                    expect(result).to.equal('<span class=\"epi-promotion-link epi-promotion--text\">Text</span> <span class=\"epi-promotion-link epi-promotion--multiple\">with multiple</span> <span class=\"epi-promotion-link epi-promotion--segments\">different segments</span>');\r\n                });\r\n            });\r\n        });\r\n        describe('#addChild', function () {\r\n            var child, wrapper;\r\n\r\n            beforeEach(function () {\r\n                child = new _WidgetBase({\r\n                    promotionRegion: null,\r\n                    _type: formFieldRegistry.type.field,\r\n                    _hint: \"promotion\"\r\n                });\r\n            });\r\n\r\n            describe('when promotion region exist on child', function () {\r\n                beforeEach(function () {\r\n                    child.promotionRegion = \"region\";\r\n                    subject.addChild(child);\r\n                    wrapper = subject.getChildren()[0];\r\n                });\r\n\r\n                it('should add promotion-region class', function () {\r\n                    expect(wrapper.domNode.className).to.contain(\"epi-promotion-block\");\r\n                });\r\n\r\n                it('should add promotion-type-x class, where x is the promotionRegion variable', function () {\r\n                    expect(wrapper.domNode.className).to.contain(\"epi-promotion--\" + child.promotionRegion);\r\n                });\r\n            });\r\n\r\n            describe('when promotion region doesnt exist on child', function () {\r\n                beforeEach(function () {\r\n                    subject.addChild(child);\r\n                    wrapper = subject.getChildren()[0];\r\n                });\r\n\r\n                it('should not add promotion-type- class', function () {\r\n                    expect(wrapper.domNode.className).to.not.contain(\"epi-promotion-\");\r\n                });\r\n            });\r\n\r\n            describe('when the child is a parent (block)', function () {\r\n                beforeEach(function () {\r\n                    child._type = formFieldRegistry.type.parent;\r\n                });\r\n\r\n                it('should add expected form container classes', function () {\r\n                    subject.addChild(child);\r\n                    wrapper = subject.getChildren()[0];\r\n                    expect(wrapper.domNode.className).to.contain(\"epi-form-container__section__row epi-form-container__section__row--\" + formFieldRegistry.type.parent);\r\n                });\r\n\r\n                describe('when promotion region exist on child', function () {\r\n                    beforeEach(function () {\r\n                        child.promotionRegion = \"region\";\r\n                        subject.addChild(child);\r\n                        wrapper = subject.getChildren()[0];\r\n                    });\r\n\r\n                    it('should add promotion-region class', function () {\r\n                        expect(wrapper.domNode.className).to.contain(\"epi-promotion-block\");\r\n                    });\r\n\r\n                    it('should add promotion-type-x class, where x is the promotionRegion variable', function () {\r\n                        expect(wrapper.domNode.className).to.contain(\"epi-promotion--\" + child.promotionRegion);\r\n                    });\r\n                });\r\n\r\n            });\r\n        });\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\viewmodel\\_BaseEntryCollectionEditorModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\viewmodel\\CategoryCollectionEditorModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\viewmodel\\CategoryCollectionReadOnlyEditorModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\viewmodel\\CommerceMediaCollectionEditorModel_specs.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/editors/model/CollectionEditorItemModel' is an internal Episerver module and can have a breaking change in any release.",
                "line": 5,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/editors/model/CollectionEditorItemModel\",",
                "endLine": 5,
                "endColumn": 69
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/editors/model/CollectionEditorModel' is an internal Episerver module and can have a breaking change in any release.",
                "line": 6,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/editors/model/CollectionEditorModel\",",
                "endLine": 6,
                "endColumn": 65
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    \"dojo/Deferred\",\r\n    \"dojo/on\",\r\n    \"epi/dependency\",\r\n    \"epi-cms/contentediting/editors/model/CollectionEditorItemModel\",\r\n    \"epi-cms/contentediting/editors/model/CollectionEditorModel\",\r\n    \"epi-ecf-ui/contentediting/editors/model/CommerceMediaCollectionEditorModel\"\r\n], function (\r\n    Deferred,\r\n    on,\r\n    dependency,\r\n    CollectionEditorItemModel,\r\n    CollectionEditorModel,\r\n    CommerceMediaCollectionEditorModel\r\n) {\r\n\r\n    describe(\"epi-ecf-ui/contentediting/editors/model/CommerceMediaCollectionEditorModel\", function () {\r\n        // Test support stuffs\r\n        // ---------------------------------------------------------------------------\r\n        var model,\r\n            testItemType = \"TestItemType\";\r\n\r\n        var fakeMetadataManager = {\r\n            getMetadataForType: function () {\r\n            }\r\n        };\r\n\r\n        var asyncItemModelType = function () { };\r\n        asyncItemModelType.prototype = {\r\n            fromItemData: function (item) {\r\n                var self = this, deferred = new Deferred();\r\n\r\n                this.id = item.id;\r\n                this.assetKey = item.assetKey;\r\n                this.groupName = item.groupName;\r\n\r\n                // Simulate asynchronous item initialization\r\n                setTimeout(function () {\r\n                    self.initialized = true;\r\n                    deferred.resolve();\r\n                }, 1);\r\n\r\n                return deferred.promise;\r\n            }\r\n        };\r\n\r\n        var syncItemModelType = function () { };\r\n        syncItemModelType.prototype = {\r\n            fromItemData: function (item) {\r\n                this.id = item.id;\r\n                this.assetKey = item.assetKey;\r\n                this.initialized = true;\r\n            }\r\n        };\r\n\r\n        var fakeColumnDefinitionsHasThumbnail = {\r\n            thumbnailUrl: {\r\n                label: \"Name\",\r\n                isThumbnail: true\r\n            },\r\n            groupName: { label: \"groupName\" }\r\n        };\r\n\r\n        var fakeColumnDefinitionsHasNoThumbnail = {\r\n            thumbnailUrl: {\r\n                label: \"Name\"\r\n            },\r\n            groupName: { label: \"groupName\" }\r\n        };\r\n\r\n        function getAllItemCommandsHelper(model, itemIndex, commandMask) {\r\n            /*jslint bitwise: true*/\r\n            return model.getItemCommands(\r\n                model.get(\"items\")[itemIndex],\r\n                commandMask ||\r\n                (CollectionEditorModel.commandMask.edit |\r\n                 CollectionEditorModel.commandMask.remove |\r\n                 CollectionEditorModel.commandMask.moveUp |\r\n                 CollectionEditorModel.commandMask.moveDown)\r\n            );\r\n        }\r\n\r\n        function getItemCommandByNameHelper(model, itemIndex, commandName) {\r\n            var commands = getAllItemCommandsHelper(model, itemIndex);\r\n            return commands.filter(function (cmd) { return cmd.name === commandName; })[0];\r\n        }\r\n\r\n        // ---------------------------------------------------------------------------\r\n\r\n        beforeEach(function () {\r\n            /*jslint bitwise: true*/\r\n            model = new CommerceMediaCollectionEditorModel({\r\n                itemType: testItemType,\r\n                metadataManager: fakeMetadataManager,\r\n                availableCommands: (CollectionEditorModel.commandMask.edit |\r\n                                    CollectionEditorModel.commandMask.remove |\r\n                                    CollectionEditorModel.commandMask.moveUp |\r\n                                    CollectionEditorModel.commandMask.moveDown)\r\n\r\n            });\r\n        });\r\n\r\n        describe(\"#addItem\", function () {\r\n            describe(\"when grid item is empty\", function () {\r\n                var item;\r\n                beforeEach(function (done) {\r\n                    model.data = [];\r\n                    model.itemModelType = asyncItemModelType;\r\n                    model.initialize().then(function () {\r\n                        item = { id: 21, foo: \"bar\" };\r\n                        done();\r\n                    });\r\n                });\r\n\r\n                it(\"should put new item to empty list\", function (done) {\r\n                    model.addItem(item).then(function () {\r\n                        expect(model.get(\"items\")[0].id).to.equal(21);\r\n                        expect(model.get(\"items\").length).to.equal(1);\r\n                        done();\r\n                    });\r\n                });\r\n            });\r\n\r\n            describe(\"when grid item is not empty\", function () {\r\n                var item, refItem;\r\n                beforeEach(function (done) {\r\n                    model.data = [{ id: 1, assetKey: \"1\" }, { id: 2, assetKey: \"2\" }, { id: 3, assetKey: \"3\" }];\r\n                    model.itemModelType = asyncItemModelType;\r\n                    model.initialize().then(function () {\r\n                        item = { id: 21, foo: \"bar\", assetKey: \"21\" };\r\n                        refItem = model.get(\"items\")[0];\r\n                        done();\r\n                    });\r\n                });\r\n\r\n                it(\"should put new item to the very top\", function (done) {\r\n                    model.addItem(item, refItem, true).then(function () {\r\n                        expect(model.get(\"items\")[0].id).to.equal(21);\r\n                        expect(model.get(\"items\").length).to.equal(4);\r\n                        done();\r\n                    });\r\n                });\r\n\r\n                describe(\"when adding item is existed in item list\", function () {\r\n                    it(\"should move new item to the very top\", function (done) {\r\n                        model.addItem({ id: 3, assetKey: \"3\" }, refItem, true).then(function () {\r\n                            expect(model.get(\"items\")[0].id).to.equal(3);\r\n                            expect(model.get(\"items\").length).to.equal(3);\r\n                            done();\r\n                        });\r\n                    });\r\n                });\r\n                describe('and the item does not have any groupName', function () {\r\n                    it('should add the defaultGroupName', function (done) {\r\n                        var defaultValue = \"my default value\";\r\n                        model.defaultAssetGroupName = defaultValue;\r\n                        model.addItem({ id: 4, assetKey: \"new\" }, refItem, true).then(function () {\r\n                            expect(model.get(\"items\")[0].groupName).to.equal(defaultValue);\r\n                            done();\r\n                        });\r\n                    });\r\n                });\r\n                describe('and the item has a groupName', function () {\r\n                    it('should not override the groupName with the default value', function (done) {\r\n                        var myDefinedValue = \"defined value\";\r\n                        model.defaultAssetGroupName = \"my default value\";\r\n                        model.addItem({ id: 4, assetKey: \"new\", groupName: myDefinedValue }, refItem, true).then(function () {\r\n                            expect(model.get(\"items\")[0].groupName).to.equal(myDefinedValue);\r\n                            done();\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n\r\n        describe(\"#saveItem\", function () {\r\n            var item = { id: 1, foo: \"bar\", assetKey: \"1\" };\r\n            var spy;\r\n            beforeEach(function (done) {\r\n                model.data = [item, { id: 2, assetKey: \"2\" }, { id: 3, assetKey: \"3\" }];\r\n                model.itemModelType = syncItemModelType;\r\n                model.initialize().then(function () {\r\n                    done();\r\n                });\r\n                spy = sinon.spy(model._itemModels, \"splice\");\r\n            });\r\n\r\n            afterEach(function () {\r\n                spy.restore();\r\n            });\r\n\r\n            describe(\"when other item has same key\", function () {\r\n                it(\"should not save the item\", function () {\r\n                    var itemIndex = model.data.indexOf(item);\r\n                    model.saveItem(item, itemIndex + 1);\r\n                    expect(spy).to.have.not.been.called;\r\n                });\r\n            });\r\n\r\n            describe(\"when no other item has same key\", function () {\r\n                it(\"should save the item\", function () {\r\n                    var itemIndex = model.data.indexOf(item);\r\n                    model.saveItem(item, itemIndex);\r\n                    expect(spy).to.have.been.called.once;\r\n                });\r\n            });\r\n        });\r\n\r\n        describe(\"#generateFormatters\", function () {\r\n            describe(\"when column definitions has a thumbnail\", function () {\r\n\r\n                it(\"display name with its thumnail\", function () {\r\n                    model.generateFormatters(fakeColumnDefinitionsHasThumbnail);\r\n                    expect(fakeColumnDefinitionsHasThumbnail.thumbnailUrl.formatter).to.exist;\r\n                });\r\n\r\n            });\r\n\r\n            describe(\"when column definitions has no thumbnail\", function () {\r\n                it(\"display name with no thumnail\", function () {\r\n                    model.generateFormatters(fakeColumnDefinitionsHasNoThumbnail);\r\n                    expect(fakeColumnDefinitionsHasNoThumbnail.thumbnailUrl.formatter).to.not.exist;\r\n                });\r\n            });\r\n        });\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\viewmodel\\InventoryCollectionReadOnlyEditorModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\viewmodel\\InventoryOverviewEditorModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\viewmodel\\PriceCollectionReadOnlyEditorModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\viewmodel\\PricingOverviewEditorModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\viewmodel\\PromotionScheduleEditorViewModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\contentediting\\viewmodel\\VariantCollectionEditorModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\dgrid\\_ClickablePathColumnMixin_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\MarketingUtils_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\store\\Aggressive_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\store\\CompositeKey_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\_ContentSecurableList_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\_DiscountTreeNode_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\_MarketingItemTag_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\_MarketingListBase_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\_SelectorBase_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\AggressiveStoreFactory.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/store/Patchable' is an internal Episerver module and can have a breaking change in any release.",
                "line": 9,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/store/Patchable\",",
                "endLine": 9,
                "endColumn": 32
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/store/CustomQueryEngine' is an internal Episerver module and can have a breaking change in any release.",
                "line": 11,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/store/CustomQueryEngine\",",
                "endLine": 11,
                "endColumn": 38
            },
            {
                "ruleId": "episerver-cms/no-deprecated-episerver-apis",
                "severity": 1,
                "message": "'epi-cms/store/CustomQueryEngine' is a deprecated Episerver module and will be removed in a future major version.",
                "line": 11,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/store/CustomQueryEngine\",",
                "endLine": 11,
                "endColumn": 38
            }
        ],
        "errorCount": 2,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/Deferred\",\r\n    \"dojo/json\",\r\n    \"dojo/Stateful\",\r\n    \"dojo/store/Memory\",\r\n    \"epi/shell/store/Patchable\",\r\n    \"epi/shell/TypeDescriptorManager\",\r\n    \"epi-cms/store/CustomQueryEngine\",\r\n    \"epi-ecf-ui/store/Aggressive\",\r\n    \"epi-ecf-ui/MarketingUtils\",\r\n    \"dojo/text!/mocks/data/PromotionData.json\"\r\n], function (\r\n    array,\r\n    declare,\r\n    lang,\r\n    Deferred,\r\n    json,\r\n    Stateful,\r\n    MemoryStore,\r\n    Patchable,\r\n    TypeDescriptorManager,\r\n    CustomQueryEngine,\r\n    Aggressive,\r\n    MarketingUtils,\r\n    promotionData\r\n) {\r\n    return declare([Stateful], {\r\n        contentData: null,\r\n        masterStore: null,\r\n        aggressiveStore: null,\r\n\r\n        constructor: function () {\r\n            TypeDescriptorManager.registerTypeSettings([{\r\n                typeIdentifier: MarketingUtils.contentTypeIdentifier.salesCampaign,\r\n                dndTypes: MarketingUtils.contentTypeIdentifier.salesCampaign,\r\n                iconClass: \"epi-iconObjectCampaign\"\r\n            }, {\r\n                typeIdentifier: MarketingUtils.contentTypeIdentifier.promotionData,\r\n                dndTypes: MarketingUtils.contentTypeIdentifier.promotionData,\r\n                iconClass: \"epi-iconObjectItem\"\r\n            }]);\r\n\r\n            var contentData = json.parse(promotionData);\r\n            var masterStore = new MemoryStore({ data: contentData, idProperty: \"contentLink\", queryEngine: CustomQueryEngine });\r\n            masterStore._queryBackup = masterStore.query;\r\n            masterStore.query = function (query, options) {\r\n                var results;\r\n                if (query && query.query === \"getchildren\") {\r\n                    results = array.filter(this.data, function (cat) {\r\n                        return cat.parentLink === query.referenceId;\r\n                    });\r\n                }\r\n                if (query && query.query === \"getdescendents\") {\r\n                    results = array.filter(this.data, function (cat) {\r\n                        return (query.includeRoot && cat.contentLink === query.referenceId) || query.typeIdentifiers.indexOf(cat.typeIdentifier) > -1;\r\n                    });\r\n                }\r\n\r\n                if (results) {\r\n                    var df = new Deferred();\r\n                    setTimeout(function(){\r\n                        df.resolve(results);\r\n                    }, 50);\r\n\r\n                    var promise = df.promise;\r\n                    promise = lang.delegate(promise, {\r\n                        forEach: results.forEach\r\n                    });\r\n                    return promise;\r\n                } else {\r\n                    return this._queryBackup(query, options);\r\n                }\r\n            };\r\n\r\n            var options = {\r\n                rootId: 1,\r\n                typeIdentifiers: [\r\n                    MarketingUtils.contentTypeIdentifier.campaignFolder,\r\n                    MarketingUtils.contentTypeIdentifier.salesCampaign,\r\n                    MarketingUtils.contentTypeIdentifier.promotionData\r\n                ],\r\n                includeRoot: true\r\n            };\r\n            masterStore = Patchable(masterStore, new MemoryStore({ idProperty: \"contentLink\" }));\r\n            var aggressiveStore = Aggressive(masterStore, options);\r\n\r\n            this.set(\"contentData\", contentData);\r\n            this.set(\"masterStore\", masterStore);\r\n            this.set(\"aggressiveStore\", aggressiveStore);\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\BackToPreviousViewNotification_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\CampaignItemList_specs.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/store/EventedStore' is an internal Episerver module and can have a breaking change in any release.",
                "line": 9,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/store/EventedStore\",",
                "endLine": 9,
                "endColumn": 35
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/store/Patchable' is an internal Episerver module and can have a breaking change in any release.",
                "line": 10,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/store/Patchable\",",
                "endLine": 10,
                "endColumn": 32
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    \"dojo/keys\",\r\n    \"dojo/Stateful\",\r\n    \"epi-ecf-ui/widget/CampaignItemList\",\r\n    \"epi-ecf-ui/MarketingUtils\",\r\n    \"epi/shell/TypeDescriptorManager\",\r\n    \"epi/dependency\",\r\n    \"epi/datetime\",\r\n    \"epi/shell/store/EventedStore\",\r\n    \"epi/shell/store/Patchable\",\r\n    \"epi/shell/store/Registry\",\r\n    \"epi/i18n!epi/nls/commerce.widget.marketingitemlist\"\r\n], function(\r\n    keys,\r\n    Stateful,\r\n    CampaignItemList,\r\n    MarketingUtils,\r\n    TypeDescriptorManager,\r\n    dependency,\r\n    epiDate,\r\n    EventedStore,\r\n    Patchable,\r\n    Registry,\r\n    resources\r\n){\r\n    describe('epi-ecf-ui/widget/CampaignItemList', function () {\r\n        var subject, subjectWithEventedStore, currentContext, storeMock, eventedStoreMock, registry;\r\n        beforeEach(function () {\r\n            var contentRepositoryDescriptorsMock = {\r\n                marketing: {\r\n                    roots: [1]\r\n                }\r\n            };\r\n\r\n            registry = new Registry();\r\n            registry.add(\"epi.cms.contenttype\", { get: function () { } });\r\n            registry.add(\"epi.commerce.marketingstatistics\", { get: function () { return []; } });\r\n            registry.add(\"epi.cms.content.search\", { get: function () { } });\r\n\r\n            dependency.register(\"epi.storeregistry\", registry);\r\n            dependency.register(\"epi.shell.HashWrapper\", { getHash: function () { } });\r\n            dependency.register(\"epi.cms.contentRepositoryDescriptors\", contentRepositoryDescriptorsMock);\r\n            dependency.register(\"epi.commerce.FacetFiltersService\", {\r\n                getFiltersAsJson: function () { }\r\n            });\r\n\r\n            TypeDescriptorManager.registerTypeSettings([{\r\n                typeIdentifier: MarketingUtils.contentTypeIdentifier.salesCampaign,\r\n                baseTypes: null\r\n            }, {\r\n                typeIdentifier: MarketingUtils.contentTypeIdentifier.promotionData,\r\n                baseTypes: null\r\n            }, {\r\n                typeIdentifier: MarketingUtils.contentTypeIdentifier.entryPromotion,\r\n                baseTypes: null\r\n            }, {\r\n                typeIdentifier: MarketingUtils.contentTypeIdentifier.orderPromotion,\r\n                baseTypes: null\r\n            }, {\r\n                typeIdentifier: MarketingUtils.contentTypeIdentifier.shippingPromotion,\r\n                baseTypes: null\r\n            }]);\r\n            var campaignFromStore = { name: \"name\", description: \"description\" },\r\n                _store = {\r\n                    query: function () {\r\n                        return campaignFromStore;\r\n                    },\r\n                    remove: function () { }\r\n                };\r\n            storeMock = {\r\n                query: function () {\r\n                    return campaignFromStore;\r\n                }\r\n             };\r\n            eventedStoreMock = EventedStore(Patchable(_store, _store));\r\n            currentContext = {\r\n                id: 1\r\n            };\r\n            subject = new CampaignItemList({\r\n                store: storeMock,\r\n                contentDataStore: {},\r\n                _currentContext: currentContext\r\n            });\r\n            subject.startup();\r\n            subjectWithEventedStore = new CampaignItemList({\r\n                store: eventedStoreMock,\r\n                contentDataStore: {},\r\n                _currentContext: currentContext\r\n            });\r\n            subjectWithEventedStore.startup();\r\n        });\r\n        afterEach(function () {\r\n            registry = null;\r\n            dependency.clear();\r\n            TypeDescriptorManager.clear();\r\n        });\r\n        describe('after an instance is created', function () {\r\n            it('should have added a getChildren function on the store', function () {\r\n                expect(storeMock.getChildren).to.be.a('function');\r\n            });\r\n            it('should have added a mayHaveChildren function to the store', function () {\r\n                expect(storeMock.mayHaveChildren).to.be.a('function');\r\n            });\r\n            describe('when calling getChildren on the store', function () {\r\n                it('should query the store with the parents contentLink as referenceId', function () {\r\n                    var parent = { contentLink: 5 };\r\n                    var querySpy = sinon.spy(storeMock, \"query\");\r\n                    storeMock.getChildren(parent);\r\n                    expect(querySpy).to.be.calledWith(sinon.match.has(\"referenceId\", parent.contentLink));\r\n                });\r\n            });\r\n            describe('when calling mayHaveChildren on the store', function () {\r\n                it('should return true if the parent is a campaign', function () {\r\n                    var parent = { typeIdentifier: MarketingUtils.contentTypeIdentifier.salesCampaign };\r\n                    var result = storeMock.mayHaveChildren(parent);\r\n                    expect(result).to.equal(true);\r\n                });\r\n            });\r\n        });\r\n        describe('when the grid has a noDataNode and renderArray is called', function () {\r\n            it('should clear the noDataNode on the grid', function () {\r\n                subject.grid.noDataNode = {};\r\n                subject.grid.renderArray({/*result param needs a value*/ });\r\n                expect(subject.grid.noDataNode).to.equal(null);\r\n            });\r\n        });\r\n        describe('when creating the model', function () {\r\n            it('should add the store to the model', function () {\r\n                var result = subject.createModel();\r\n                expect(result.store).to.equal(storeMock);\r\n            });\r\n        });\r\n        describe('when the context menu is clicked', function () {\r\n            it('should update the models commands with the data from the clicked row', function () {\r\n                var e = {};\r\n                var row = {\r\n                    data: {\r\n                        contentLink: \"1\"\r\n                    }\r\n                };\r\n                var rowStub = sinon.stub(subject.grid, \"row\", function (target) {\r\n                    return target === e ? row : null;\r\n                });\r\n                var updateModelSpy = sinon.spy(subject.model, \"updateCommandModel\");\r\n                subject.onContextMenuClick(e);\r\n                expect(updateModelSpy).to.be.calledWith(row.data);\r\n                rowStub.restore();\r\n                updateModelSpy.restore();\r\n            });\r\n        });\r\n        describe('keyboard support', function () {\r\n            var row, event;\r\n            beforeEach(function () {\r\n                event = { preventDefault: function () { } };\r\n                row = {\r\n                    data: {\r\n                        uri: \"my uri\"\r\n                    }\r\n                };\r\n                sinon.stub(subject.grid, \"row\", function () {\r\n                    return row;\r\n                });\r\n                sinon.spy(subject, \"_requestNewContext\");\r\n            });\r\n            describe('when ENTER is pressed', function () {\r\n                it('should change context to the data of the row that is pressed', function () {\r\n                    //simulating pressing ENTER\r\n                    subject.grid.keyMap[keys.ENTER](event);\r\n                    expect(subject._requestNewContext).to.be.calledWith(sinon.match.has(\"uri\", row.data.uri));\r\n                });\r\n            });\r\n            describe('when SPACE is pressed', function () {\r\n                it('should change context to the data of the row that is pressed', function () {\r\n                    //simulating pressing SPACE\r\n                    subject.grid.keyMap[keys.SPACE](event);\r\n                    expect(subject._requestNewContext).to.be.calledWith(sinon.match.has(\"uri\", row.data.uri));\r\n                });\r\n            });\r\n            describe('when DELETE is pressed', function () {\r\n                var deleteCommand;\r\n                beforeEach(function () {\r\n                    deleteCommand = Stateful({\r\n                        execute: function () { }\r\n                    });\r\n                    sinon.stub(subject.model, \"createDeleteCommand\", function () {\r\n                        return deleteCommand;\r\n                    });\r\n                });\r\n                it('should call createDeleteCommand on model', function () {\r\n                    subject.grid.keyMap[keys.DELETE](event);\r\n                    expect(subject.model.createDeleteCommand).to.be.called;\r\n                });\r\n                it('should set the model on the command to the data of the row', function () {\r\n                    subject.grid.keyMap[keys.DELETE](event);\r\n                    expect(deleteCommand.get(\"model\")).to.eql(row.data);\r\n                });\r\n                it('should call execute on the command', function () {\r\n                    sinon.spy(deleteCommand, \"execute\");\r\n                    subject.grid.keyMap[keys.DELETE](event);\r\n                    expect(deleteCommand.execute).to.be.called;\r\n                });\r\n            });\r\n        });\r\n        describe(\"#_getStatusHtml\", function () {\r\n            var result;\r\n            var now = new Date();\r\n            describe(\"when status is pending\", function () {\r\n                it(\"should return string pending\", function () {\r\n                    result = subject._getStatusHtml({\r\n                        status: MarketingUtils.status.pending,\r\n                        validFrom: new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000), // Valid From is 2 days after today\r\n                        validUntil: new Date(now.getTime() + 1 * 24 * 60 * 60 * 1000) // Valid Until is tomorrow\r\n                    });\r\n                    expect(result).to.contain(resources.datetext.pending);\r\n                });\r\n            });\r\n            describe(\"when status is expired\", function () {\r\n                it(\"should return string expired\", function () {\r\n                    result = subject._getStatusHtml({\r\n                        status: MarketingUtils.status.expired,\r\n                        validFrom: new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000), // Valid From is 2 days before today\r\n                        validUntil: new Date(now.getTime() - 1 * 24 * 60 * 60 * 1000) // Valid Until is yesterday\r\n                    });\r\n                    expect(result).to.contain(resources.datetext.expired);\r\n                });\r\n            });\r\n            describe(\"when status is inactive\", function () {\r\n                it(\"should return string inactive\", function () {\r\n                    result = subject._getStatusHtml({ status: MarketingUtils.status.inactive });\r\n                    expect(result).to.contain(\"Inactive\");\r\n                });\r\n            });\r\n            // issue COM-221\r\n            describe(\"when status is inactive and followsCampaignSchedule dates\", function () {\r\n                it(\"should return string inactive\", function () {\r\n                    result = subject._getStatusHtml({ status: MarketingUtils.status.inactive, followsCampaignSchedule: true });\r\n                    expect(result).to.contain(\"Inactive\");\r\n                });\r\n            });\r\n\r\n            describe(\"when statusColumnModel typeIdentifier is campaign\", function () {\r\n                it(\"should display campaign date text without time info\", function () {\r\n                    var statusColumnModel = {\r\n                        typeIdentifier: MarketingUtils.contentTypeIdentifier.salesCampaign,\r\n                        statusLabelKey: 'active',\r\n                        validFrom: '2020-02-03T12:00:00Z',\r\n                        validUntil: '2020-10-15T12:00:00Z'\r\n                    };\r\n\r\n                    result = subject._getStatusHtml(statusColumnModel);\r\n                    expect(result).to.contain(\"2/3/20 - 10/15/20\");\r\n                });\r\n            });\r\n\r\n            describe(\"when statusColumnModel typeIdentifier is promotion\", function () {\r\n                describe(\"when promotion status is active\", function () {\r\n                    it(\"should display promotion date text without time info\", function () {\r\n                        var statusColumnModel = {\r\n                            status: MarketingUtils.status.active,\r\n                            campaignstatus: MarketingUtils.status.active,\r\n                            typeIdentifier: MarketingUtils.contentTypeIdentifier.promotionData,\r\n                            statusLabelKey: 'active',\r\n                            validFrom: '2020-02-03T12:00:00Z',\r\n                            validUntil: '2020-10-15T12:00:00Z'\r\n                        };\r\n\r\n                        result = subject._getStatusHtml(statusColumnModel);\r\n                        expect(result).to.contain(\"2/3/20 - 10/15/20\");\r\n                    });\r\n                });\r\n\r\n                describe(\"when promotion status is inactive\", function () {\r\n                    it(\"should display promotion inactive status\", function () {\r\n                        var statusColumnModel = {\r\n                            status: MarketingUtils.status.inactive,\r\n                            campaignstatus: MarketingUtils.status.active,\r\n                            typeIdentifier: MarketingUtils.contentTypeIdentifier.promotionData,\r\n                            statusLabelKey: 'active',\r\n                            validFrom: '2020-02-03T12:00:00Z',\r\n                            validUntil: '2020-10-15T12:00:00Z'\r\n                        };\r\n\r\n                        result = subject._getStatusHtml(statusColumnModel);\r\n                        expect(result).to.equal(\"Inactive\");\r\n                    });\r\n                });\r\n\r\n                describe(\"when promotion status is pending\", function () {\r\n                    it(\"should display promotion status\", function () {\r\n                        var statusColumnModel = {\r\n                            campaignstatus: MarketingUtils.status.active,\r\n                            typeIdentifier: MarketingUtils.contentTypeIdentifier.promotionData,\r\n                            statusLabelKey: 'active',\r\n                            validFrom: new Date('2020-02-03T12:00:00Z'),\r\n                            validUntil: new Date('2020-10-15T12:00:00Z')\r\n                        };\r\n\r\n                        result = subject._getStatusHtml(statusColumnModel);\r\n                        expect(result).to.contain(\"Going live 2/3/20\");\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        describe(\"#getItemStatusClass\", function () {\r\n            var item, result;\r\n            describe(\"when type is campaign\", function () {\r\n                beforeEach(function () {\r\n                    item = { properties: {} };\r\n                    item.typeIdentifier = MarketingUtils.contentTypeIdentifier.salesCampaign;\r\n                });\r\n                describe(\"and status is pending\", function () {\r\n                    it(\"should return pending class\", function () {\r\n                        item.properties.status = MarketingUtils.status.pending;\r\n                        result = subject.getItemStatusClass(item);\r\n                        expect(result).to.equal(\"epi-card-grid__heading--pending\");\r\n                    });\r\n                });\r\n                describe(\"and status is active\", function () {\r\n                    it(\"should return active class\", function () {\r\n                        item.properties.status = MarketingUtils.status.active;\r\n                        result = subject.getItemStatusClass(item);\r\n                        expect(result).to.equal(\"epi-card-grid__heading--active\");\r\n                    });\r\n                });\r\n                describe(\"and status is expired\", function () {\r\n                    it(\"should return expired class\", function () {\r\n                        item.properties.status = MarketingUtils.status.expired;\r\n                        result = subject.getItemStatusClass(item);\r\n                        expect(result).to.equal(\"epi-card-grid__heading--expired\");\r\n                    });\r\n                });\r\n                describe(\"and status is inactive\", function () {\r\n                    it(\"should return inactive class\", function () {\r\n                        item.properties.status = MarketingUtils.status.inactive;\r\n                        result = subject.getItemStatusClass(item);\r\n                        expect(result).to.equal(\"epi-card-grid__heading--inactive\");\r\n                    });\r\n                });\r\n            });\r\n            describe(\"when type is promotion\", function () {\r\n                beforeEach(function () {\r\n                    item = { properties: {} };\r\n                    item.typeIdentifier = MarketingUtils.contentTypeIdentifier.promotionData;\r\n                });\r\n                describe(\"and status is pending\", function () {\r\n                    it(\"should return pending class\", function () {\r\n                        item.properties.status = MarketingUtils.status.pending;\r\n                        result = subject.getItemStatusClass(item);\r\n                        expect(result).to.equal(\"epi-card-grid__content--pending\");\r\n                    });\r\n                });\r\n                describe(\"and status is active\", function () {\r\n                    it(\"should return active class\", function () {\r\n                        item.properties.status = MarketingUtils.status.active;\r\n                        result = subject.getItemStatusClass(item);\r\n                        expect(result).to.equal(\"epi-card-grid__content--active\");\r\n                    });\r\n                });\r\n                describe(\"and status is expired\", function () {\r\n                    it(\"should return inactive class\", function () {\r\n                        item.properties.status = MarketingUtils.status.expired;\r\n                        result = subject.getItemStatusClass(item);\r\n                        expect(result).to.equal(\"epi-card-grid__content--inactive\");\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        describe(\"#getItemClass\", function () {\r\n            var item, result;\r\n            beforeEach(function () {\r\n                item = { properties: {} };\r\n            });\r\n            describe(\"when type is campaign\", function () {\r\n                it(\"should return campaign class\", function () {\r\n                    item.typeIdentifier = MarketingUtils.contentTypeIdentifier.salesCampaign;\r\n                    result = subject.getItemClass(item);\r\n                    expect(result).to.equal(\"epi-card-grid__heading\");\r\n                });\r\n            });\r\n            describe(\"when type is promotion\", function () {\r\n                it(\"should return promotion class\", function () {\r\n                    item.typeIdentifier = MarketingUtils.contentTypeIdentifier.promotionData;\r\n                    result = subject.getItemClass(item);\r\n                    expect(result).to.equal(\"epi-card-grid__content\");\r\n                });\r\n            });\r\n        });\r\n\r\n        describe('#when call getQuery', function () {\r\n            it('should call getFiltersAsJson as well', function () {\r\n                var spy = sinon.spy(subject._facetFiltersService, \"getFiltersAsJson\");\r\n                subject.getQuery();\r\n                expect(spy).to.be.called;\r\n            });\r\n        });\r\n\r\n        describe(\"when remove an item from store\", function () {\r\n            it(\"should call grid refresh\", function () {\r\n                var gridRefreshSpy = sinon.spy(subjectWithEventedStore.grid, \"refresh\");\r\n                eventedStoreMock.remove(1);\r\n                expect(gridRefreshSpy).to.be.called;\r\n            });\r\n        });\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\CatalogContentDetails_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\CatalogContentList_specs.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/ClipboardManager' is an internal Episerver module and can have a breaking change in any release.",
                "line": 12,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/ClipboardManager\",",
                "endLine": 12,
                "endColumn": 33
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/dom-class\",\r\n    \"dojo/Deferred\",\r\n    \"dojo/Stateful\",\r\n    \"dojo/when\",\r\n    // epi\r\n    \"epi/dependency\",\r\n    \"epi/shell/TypeDescriptorManager\",\r\n    \"epi/shell/store/Registry\",\r\n    \"epi/shell/ClipboardManager\",\r\n    // commerce\r\n    \"epi-ecf-ui/contentediting/ModelSupport\",\r\n    \"epi-ecf-ui/widget/CatalogContentList\"\r\n], function (\r\n    declare,\r\n    domClass,\r\n    Deferred,\r\n    Stateful,\r\n    when,\r\n    dependency,\r\n    TypeDescriptorManager,\r\n    Registry,\r\n    ClipboardManager,\r\n    ModelSupport,\r\n    CatalogContentList) {\r\n\r\n    describe(\"epi-ecf-ui/widget/CatalogContentList\", function () {\r\n\r\n        var catalogContentList, store, registry;\r\n        var singleObjectModel;\r\n        var contentRepositoryDescriptorsMock;\r\n        var constructDependencies = function () {\r\n            contentRepositoryDescriptorsMock = {\r\n                product: {\r\n                    containedTypes: [\"episerver.commerce.product\"],\r\n                    creatableTypes: [\"episerver.commerce.product\"],\r\n                    mainNavigationTypes: [],\r\n                    roots: [3]\r\n                },\r\n                get: function (key) { return this[key]; }\r\n            };\r\n            store = {\r\n                get: function () {\r\n                    return {\r\n                        typeIdentifier: \"episerver.core.contentdata\",\r\n                        contentLink: \"27__CatalogContent\"\r\n                    };\r\n                },\r\n                refresh: function () {\r\n                    var df = new Deferred();\r\n                    df.resolve();\r\n                    return df.promise;\r\n                },\r\n                getIdentity: function () { return; },\r\n                query: function (query, options) {\r\n                    return {\r\n                        observe: function () { }\r\n                    };\r\n                }\r\n            };\r\n        };\r\n\r\n        beforeEach(function () {\r\n            constructDependencies();\r\n            registry = new Registry();\r\n            registry.add(\"epi.commerce.global.clipboard\", new ClipboardManager());\r\n            dependency.register(\"epi.commerce.global\", registry);\r\n\r\n            dependency.register(\"epi.cms.contentRepositoryDescriptors\", contentRepositoryDescriptorsMock);\r\n            dependency.register(\"epi.shell.MessageService\", function () { });\r\n            dependency.register(\"epi.ModuleManager\", function () { });\r\n            dependency.register(\"epi.cms.ContentHierarchyService\", {});\r\n\r\n            TypeDescriptorManager.registerTypeSettings([{\r\n                typeIdentifier: ModelSupport.contentTypeIdentifier.catalogContent,\r\n                baseTypes: null\r\n            }, {\r\n                typeIdentifier: ModelSupport.contentTypeIdentifier.nodeContent,\r\n                baseTypes: null\r\n            }]);\r\n\r\n            registry = {\r\n                get: function (storeKey) {\r\n                    return store;\r\n                }\r\n            };\r\n            dependency.register(\"epi.storeregistry\", registry);\r\n            catalogContentList = new CatalogContentList({\r\n                templateString: \"<div><div data-dojo-attach-point='leadingNode' /></div>\",\r\n                marketSelector: new Stateful()\r\n            });\r\n            singleObjectModel = {\r\n                typeIdentifier: \"episerver.core.contentdata\",\r\n                contentLink: 27,\r\n                id: \"27_1_CatalogContent\",\r\n                properties: {\r\n                    thumbnail: \"\",\r\n                    code: \"1\",\r\n                    price: 1,\r\n                    inStockQuantity: 1\r\n                }\r\n            };\r\n        });\r\n\r\n        afterEach(function () {\r\n            dependency.clear();\r\n            catalogContentList.destroy();\r\n            catalogContentList = null;\r\n            store = null;\r\n            contentRepositoryDescriptorsMock = null;\r\n        });\r\n\r\n        describe(\"if context have context id with work id\", function () {\r\n            it(\"return content data without work id\", function () {\r\n                catalogContentList.fetchData(singleObjectModel);\r\n                var pasteCommand = catalogContentList.model._commandRegistry.pasteOnContext.command;\r\n                expect(pasteCommand.selection.get(\"data\")[0].data.contentLink).to.equal(\"27__CatalogContent\");\r\n            });\r\n        });\r\n        describe(\"if context is a catalog content\", function () {\r\n            it(\"should disabled the sort mode\", function () {\r\n                var sortModeCommand = catalogContentList.model._commandRegistry.toggleSortMode.command;\r\n                catalogContentList.fetchData({ dataType: ModelSupport.contentTypeIdentifier.catalogContent, id: \"11\" });\r\n                expect(sortModeCommand.get(\"canExecute\")).to.be.false;\r\n            });\r\n        });\r\n        describe(\"if context is a catalog content and the sort mode is selected\", function () {\r\n            beforeEach(function () {\r\n                catalogContentList.model._commandRegistry.popupCommand = { command: new Stateful({ isAvailable: false }) };\r\n                catalogContentList.model.set(\"sortMode\", true);\r\n                catalogContentList.fetchData({ dataType: ModelSupport.contentTypeIdentifier.catalogContent, id: \"11\" });\r\n            });\r\n            it(\"should disabled the sort mode\", function () {\r\n                var sortModeCommand = catalogContentList.model._commandRegistry.toggleSortMode.command;\r\n                expect(sortModeCommand.get(\"canExecute\")).to.be.false;\r\n            });\r\n            it(\"should other commands are visible\", function () {\r\n                var popupCommand = catalogContentList.model._commandRegistry.popupCommand.command;\r\n                expect(popupCommand.get(\"isAvailable\")).to.be.true;\r\n            });\r\n        });\r\n        describe(\"if context is a node content\", function () {\r\n            it(\"should enabled the sort mode\", function () {\r\n                var sortModeCommand = catalogContentList.model._commandRegistry.toggleSortMode.command;\r\n                catalogContentList.fetchData({ dataType: ModelSupport.contentTypeIdentifier.nodeContent, id: \"11\" });\r\n                expect(sortModeCommand.get(\"canExecute\")).to.be.true;\r\n            });\r\n        });\r\n        describe('after an instance is created', function () {\r\n            it('should have added a getChildren function on the store', function () {\r\n                expect(typeof store.getChildren === \"function\").to.be.ok;\r\n            });\r\n            it('should have added a mayHaveChildren function to the store', function () {\r\n                expect(typeof store.mayHaveChildren === \"function\").to.be.ok;\r\n            });\r\n            describe('when calling getChildren on the store', function () {\r\n                var getStub, originalQuery,\r\n                    parent = { contentLink: \"27_1_CatalogContent\" };\r\n                beforeEach(function () {\r\n                    originalQuery = {};\r\n                    getStub = sinon.stub(catalogContentList.grid, \"get\", function () {\r\n                        return originalQuery;\r\n                    });\r\n                });\r\n                it('should get the query from the grid', function () {\r\n                    store.getChildren(parent);\r\n                    expect(getStub).to.be.called;\r\n                });\r\n                it('should call _getQueryOptions with the query from the grid', function () {\r\n                    var _getQueryOptionsSpy = sinon.spy(catalogContentList, \"_getQueryOptions\");\r\n                    store.getChildren(parent);\r\n                    expect(_getQueryOptionsSpy).to.have.been.calledWith(parent.contentLink, false, false, originalQuery);\r\n                });\r\n            });\r\n        });\r\n        describe('#_getQueryOptions', function () {\r\n            describe('when no originalQuery is provided', function () {\r\n                it('should use id as currentCategory', function () {\r\n                    var id = \"27_1_CatalogContent\";\r\n                    var queryOptions = catalogContentList._getQueryOptions(id, false);\r\n                    expect(queryOptions.queryParameters.currentCategory).to.equal(id);\r\n                });\r\n            });\r\n            describe('when originalQuery is provided', function () {\r\n                it('should add the original querys currentCategory as currentCategory', function () {\r\n                    var originalQuery = {\r\n                        currentCategory: \"666_1_CatalogContent\"\r\n                    };\r\n                    var queryOptions = catalogContentList._getQueryOptions(\"27_1_CatalogContent\", false, false, originalQuery);\r\n                    expect(queryOptions.queryParameters.currentCategory).to.equal(originalQuery.currentCategory);\r\n                });\r\n            });\r\n            describe('when simplified parameter is false', function () {\r\n                it('should set simplified on queryParameters to false', function () {\r\n                    var id = \"27_1_CatalogContent\";\r\n                    var queryOptions = catalogContentList._getQueryOptions(id, false);\r\n                    expect(queryOptions.queryParameters.simplified).to.be.false;\r\n                });\r\n\r\n                describe('and onlyTopLevelChildren is false', function () {\r\n                    it('should set sort propety to null in queryOptions', function () {\r\n                        var id = \"27_1_CatalogContent\";\r\n                        var queryOptions = catalogContentList._getQueryOptions(id, false, false);\r\n                        expect(queryOptions.queryOptions.sort).to.be.null;\r\n                    });\r\n                });\r\n                describe('and onlyTopLevelChildren is true', function () {\r\n                    it('should not set sort propety to null in queryOptions', function () {\r\n                        var id = \"27_1_CatalogContent\";\r\n                        var queryOptions = catalogContentList._getQueryOptions(id, false, true);\r\n                        expect(queryOptions.queryOptions.sort).not.to.be.null;\r\n                    });\r\n                });\r\n            });\r\n            describe('when simplified parameter is true', function () {\r\n                it('should set simplified on queryParameters to true', function () {\r\n                    var id = \"27_1_CatalogContent\";\r\n                    var queryOptions = catalogContentList._getQueryOptions(id, true);\r\n                    expect(queryOptions.queryParameters.simplified).to.be.true;\r\n                });\r\n\r\n                describe('and onlyTopLevelChildren is false', function () {\r\n                    it('should set sort propety to null in queryOptions', function () {\r\n                        var id = \"27_1_CatalogContent\";\r\n                        var queryOptions = catalogContentList._getQueryOptions(id, true, false);\r\n                        expect(queryOptions.queryOptions.sort).to.be.null;\r\n                    });\r\n                });\r\n                describe('and onlyTopLevelChildren is true', function () {\r\n                    it('should set sort propety to null in queryOptions', function () {\r\n                        var id = \"27_1_CatalogContent\";\r\n                        var queryOptions = catalogContentList._getQueryOptions(id, true, true);\r\n                        expect(queryOptions.queryOptions.sort).to.be.null;\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        describe('#_setGridQuery', function () {\r\n            var getQueryOptionsSpy;\r\n            beforeEach(function () {\r\n                catalogContentList.model.sortMode = false;\r\n                getQueryOptionsSpy = sinon.spy(catalogContentList, \"_getQueryOptions\");\r\n            });\r\n            describe('When no context is supplied', function () {\r\n                it('should not set any query', function () {\r\n                    catalogContentList._setGridQuery();\r\n                    expect(getQueryOptionsSpy).to.not.be.called;\r\n                });\r\n            });\r\n            describe('When a context is supplied', function () {\r\n                var context;\r\n                beforeEach(function () {\r\n                    context = {\r\n                        id: \"some_id\",\r\n                        capabilities: {}\r\n                    };\r\n                });\r\n                describe('and the context has no capabilities', function () {\r\n                    it('should call _getQueryOptions with true \"simplified\" parameter', function () {\r\n                        context.capabilities = null;\r\n                        catalogContentList._setGridQuery(context);\r\n                        expect(getQueryOptionsSpy).to.have.been.calledWith(context.id, true);\r\n                    });\r\n                });\r\n                describe('and the context has truthy sortChildren capability', function () {\r\n                    beforeEach(function () {\r\n                        context.capabilities.sortChildren = true;\r\n                    });\r\n                    it('should call _getQueryOptions with false \"simplified\" parameter', function () {\r\n                        catalogContentList._setGridQuery(context);\r\n                        expect(getQueryOptionsSpy).to.have.been.calledWith(context.id, !context.capabilities.sortChildren);\r\n                    });\r\n                    it('should call _getQueryOptions with true \"topLevel\" parameter', function () {\r\n                        catalogContentList._setGridQuery(context);\r\n                        expect(getQueryOptionsSpy).to.have.been.calledWith(context.id, !context.capabilities.sortChildren, context.capabilities.sortChildren);\r\n                    });\r\n                });\r\n                describe('and the context has falsy sortChildren capability', function () {\r\n                    beforeEach(function () {\r\n                        context.capabilities.sortChildren = false;\r\n                    });\r\n                    it('should call _getQueryOptions with true \"simplified\" parameter', function () {\r\n                        catalogContentList._setGridQuery(context);\r\n                        expect(getQueryOptionsSpy).to.have.been.calledWith(context.id, !context.capabilities.sortChildren);\r\n                    });\r\n                    it('should call _getQueryOptions with false \"topLevel\" parameter', function () {\r\n                        catalogContentList._setGridQuery(context);\r\n                        expect(getQueryOptionsSpy).to.have.been.calledWith(context.id, !context.capabilities.sortChildren, context.capabilities.sortChildren);\r\n                    });\r\n\r\n                });\r\n            });\r\n        });\r\n\r\n        describe(\"copy item from catalog tree second time\", function () {\r\n            var clipboard, value;\r\n            beforeEach(function () {\r\n                value = {\r\n                    type: \"epi.cms.contentdata\",\r\n                    data: {\r\n                        contentLink: \"1\"\r\n                    }\r\n                };\r\n                clipboard = catalogContentList.model.clipboardManager;\r\n            });\r\n            describe('if context does not have context id', function () {\r\n                it(\"should not throw error\", function () {\r\n                    //Execute the copy action first time\r\n                    clipboard.set(\"data\", [value]);\r\n                    //Execute the copy action second time\r\n                    var secondCopy = function () {\r\n                        clipboard.set(\"data\", [value]);\r\n                    };\r\n                    expect(secondCopy).to.not.throw(Error);\r\n                });\r\n            });\r\n        });\r\n\r\n        describe(\"when cut item from catalog list\", function () {\r\n            var clipboard, getStub, value, rowData;\r\n            beforeEach(function () {\r\n                value = {\r\n                    type: \"epi.cms.contentdata\",\r\n                    data: {\r\n                        contentLink: \"1\",\r\n                        rowId: \"2\"\r\n                    }\r\n                };\r\n                rowData = {\r\n                    element: {\r\n                        className: ''\r\n                    }\r\n                };\r\n                getStub = sinon.stub(catalogContentList.grid, \"row\", function (rowId) {\r\n                    if (rowId === value.data.rowId) {\r\n                        return rowData;\r\n                    }\r\n                });\r\n                clipboard = catalogContentList.model.clipboardManager;\r\n            });\r\n            it(\"should set style for cut item to 'epi-opacity50'\", function () {\r\n                clipboard.set(\"copy\", false);\r\n                clipboard.set(\"data\", [value]);\r\n\r\n                expect(getStub).to.be.called;\r\n                expect(rowData.element.className).to.equal(\"epi-opacity50\");\r\n            });\r\n        });\r\n\r\n        describe(\"#_updateMarketSelector\", function () {\r\n            var setSpy, originalSelection = \"SWE\";\r\n            beforeEach(function () {\r\n                catalogContentList.model.set(\"originalMarketSelection\", originalSelection);\r\n                setSpy = catalogContentList.marketSelector.set = sinon.spy();\r\n            });\r\n            describe(\"when entering sort mode\", function () {\r\n                beforeEach(function () {\r\n                    catalogContentList._updateMarketSelector(true);\r\n                });\r\n                it(\"should set market to ALL\", function () {\r\n                    expect(setSpy).to.be.calledWith(\"value\", \"ALL\");\r\n                });\r\n                it(\"should make market selector read-only\", function () {\r\n                    expect(setSpy).to.be.calledWith(\"readOnly\", true);\r\n                });\r\n            });\r\n            describe(\"when leaving sort mode\", function () {\r\n                beforeEach(function () {\r\n                    catalogContentList._updateMarketSelector(false);\r\n                });\r\n                it(\"should set market to original selection\", function () {\r\n                    expect(setSpy).to.be.calledWith(\"value\", originalSelection);\r\n                });\r\n                it(\"should make market selector writeable\", function () {\r\n                    expect(setSpy).to.be.calledWith(\"readOnly\", false);\r\n                });\r\n            });\r\n        });\r\n\r\n        describe(\"sort mode\", function () {\r\n            beforeEach(function () {\r\n\r\n                catalogContentList.model.creatableTypes = [\"popupCommand\"];\r\n                catalogContentList.model._setupCommands();\r\n\r\n                sinon.spy(catalogContentList.grid, \"set\");\r\n                sinon.spy(catalogContentList, \"_setGridQuery\");\r\n                catalogContentList._currentContext = { id: 123, capabilities: { sortChildren: true } };\r\n            });\r\n            describe(\"when entering sort mode\", function () {\r\n                beforeEach(function () {\r\n                    catalogContentList.model.set(\"sortMode\", true);\r\n                    catalogContentList._setGridQuery(catalogContentList._currentContext);\r\n                });\r\n                it(\"should set expected query value on grid\", function () {\r\n                    var expectedQueryOptions = catalogContentList._getQueryOptions(catalogContentList._currentContext.id, false, true);\r\n                    expect(catalogContentList.grid.set).to.be.calledWith(\"query\", expectedQueryOptions.queryParameters, expectedQueryOptions.queryOptions);\r\n                });\r\n                it(\"should add epi-dgrid--sort-mode CSS class to grid DOM node\", function () {\r\n                    expect(domClass.contains(catalogContentList.grid.domNode, \"epi-dgrid--sort-mode\")).to.be.true;\r\n                });\r\n            });\r\n            describe(\"when leaving sort mode\", function () {\r\n                beforeEach(function () {\r\n                    catalogContentList.model.set(\"sortMode\", false);\r\n                    catalogContentList._setGridQuery(catalogContentList._currentContext);\r\n                });\r\n                it(\"should set expected query value on grid\", function () {\r\n                    var expectedQueryOptions = catalogContentList._getQueryOptions(catalogContentList._currentContext.id, false, true);\r\n                    expect(catalogContentList.grid.set).to.be.calledWith(\"query\", expectedQueryOptions.queryParameters, expectedQueryOptions.queryOptions);\r\n                });\r\n                it(\"should not add epi-dgrid--sort-mode CSS class to grid DOM node\", function () {\r\n                    expect(domClass.contains(catalogContentList.grid.domNode, \"epi-dgrid--sort-mode\")).to.be.false;\r\n                });\r\n            });\r\n        });\r\n\r\n        describe(\"#_onDndDrop\", function () {\r\n            beforeEach(function () {\r\n                catalogContentList.model.moveItem = sinon.spy();\r\n                catalogContentList.grid.dndSource.getItem = function (id) {\r\n                    return { data: { id: id, properties: { isLinkedToCurrentCategory: true } } };\r\n                };\r\n            });\r\n            it(\"should call moveItem on model\", function () {\r\n                catalogContentList._onDndDrop(null, catalogContentList.grid.dndSource, [1]);\r\n                expect(catalogContentList.model.moveItem).to.be.called;\r\n            });\r\n            describe(\"when dropping multiple items\", function () {\r\n                describe(\"and move before is true\", function () {\r\n                    it(\"should process them in order\", function () {\r\n                        catalogContentList.grid.dndSource.before = true;\r\n                        catalogContentList._onDndDrop(null, catalogContentList.grid.dndSource, [{ id: 1 }, { id: 2 }, { id: 3 }]);\r\n\r\n                        expect(catalogContentList.model.moveItem.firstCall).to.be.calledWith({ id: 1, properties: { isLinkedToCurrentCategory: true } });\r\n                        expect(catalogContentList.model.moveItem.secondCall).to.be.calledWith({ id: 2, properties: { isLinkedToCurrentCategory: true } });\r\n                        expect(catalogContentList.model.moveItem.thirdCall).to.be.calledWith({ id: 3, properties: { isLinkedToCurrentCategory: true } });\r\n                    });\r\n                });\r\n                describe(\"and move before is false\", function () {\r\n                    it(\"should process them in the reverse order\", function () {\r\n                        catalogContentList.grid.dndSource.before = false;\r\n                        catalogContentList._onDndDrop(null, catalogContentList.grid.dndSource, [{ id: 1 }, { id: 2 }, { id: 3 }]);\r\n\r\n                        expect(catalogContentList.model.moveItem.firstCall).to.be.calledWith({ id: 3, properties: { isLinkedToCurrentCategory: true } });\r\n                        expect(catalogContentList.model.moveItem.secondCall).to.be.calledWith({ id: 2, properties: { isLinkedToCurrentCategory: true } });\r\n                        expect(catalogContentList.model.moveItem.thirdCall).to.be.calledWith({ id: 1, properties: { isLinkedToCurrentCategory: true } });\r\n                    });\r\n                });\r\n                \r\n            });\r\n        });\r\n\r\n        describe(\"#_moveSelectedItem\", function () {\r\n            beforeEach(function () {\r\n                catalogContentList.selection = [{ rowId: \"1\" }];\r\n                catalogContentList.model.moveItem = sinon.spy();\r\n                catalogContentList._refreshView = sinon.spy();\r\n                catalogContentList.grid.dndSource.getItem = sinon.stub().returns({});\r\n            });\r\n\r\n            describe(\"when sorting upwards and previous sibling exists\", function () {\r\n                beforeEach(function () {\r\n                    catalogContentList.grid.row = sinon.stub().returns({ element: { previousSibling: {}, nextSibling: {} } });\r\n                });\r\n                it(\"should call moveItem on model\", function (done) {\r\n                    when(catalogContentList._moveSelectedItem(true)).then(function () {\r\n                        expect(catalogContentList.model.moveItem).to.be.called;\r\n                        done();\r\n                    });\r\n                });\r\n                it(\"should refresh the view\", function (done) {\r\n                    when(catalogContentList._moveSelectedItem(true)).then(function () {\r\n                        expect(catalogContentList._refreshView).to.be.called;\r\n                        done();\r\n                    });\r\n                });\r\n            });\r\n\r\n            describe(\"when sorting upwards and item is the first in list\", function () {\r\n                beforeEach(function () {\r\n                    catalogContentList.grid.row = sinon.stub().returns({ element: { nextSibling: {} } });\r\n                });\r\n                it(\"should not call moveItem on model\", function (done) {\r\n                    when(catalogContentList._moveSelectedItem(true)).then(function () {\r\n                        expect(catalogContentList.model.moveItem).not.to.be.called;\r\n                        done();\r\n                    });\r\n                });\r\n                it(\"should not refresh the view\", function (done) {\r\n                    when(catalogContentList._moveSelectedItem(true)).then(function () {\r\n                        expect(catalogContentList._refreshView).not.to.be.called;\r\n                        done();\r\n                    });\r\n                });\r\n            });\r\n\r\n            describe(\"when sorting downwards and next sibling exists\", function () {\r\n                beforeEach(function () {\r\n                    catalogContentList.grid.row = sinon.stub().returns({ element: { previousSibling: {}, nextSibling: {} } });\r\n                });\r\n                it(\"should call moveItem on model\", function (done) {\r\n                    when(catalogContentList._moveSelectedItem(true)).then(function () {\r\n                        expect(catalogContentList.model.moveItem).to.be.called;\r\n                        done();\r\n                    });\r\n                });\r\n                it(\"should refresh the view\", function (done) {\r\n                    when(catalogContentList._moveSelectedItem(true)).then(function () {\r\n                        expect(catalogContentList._refreshView).to.be.called;\r\n                        done();\r\n                    });\r\n                });\r\n            });\r\n\r\n            describe(\"when sorting downwards and item is the last in list\", function () {\r\n                beforeEach(function () {\r\n                    catalogContentList.grid.row = sinon.stub().returns({ element: { previousSibling: {} } });\r\n                });\r\n                it(\"should not call moveItem on model\", function (done) {\r\n                    when(catalogContentList._moveSelectedItem(false)).then(function () {\r\n                        expect(catalogContentList.model.moveItem).not.to.be.called;\r\n                        done();\r\n                    });\r\n                });\r\n                it(\"should not refresh the view\", function (done) {\r\n                    when(catalogContentList._moveSelectedItem(false)).then(function () {\r\n                        expect(catalogContentList._refreshView).not.to.be.called;\r\n                        done();\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\CatalogList_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\DeleteCampaignItemDialog_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\DictionaryAdministration_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\DiscountList_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\DiscountSelector_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\DiscountSelectorDialog_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\DiscountTree_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\GridFormView_specs.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/store/Patchable' is an internal Episerver module and can have a breaking change in any release.",
                "line": 11,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/store/Patchable\",",
                "endLine": 11,
                "endColumn": 32
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/CreateContent' is an internal Episerver module and can have a breaking change in any release.",
                "line": 14,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/CreateContent\",",
                "endLine": 14,
                "endColumn": 43
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    \"dojo/_base/declare\",\r\n    \"dojo/dom-class\",\r\n    \"dojo/Deferred\",\r\n    \"dojo/evented\",\r\n    \"dojo/topic\",\r\n    \"dojo/Stateful\",\r\n    \"dojo/store/Memory\",\r\n    \"dojo/when\",\r\n    \"epi/dependency\",\r\n    \"epi/shell/store/Patchable\",\r\n    \"epi/shell/ViewSettings\",\r\n    \"epi/shell/TypeDescriptorManager\",\r\n    \"epi-cms/contentediting/CreateContent\",\r\n    \"epi-ecf-ui/contentediting/ModelSupport\",\r\n    \"epi-ecf-ui/widget/GridFormView\",\r\n    \"epi-ecf-ui-test/widget/AggressiveStoreFactory\"\r\n], function (\r\n    declare,\r\n    domClass,\r\n    Deferred,\r\n    evented,\r\n    topic,\r\n    Stateful,\r\n    MemoryStore,\r\n    when,\r\n    dependency,\r\n    Patchable,\r\n    ViewSettings,\r\n    TypeDescriptorManager,\r\n    CreateContent,\r\n    ModelSupport,\r\n    GridFormView,\r\n    AggressiveStoreFactory\r\n){\r\n    describe(\"epi-ecf-ui/widget/GridFormView\", function () {\r\n        var subject, model, store;\r\n\r\n        beforeEach(function () {\r\n            var contentRepositoryDescriptorsMock = {\r\n                marketing: {\r\n                    roots: [1]\r\n                }\r\n            };\r\n\r\n            TypeDescriptorManager.registerTypeSettings([{\r\n                typeIdentifier: ModelSupport.contentTypeIdentifier.salesCampaign,\r\n                baseTypes: null\r\n            }, {\r\n                typeIdentifier: ModelSupport.contentTypeIdentifier.promotionData,\r\n                baseTypes: null\r\n                }]);\r\n\r\n            dependency.register(\"epi.shell.HashWrapper\", { getHash: function () { } });\r\n            dependency.register(\"epi.commerce.FacetFiltersService\", {});\r\n            dependency.register(\"epi.cms.contentRepositoryDescriptors\", contentRepositoryDescriptorsMock);\r\n            dependency.register(\"epi.shell.MessageService\", {\r\n                observe: function(){},\r\n                query: function () { return []; }\r\n            });\r\n            dependency.register(\"epi.ModuleManager\", {});\r\n            store = Patchable({\r\n                get: function() {\r\n                    return {\r\n                        contentTypeID: 1,\r\n                        availableContentTypes: [2]\r\n                    };\r\n                },\r\n                query: function () {\r\n                    return [{}, {}];\r\n                },\r\n                idProperty: \"contentTypeID\"\r\n            }, new MemoryStore());\r\n\r\n            dependency.register(\"epi.storeregistry\", {\r\n                get: function() {\r\n                    return store;\r\n                }\r\n            });\r\n            var validator = {\r\n                clearErrorsBySource: function () { },\r\n                validationSource: { client: 1, server: 2 }\r\n            };\r\n\r\n            model = new Stateful({\r\n                hasPendingChanges: false,\r\n\r\n                contentDataStore: { refresh: function() {\r\n                    return when({});\r\n                } },\r\n\r\n                setProperty: function(){},\r\n                save: function () {\r\n                    return when(true);\r\n                },\r\n                destroy: function(){},\r\n                reload: function(){\r\n                    return when({});\r\n                },\r\n                validator: validator,\r\n                canChangeContent: function(){},\r\n                own: function () { },\r\n                contentData: { typeIdentifier: ModelSupport.contentTypeIdentifier.salesCampaign, contentTypeID: 1 }\r\n            });\r\n\r\n            subject = new GridFormView({\r\n                toolbar: {\r\n                    add: function () { },\r\n                    setItemProperty: function () { }\r\n                },\r\n                contentDataStore: {},\r\n                layout: function () { },\r\n                viewModel: model,\r\n                _form: {\r\n                    containerLayout: {\r\n                        set: function () { },\r\n                        addChild: function () { }\r\n                    },\r\n                    _removeAndDestroyForm: function () { },\r\n                    destroyRecursive: function () { }\r\n                },\r\n                _formConnects: {\r\n                    pop: function () { }\r\n                },\r\n                _contentLightStore: store\r\n            });\r\n            sinon.stub(subject, \"_onBeforeUnload\", function(){\r\n                return null;\r\n            });\r\n            sinon.stub(subject, \"_createViewModel\", function(contentLink){\r\n                model.contentLink = contentLink;\r\n                return model;\r\n            });\r\n        });\r\n\r\n        afterEach(function () {\r\n            dependency.clear();\r\n            subject.destroy();\r\n        });\r\n\r\n        describe('#_onCancel', function () {\r\n            var topicSpy,\r\n                oldViewSettings = ViewSettings.settings;\r\n\r\n            beforeEach(function () {\r\n                topicSpy = sinon.spy(topic, \"publish\");\r\n                ViewSettings.settings = { defaultContext: 5 };\r\n            });\r\n\r\n            afterEach(function () {\r\n                topicSpy.restore();\r\n                ViewSettings.settings = oldViewSettings;\r\n            });\r\n\r\n            var createBackCommandMock = function (canExecute){\r\n                var mock = {\r\n                    get: function (value) {\r\n                        return canExecute;\r\n                    },\r\n                    execute: function () { }\r\n                };\r\n                sinon.stub(subject, \"_createBackCommand\", function () {\r\n                    return mock;\r\n                });\r\n                return mock;\r\n            };\r\n\r\n            describe('if there is no navigation history', function() {\r\n                it('should change context to default context', function () {\r\n                    createBackCommandMock(false);\r\n                    subject._onCancel();\r\n                    expect(topicSpy).to.be.calledWith(\"/epi/shell/context/request\", { uri: ViewSettings.settings.defaultContext }, { sender: subject });\r\n                });\r\n            });\r\n\r\n            describe('if there is navigation history', function () {\r\n                describe('if were editing a campaign', function () {\r\n                    it('should change context to default context', function () {\r\n                        createBackCommandMock(true);\r\n                        subject._onCancel();\r\n                        expect(topicSpy).to.be.calledWith(\"/epi/shell/context/request\", { uri: ViewSettings.settings.defaultContext }, { sender: subject });\r\n                    });\r\n                });\r\n                describe('if were editing a discount', function () {\r\n                    it('should navigate to previous content view', function () {\r\n                        subject.viewModel.contentData = {\r\n                            typeIdentifier: ModelSupport.contentTypeIdentifier.promotionData\r\n                        };\r\n                        var mock = createBackCommandMock(true);\r\n                        var spy = sinon.spy(mock, \"execute\");\r\n                        subject._onCancel();\r\n                        expect(spy).to.be.called.once;\r\n                        spy.restore();\r\n                    });\r\n                });\r\n            });\r\n\r\n            describe('if creating discount', function () {\r\n                it('should navigate to discount priority view', function () {\r\n                    subject.viewModel.contentData = {\r\n                        typeIdentifier: ModelSupport.contentTypeIdentifier.promotionData,\r\n                        parentLink: 7\r\n                    };\r\n                    subject._isCreatingContent = true;\r\n\r\n                    var expectedData = {\r\n                        sender: subject,\r\n                        backLink: { uri: \"epi.cms.contentdata:///7\" }\r\n                    };\r\n                    subject._onCancel();\r\n                    expect(topicSpy).to.be.calledWith(\"/epi/shell/action/changeview\", \"discountpriorityview\", {}, expectedData);\r\n                });\r\n            });\r\n        });\r\n\r\n        describe('#_onSave', function () {\r\n            describe('if a viewModel exist', function () {\r\n                var modelSpy;\r\n                beforeEach(function () {\r\n                    modelSpy = sinon.spy(model, \"save\");\r\n                });\r\n                afterEach(function () {\r\n                    modelSpy.restore();\r\n                });\r\n                describe('with no pending changes', function () {\r\n                    it('should not call save on the viewModel', function () {\r\n                        model.set(\"hasPendingChanges\", false);\r\n                        subject._onSave();\r\n                        expect(model.save).to.not.be.called;\r\n                    });\r\n                });\r\n                describe('with pending changes', function () {\r\n                    it('should call save on the viewModel', function () {\r\n                        model.set(\"hasPendingChanges\", true);\r\n                        subject._onSave();\r\n                        expect(model.save).to.be.called;\r\n                    });\r\n\r\n                    describe('and save viewModel successful', function () {\r\n                        var context = { ctx: {} };\r\n                        beforeEach(function () {\r\n                            sinon.spy(subject, \"contextUpdated\");\r\n                            sinon.spy(subject.toolbar, \"update\");\r\n\r\n                            model.set(\"hasPendingChanges\", true);\r\n                            subject._onSave();\r\n                            topic.publish(\"/epi/shell/context/updated\", context);\r\n                        });\r\n\r\n                        it(\"should be call contextUpdated when context is updated.\", function () {\r\n                            expect(subject.contextUpdated).to.have.been.calledWith(context);\r\n                        });\r\n                        it('should call update on the toolbar', function () {\r\n                            expect(subject.toolbar.update).to.be.called;\r\n                        });\r\n                    });\r\n\r\n                    describe('and save viewModel successful then update all children of the content', function () {\r\n                        var storeSpy, topicSpy;\r\n                        beforeEach(function () {\r\n                            topicSpy = sinon.spy(topic, \"publish\");\r\n                            storeSpy = sinon.spy(store, \"updateDependentStores\");\r\n                            model.set(\"hasPendingChanges\", true);\r\n                            model.contentData.name = \"modified campaign\";\r\n                            subject._onSave();\r\n                        });\r\n                        afterEach(function () {\r\n                            storeSpy.restore();\r\n                            topicSpy.restore();\r\n                        });\r\n                        it('should publish update of the content', function () {\r\n                            expect(topicSpy).to.be.calledOnce;\r\n                        });\r\n                        it(\"should publish update of all children of the content if it is campaign data\", function () {\r\n                            expect(storeSpy).to.be.calledTwice;\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n\r\n        describe('#_isCreatingContent', function () {\r\n            var createContentWidget, viewModel;\r\n            beforeEach(function () {\r\n                // create a CreateContent widget, in order to mimic the Create discount scenario\r\n                dependency.register(\"epi.shell.ContextService\", {});\r\n                dependency.register(\"epi.shell.MessageService\", {});\r\n                dependency.register(\"epi.ModuleManager\", {});\r\n                viewModel = declare([evented], {\r\n                    update: sinon.spy()\r\n                });\r\n\r\n                var toolbar = {};\r\n                toolbar.add = function () { };\r\n                toolbar.setItemProperty = function () { };\r\n                createContentWidget = new CreateContent({\r\n                    modelType: viewModel,\r\n                    modelBindingMap: {},\r\n                    templateString: '<div ><p data-dojo-attach-point=\"contentTypeNameNode\">hello</p></div>',\r\n                    toolbar: toolbar,\r\n                    stackContainer: { domNode: {} }\r\n                });\r\n\r\n                createContentWidget.view = \"MyView\";\r\n            });\r\n\r\n            afterEach(function () {\r\n                dependency.clear();\r\n                createContentWidget.destroy();\r\n                createContentWidget = null;\r\n                viewModel = null;\r\n            });\r\n\r\n            it('should return true if creating a discount', function () {\r\n                var data = {\r\n                    sender: createContentWidget\r\n                };\r\n                subject.updateView(data, {});\r\n                model.set(\"contentData\", { typeIdentifier: ModelSupport.contentTypeIdentifier.promotionData });\r\n                expect(subject._isCreatingContent).to.be.true;\r\n            });\r\n            it('should return false if editing a discount', function () {\r\n                model.set(\"contentData\", { typeIdentifier: ModelSupport.contentTypeIdentifier.promotionData });\r\n                expect(subject._isCreatingContent).to.be.false;\r\n            });\r\n            it('should return false if editing a campaign', function () {\r\n                model.set(\"contentData\", { typeIdentifier: ModelSupport.contentTypeIdentifier.salesCampaign });\r\n                expect(subject._isCreatingContent).to.be.false;\r\n            });\r\n        });\r\n\r\n        describe('#_aroundTopicPublish', function () {\r\n            var subscriberMock,\r\n                confirmStub;\r\n\r\n            beforeEach(function() {\r\n                subscriberMock = sinon.spy();\r\n            });\r\n\r\n            describe('when changes are saved', function () {\r\n                beforeEach(function () {\r\n                    model.set(\"hasPendingChanges\", false);\r\n                });\r\n                it('should allow view change', function () {\r\n                    topic.subscribe(\"/epi/shell/action/changeview\", subscriberMock);\r\n                    topic.publish(\"/epi/shell/action/changeview\");\r\n                    expect(subscriberMock).to.be.called;\r\n                });\r\n                it('should allow context change', function () {\r\n                    topic.subscribe(\"/epi/shell/context/request\", subscriberMock);\r\n                    topic.publish(\"/epi/shell/context/request\");\r\n                    expect(subscriberMock).to.be.called;\r\n                });\r\n            });\r\n\r\n            describe('when changes are not saved', function () {\r\n                beforeEach(function () {\r\n                    model.set(\"hasPendingChanges\", true);\r\n                });\r\n\r\n                describe('and user discards changes', function () {\r\n                    beforeEach(function () {\r\n                        confirmStub = sinon.stub(subject, \"confirmDiscardChanges\", function () {\r\n                            return true;\r\n                        });\r\n                    });\r\n                    describe('and a view change is requested', function() {\r\n                        beforeEach(function () {\r\n                            topic.subscribe(\"/epi/shell/action/changeview\", subscriberMock);\r\n                            topic.publish(\"/epi/shell/action/changeview\");\r\n                        });\r\n                        it('should allow view change', function () {\r\n                            expect(subscriberMock).to.be.called;\r\n                        });\r\n                        it('should clear the hasPendingChanges value', function () {\r\n                            expect(model.get(\"hasPendingChanges\")).to.be.false;\r\n                        });\r\n                    });\r\n                    describe('and a context change is requested', function() {\r\n                        beforeEach(function () {\r\n                            topic.subscribe(\"/epi/shell/context/request\", subscriberMock);\r\n                            topic.publish(\"/epi/shell/context/request\");\r\n                        });\r\n                        it('should allow context change', function () {\r\n                            expect(subscriberMock).to.be.called;\r\n                        });\r\n                        it('should clear the hasPendingChanges value', function () {\r\n                            expect(model.get(\"hasPendingChanges\")).to.be.false;\r\n                        });\r\n                    });\r\n                });\r\n\r\n                describe('and user does not discard changes', function () {\r\n                    beforeEach(function () {\r\n                        confirmStub = sinon.stub(subject, \"confirmDiscardChanges\", function () {\r\n                            return false;\r\n                        });\r\n                    });\r\n                    it('should not allow view change', function () {\r\n                        topic.subscribe(\"/epi/shell/action/changeview\", subscriberMock);\r\n                        topic.publish(\"/epi/shell/action/changeview\");\r\n                        expect(subscriberMock).to.not.be.called;\r\n                    });\r\n                    it('should not allow view change back', function () {\r\n                        topic.subscribe(\"/epi/shell/action/changeview/back\", subscriberMock);\r\n                        topic.publish(\"/epi/shell/action/changeview/back\");\r\n                        expect(subscriberMock).to.not.be.called;\r\n                    });\r\n                    it('should not allow context change', function () {\r\n                        topic.subscribe(\"/epi/shell/context/request\", subscriberMock);\r\n                        topic.publish(\"/epi/shell/context/request\");\r\n                        expect(subscriberMock).to.not.be.called;\r\n                    });\r\n                    it('should allow other topics', function () {\r\n                        topic.subscribe(\"/some/other/topic\", subscriberMock);\r\n                        topic.publish(\"/some/other/topic\");\r\n                        expect(subscriberMock).to.be.called;\r\n                    });\r\n                });\r\n            });\r\n        });\r\n\r\n        describe('#updateView', function () {\r\n            var context;\r\n            beforeEach(function () {\r\n                context = {\r\n                    id: \"11\"\r\n                };\r\n            });\r\n            describe('if there is a viewModel', function () {\r\n                beforeEach(function () {\r\n                    sinon.spy(model.validator, \"clearErrorsBySource\");\r\n                    subject._wrapperAspectHandlers.push({ remove: sinon.stub() });\r\n                    subject._invalidProperties.myProperty = true;\r\n                    subject.updateView({}, context);\r\n                });\r\n                it('should clear client side validation messages', function () {\r\n                    expect(model.validator.clearErrorsBySource).to.be.calledWith(model.validator.validationSource.client);\r\n                });\r\n                it('should clear server side validation messages', function () {\r\n                    expect(model.validator.clearErrorsBySource).to.be.calledWith(model.validator.validationSource.server);\r\n                });\r\n            });\r\n            it('should create a viewModel with the id from the suppliedContext', function () {\r\n                subject.updateView({}, context);\r\n                expect(subject._createViewModel).to.be.calledWith(context.id);\r\n            });\r\n            it('should call refresh on the contentDataStore', function () {\r\n                sinon.spy(model.contentDataStore, \"refresh\");\r\n                subject.updateView({}, context);\r\n                expect(model.contentDataStore.refresh).to.be.calledWith(context.id);\r\n            });\r\n            it('should remove editor mapping handlers', function () {\r\n                expect(subject._wrapperAspectHandlers.length).to.equal(0);\r\n            });\r\n            it('should remove any invalid properties', function () {\r\n                expect(Object.keys(subject._invalidProperties).length).to.equal(0);\r\n            });\r\n            describe('after reloading the viewModel', function () {\r\n                it('should call onReadySetupEditMode', function (done) {\r\n                    sinon.spy(subject, \"onReadySetupEditMode\");\r\n                    subject.updateView({}, context).then(function(){\r\n                        expect(subject.onReadySetupEditMode).to.be.called;\r\n                        done();\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        describe('#_resizeWidget', function () {\r\n            var widget;\r\n            beforeEach(function () {\r\n                widget = new Stateful({});\r\n                sinon.spy(widget, \"set\");\r\n                subject._currentGroup = {};\r\n            });\r\n            describe('when the current group has its own row', function () {\r\n                it('should not do anything', function () {\r\n                    widget.width = 666;\r\n                    subject._currentGroup.hasOwnRow = true;\r\n                    subject._resizeWidget(widget);\r\n                    expect(widget.set).to.not.be.called;\r\n                });\r\n            });\r\n            describe('when the current group does not have its own row', function () {\r\n                describe('and the widget has a width set', function () {\r\n                    describe('that is bigger than 470', function () {\r\n                        it('should set width to 470', function () {\r\n                            widget.set(\"width\", 666);\r\n                            subject._resizeWidget(widget);\r\n                            expect(widget.width).to.equal(470);\r\n                        });\r\n                    });\r\n                    describe('that is smaller than 470', function () {\r\n                        it('should not change the width', function () {\r\n                            var originalSize = 450;\r\n                            widget.set(\"width\", originalSize);\r\n                            subject._resizeWidget(widget);\r\n                            expect(widget.width).to.equal(originalSize);\r\n                        });\r\n                    });\r\n                });\r\n                describe('when the widget has a style set to exactly \"width:582px;\"', function () {\r\n                    it('should set style to \"width:472px;\"', function () {\r\n                        widget.set(\"style\", \"width:582px;\");\r\n                        subject._resizeWidget(widget);\r\n                        expect(widget.style).to.equal(\"width:472px;\");\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        describe('#_resizeNameField', function () {\r\n            var widget;\r\n            beforeEach(function () {\r\n                widget = new Stateful({ domNode: {}});\r\n            });\r\n            describe('when name is icontent_name', function () {\r\n                it('should add class epi-input--full-width', function () {\r\n                    subject._resizeNameField('icontent_name', widget);\r\n                    expect(domClass.contains(widget.domNode, 'epi-input--full-width')).to.be.true;\r\n                });\r\n            });\r\n\r\n            describe('when name is not icontent_name', function () {\r\n                it('should not add class epi-input--full-width', function () {\r\n                    subject._resizeNameField('not_icontent_name', widget);\r\n                    expect(domClass.contains(widget.domNode, 'epi-input--full-width')).to.be.false;\r\n                });\r\n            });\r\n        });\r\n\r\n        describe('#_createDiscountButton', function () {\r\n            var _button;\r\n            beforeEach(function () {\r\n                _button = subject._createDiscountButton();\r\n            });\r\n\r\n            it('The button should have a model', function() {\r\n                expect(_button.model).to.exist;\r\n            });\r\n\r\n            it('The model of the button should have correct content type', function () {\r\n                expect(_button.model.contentType).to.equal(ModelSupport.contentTypeIdentifier.promotionData);\r\n            });\r\n\r\n            it('The button command should have a model', function () {\r\n                expect(_button.model.model).to.exist;\r\n            });\r\n\r\n            it('The model of the button command should have correct property values', function () {\r\n                expect(_button.model.model.hasTranslationAccess).to.not.equal(undefined);\r\n                expect(_button.model.model.isPreferredLanguageAvailable).to.not.equal(undefined);\r\n            });\r\n        });\r\n\r\n        describe('#onSetupEditModeComplete', function () {\r\n            describe('if type is salesCampaign', function () {\r\n                it('should call _createDiscountList', function () {\r\n                    var spy = sinon.spy(subject, \"_createDiscountList\");\r\n                    subject.onSetupEditModeComplete();\r\n                    expect(spy).to.be.called;\r\n                });\r\n            });\r\n            describe('if type is not salesCampaign', function () {\r\n                beforeEach(function () {\r\n                    subject.viewModel.contentData = {\r\n                        typeIdentifier: ModelSupport.contentTypeIdentifier.promotionData\r\n                    };\r\n                });\r\n                it('should not call _createDiscountList', function () {\r\n                    var spy = sinon.spy(subject, \"_createDiscountList\");\r\n                    subject.onSetupEditModeComplete();\r\n                    expect(spy).not.to.be.called;\r\n                });\r\n            });\r\n            it('should call _addEditorWrapperHandlers', function () {\r\n                var spy = sinon.spy(subject, \"_addEditorWrapperHandlers\");\r\n                subject.onSetupEditModeComplete();\r\n                expect(spy).to.be.called;\r\n            });\r\n        });\r\n\r\n        describe('#_onKeyDown', function () {\r\n            var event;\r\n            beforeEach(function () {\r\n                event = {\r\n                    ctrlKey: false,\r\n                    metaKey: false,\r\n                    keyCode: 1,\r\n                    preventDefault: function(){},\r\n                    stopPropagation: function(){}\r\n                };\r\n                sinon.spy(subject, \"_onSave\");\r\n            });\r\n\r\n            describe('when neither ctrl or meta key is pressed', function () {\r\n                it('should not call _onSave', function () {\r\n                    subject._onKeyDown(event);\r\n                    expect(subject._onSave).to.not.be.called;\r\n                });\r\n            });\r\n\r\n            var runSavingTests = function(){\r\n                describe('and the other key pressed is not \"s\"', function () {\r\n                    it('should not call _onSave', function () {\r\n                        subject._onKeyDown(event);\r\n                        expect(subject._onSave).to.not.be.called;\r\n                    });\r\n                });\r\n                describe('and \"s\" is also pressed', function () {\r\n                    it('should call _onSave', function () {\r\n                        event.keyCode = 83;\r\n                        subject._onKeyDown(event);\r\n                        expect(subject._onSave).to.be.called;\r\n                    });\r\n                });\r\n            };\r\n\r\n            describe('when ctrl key is pressed', function () {\r\n                beforeEach(function () {\r\n                    event.ctrlKey = true;\r\n                });\r\n                runSavingTests();\r\n            });\r\n            describe('when metakey is pressed', function () {\r\n                beforeEach(function () {\r\n                    event.metaKey = true;\r\n                });\r\n                runSavingTests();\r\n            });\r\n        });\r\n\r\n        describe('after view model has been set', function () {\r\n            var viewModel;\r\n            beforeEach(function () {\r\n                viewModel = new Stateful({\r\n                    beginOperation: function () { },\r\n                    endOperation: function () { },\r\n                    own: function () { },\r\n                    destroy: function () { }\r\n                });\r\n                sinon.spy(viewModel, \"beginOperation\");\r\n                sinon.spy(viewModel, \"endOperation\");\r\n                subject._removeEditorWrapperHandlers();\r\n                subject.set(\"viewModel\", viewModel);\r\n            });\r\n            describe('and /dnd/start topic is published', function () {\r\n                beforeEach(function () {\r\n                    topic.publish(\"/dnd/start\", {}, []);\r\n                });\r\n                it('should call beginOperation on view model', function () {\r\n                    expect(viewModel.beginOperation).to.be.called;\r\n                });\r\n            });\r\n\r\n            describe('and /dnd/stop topic is published', function () {\r\n                beforeEach(function () {\r\n                    topic.publish(\"/dnd/stop\", {}, []);\r\n                });\r\n                it('should call endOperation on view model', function () {\r\n                    expect(viewModel.endOperation).to.be.called;\r\n                });\r\n            });\r\n            describe('when the viewModel hasPendingChanges changes value', function () {\r\n                beforeEach(function () {\r\n                    sinon.spy(subject.toolbar, \"setItemProperty\");\r\n                });\r\n                describe('to TRUE', function () {\r\n                    beforeEach(function () {\r\n                        viewModel.set(\"hasPendingChanges\", true);\r\n                    });\r\n                    it('should enable the save button', function () {\r\n                        expect(subject.toolbar.setItemProperty).to.be.calledWith(\r\n                            subject.toolbar.buttonNames.saveButton,\r\n                            \"disabled\",\r\n                            false);\r\n                    });\r\n                    it('should make the save button the primary button', function () {\r\n                        expect(subject.toolbar.setItemProperty).to.be.calledWith(\r\n                            subject.toolbar.buttonNames.saveButton,\r\n                            \"class\",\r\n                            \"epi-button--bold epi-primary\");\r\n                    });\r\n                });\r\n                describe('to FALSE', function () {\r\n                    beforeEach(function () {\r\n                        viewModel.set(\"hasPendingChanges\", false);\r\n                    });\r\n                    it('should disable the save button', function () {\r\n                        expect(subject.toolbar.setItemProperty).to.be.calledWith(\r\n                            subject.toolbar.buttonNames.saveButton,\r\n                            \"disabled\",\r\n                            true);\r\n                    });\r\n                    it('should not make the save button the primary button', function () {\r\n                        expect(subject.toolbar.setItemProperty).to.be.calledWith(\r\n                            subject.toolbar.buttonNames.saveButton,\r\n                            \"class\",\r\n                            \"epi-button--bold\");\r\n                    });\r\n                });\r\n                describe('and there is an invalid property', function () {\r\n                    it('should not enable the save button', function () {\r\n                        subject._invalidProperties.invalidProperty = true;\r\n                        viewModel.set(\"hasPendingChanges\", true);\r\n                        expect(subject.toolbar.setItemProperty).to.not.be.called;\r\n                    });\r\n                });\r\n            });\r\n        });\r\n\r\n        describe('#destroy', function () {\r\n            var modelSpy, mappingSpy;\r\n\r\n            beforeEach(function () {\r\n                modelSpy = sinon.spy(subject.viewModel, \"destroy\");\r\n                mappingSpy = sinon.spy(subject._mappingManager, \"clear\");\r\n                subject._wrapperAspectHandlers.push({ remove: sinon.stub() });\r\n                subject._invalidProperties.myProperty = true;\r\n                subject.destroy();\r\n            });\r\n\r\n            afterEach(function () {\r\n                modelSpy.restore();\r\n                mappingSpy.restore();\r\n            });\r\n\r\n            it('should invoke the view model\\'s destroy', function () {\r\n                expect(modelSpy).to.be.calledOnce;\r\n            });\r\n            it('should invoke the mapping manager\\' clear', function () {\r\n                expect(mappingSpy).to.be.calledOnce;\r\n            });\r\n            it('should destroy the view model', function () {\r\n                expect(subject.viewModel).to.be.undefined;\r\n            });\r\n            it('should destroy the mapping manager', function () {\r\n                expect(subject._mappingManager).to.be.undefined;\r\n            });\r\n            it('should remove editor mapping handlers', function () {\r\n                expect(subject._wrapperAspectHandlers.length).to.equal(0);\r\n            });\r\n            it('should remove any invalid properties', function () {\r\n                expect(Object.keys(subject._invalidProperties).length).to.equal(0);\r\n            });\r\n        });\r\n\r\n        describe('#_onWrapperValueChange', function () {\r\n            var oldMappingManager;\r\n            beforeEach(function () {\r\n                subject._invalidProperties = { prop1: true, prop2: true, prop3: true };\r\n                oldMappingManager = subject._mappingManager;\r\n            });\r\n            afterEach(function () {\r\n                subject._mappingManager = oldMappingManager;\r\n            });\r\n            describe('and property being set has an isInvalid marker', function () {\r\n                it('should remove that marker', function () {\r\n                    subject._mappingManager = {\r\n                        findOne: sinon.stub().returns({ propertyName: 'prop2' })\r\n                    };\r\n\r\n                    subject._onWrapperValueChange();\r\n\r\n                    expect(subject._invalidProperties.prop1).to.equal(true);\r\n                    expect(subject._invalidProperties.prop2).to.equal(undefined);\r\n                    expect(subject._invalidProperties.prop3).to.equal(true);\r\n                });\r\n            });\r\n            describe('and property being set does not have an isInvalid marker', function () {\r\n                it('should not remove any marker', function () {\r\n                    subject._mappingManager = {\r\n                        findOne: sinon.stub().returns({ propertyName: 'validProperty' })\r\n                    };\r\n\r\n                    subject._onWrapperValueChange();\r\n\r\n                    expect(subject._invalidProperties.prop1).to.equal(true);\r\n                    expect(subject._invalidProperties.prop2).to.equal(true);\r\n                    expect(subject._invalidProperties.prop3).to.equal(true);\r\n                });\r\n            });\r\n        });\r\n\r\n        describe('#_addEditorWrapperHandlers', function () {\r\n            var oldMappingManager;\r\n            var mappings;\r\n            beforeEach(function () {\r\n                subject._removeEditorWrapperHandlers();\r\n                oldMappingManager = subject._mappingManager;\r\n                mappings = [{ propertyName: 'prop1', wrapper: { _onTryToStopWithInvalidValue: function () { } } },\r\n                            { propertyName: 'prop2', wrapper: { _onTryToStopWithInvalidValue: function () { } } }];\r\n                subject._mappingManager = {\r\n                    find: sinon.stub().returns(mappings)\r\n                };\r\n                sinon.spy(subject.toolbar, \"updateActionButtonStatus\");\r\n                subject._addEditorWrapperHandlers();\r\n            });\r\n            afterEach(function () {\r\n                subject._mappingManager = oldMappingManager;\r\n            });\r\n            describe('when there are multiple mappings', function () {\r\n                it('should add one handler for each mapping', function () {\r\n                    expect(subject._wrapperAspectHandlers.length).to.equal(2);\r\n                });\r\n            });\r\n            describe('when _onTryToStopWithInvalidValue is called on wrapper', function () {\r\n                beforeEach(function () {\r\n                    mappings[1].wrapper._onTryToStopWithInvalidValue();\r\n                });\r\n                it('should add invalid property marker', function () {\r\n                    expect(subject._invalidProperties.prop2).to.equal(true);\r\n                });\r\n                it('should disable save button', function () {\r\n                    expect(subject.toolbar.updateActionButtonStatus).to.be.calledWith(subject.toolbar.buttonNames.saveButton, false);\r\n                });\r\n            });\r\n        });\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\InventoryOverview_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\LinkEdit_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\NewInventory_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\NewPrice_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\PricingOverview_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\RelatedEntriesEdit_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\Settings_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\viewmodel\\CampaignItemListModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\viewmodel\\CatalogContentListViewModel_specs.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/ClipboardManager' is an internal Episerver module and can have a breaking change in any release.",
                "line": 8,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/ClipboardManager\",",
                "endLine": 8,
                "endColumn": 33
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/CreateCommandsMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 9,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/CreateCommandsMixin\",",
                "endLine": 9,
                "endColumn": 41
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/Stateful\",\r\n    // epi\r\n    \"epi/dependency\",\r\n    \"epi/shell/store/Registry\",\r\n    \"epi/shell/ClipboardManager\",\r\n    \"epi-cms/widget/CreateCommandsMixin\",\r\n    \"epi-cms/contentediting/ContentActionSupport\",\r\n    // commerce\r\n    \"epi-ecf-ui/widget/viewmodel/CatalogContentListViewModel\"\r\n], function (declare, Stateful, dependency, Registry, ClipboardManager, CreateCommandsMixin, ContentActionSupport, CatalogContentListViewModel) {\r\n\r\n    describe(\"epi-ecf-ui/widget/viewmodel/CatalogContentListViewModel\", function () {\r\n\r\n        var viewmodel, store, registry;\r\n        var singleObjectModel;\r\n        var contentRepositoryDescriptorsMock;\r\n\r\n        var constructDependencies = function () {\r\n            contentRepositoryDescriptorsMock = {\r\n                product: {\r\n                    containedTypes: [\"episerver.commerce.product\"],\r\n                    creatableTypes: [\"episerver.commerce.product\"],\r\n                    mainNavigationTypes: [],\r\n                    roots: [3]\r\n                },\r\n                get: function (key) { return this[key]; }\r\n\r\n            };\r\n            store = {\r\n                get: function () {\r\n                    return {\r\n                        typeIdentifier: \"episerver.core.contentdata\",\r\n                        availableContentTypes: [1, 2]\r\n                    };\r\n                },\r\n                query: function () {\r\n                    return {\r\n                        observe: function () { }\r\n                    };\r\n                }\r\n            };\r\n        };\r\n\r\n        beforeEach(function () {\r\n            constructDependencies();\r\n            registry = new Registry();\r\n            registry.add(\"epi.commerce.global.clipboard\", new ClipboardManager());\r\n            dependency.register(\"epi.commerce.global\", registry);\r\n            dependency.register(\"epi.cms.contentRepositoryDescriptors\", contentRepositoryDescriptorsMock);\r\n            dependency.register(\"epi.cms.ContentHierarchyService\", {});\r\n\r\n            registry = {\r\n                get: function (storeKey) {\r\n                    if (storeKey === \"epi.commerce.relation\") {\r\n                        return {\r\n                            query: function () {\r\n                                return [\r\n                                    { source: \"1\", sortOrder: 1 },\r\n                                    { source: \"2\", sortOrder: 2 },\r\n                                    { source: \"3\", sortOrder: 3 }\r\n                                ];\r\n                            },\r\n                            get: function () {\r\n                                return {};\r\n                            }\r\n                        };\r\n                    } else {\r\n                        return store;\r\n                    }\r\n                }\r\n            };\r\n            dependency.register(\"epi.storeregistry\", registry);\r\n            viewmodel = new CatalogContentListViewModel({\r\n                res: {\r\n                    detachconfirmation: {},\r\n                    deleteconfirmation: {},\r\n                    sorting: {\r\n                        contextmenu: {}\r\n                    }\r\n                },\r\n                creatableTypes: [\"episerver.commerce.product\"]\r\n            });\r\n\r\n            /*jslint bitwise: true*/\r\n            singleObjectModel = {\r\n                accessMask: ContentActionSupport.accessLevel.FullAccess,\r\n                isDeleted: false,\r\n                isWastebasket: false,\r\n                providerCapabilityMask: ContentActionSupport.providerCapabilities.Create | ContentActionSupport.providerCapabilities.Edit,\r\n                contentTypeID: 1,\r\n                hasTranslationAccess: true,\r\n                isPreferredLanguageAvailable: true,\r\n                contentLink: 27,\r\n                properties: {}\r\n            };\r\n        });\r\n\r\n        afterEach(function () {\r\n            dependency.clear();\r\n            contentRepositoryDescriptorsMock = null;\r\n            viewmodel.destroy();\r\n            viewmodel = null;\r\n            store = null;\r\n            registry = null;\r\n        });\r\n\r\n        describe(\"model setter\", function () {\r\n            describe(\"if model is null\", function () {\r\n                it(\"edit command should not be executable\", function () {\r\n                    viewmodel.set(\"model\", null);\r\n                    expect(viewmodel._commandRegistry.edit.command.canExecute).to.be.equal(false);\r\n                });\r\n                it(\"create product command should not be executable\", function () {\r\n                    viewmodel.set(\"model\", null);\r\n                    expect(viewmodel._commandRegistry[\"episerver.commerce.product\"].command.canExecute).to.be.equal(false);\r\n                });\r\n                it(\"selection should be empty\", function () {\r\n                    viewmodel.set(\"model\", null);\r\n                    expect(viewmodel.selection.get(\"data\")).to.be.empty;\r\n                });\r\n            });\r\n\r\n            describe(\"if model is a single object\", function () {\r\n                it(\"edit command should be executable\", function () {\r\n                    viewmodel.set(\"model\", singleObjectModel);\r\n                    expect(viewmodel._commandRegistry.edit.command.canExecute).to.be.equal(true);\r\n                });\r\n                it(\"edit command's model should be input model\", function () {\r\n                    viewmodel.set(\"model\", singleObjectModel);\r\n                    expect(singleObjectModel, viewmodel._commandRegistry.edit.command.get(\"model\")).to.be.equal;\r\n                });\r\n                it(\"create command should be executable\", function () {\r\n                    viewmodel.set(\"model\", singleObjectModel);\r\n                    expect(viewmodel._commandRegistry[\"episerver.commerce.product\"].command.canExecute).to.be.equal(true);\r\n                });\r\n                it(\"create command's model should be input model\", function () {\r\n                    viewmodel.set(\"model\", singleObjectModel);\r\n                    expect(singleObjectModel, viewmodel._commandRegistry[\"episerver.commerce.product\"].command.get(\"model\")).to.be.equal;\r\n                });\r\n                it(\"selection should be empty\", function () {\r\n                    viewmodel.set(\"model\", singleObjectModel);\r\n                    expect(viewmodel.selection.get(\"data\")).to.be.empty;\r\n                });\r\n            });\r\n\r\n            describe(\"if model is an one-item-array\", function () {\r\n                it(\"edit command should be executable\", function () {\r\n                    viewmodel.set(\"model\", { data: [singleObjectModel] });\r\n                    expect(viewmodel._commandRegistry.edit.command.canExecute).to.be.equal(true);\r\n                });\r\n                it(\"edit command's model should be input model\", function () {\r\n                    viewmodel.set(\"model\", { data: [singleObjectModel] });\r\n                    expect(singleObjectModel, viewmodel._commandRegistry.edit.command.get(\"model\")).to.be.equal;\r\n                });\r\n                it(\"create command should be executable\", function () {\r\n                    viewmodel.set(\"model\", { data: [singleObjectModel] });\r\n                    expect(viewmodel._commandRegistry[\"episerver.commerce.product\"].command.canExecute).to.be.equal(true);\r\n                });\r\n                it(\"create command's model should be input model\", function () {\r\n                    viewmodel.set(\"model\", { data: [singleObjectModel] });\r\n                    expect(singleObjectModel, viewmodel._commandRegistry[\"episerver.commerce.product\"].command.get(\"model\")).to.be.equal;\r\n                });\r\n                it(\"selection should not be empty\", function () {\r\n                    viewmodel.set(\"model\", { data: [singleObjectModel] });\r\n                    expect(viewmodel.selection.get(\"data\")).to.be.not.empty;\r\n                });\r\n            });\r\n\r\n            describe(\"if model is a multiple-item-array\", function () {\r\n                it(\"edit command should not be executable\", function () {\r\n                    viewmodel.set(\"model\", { data: [singleObjectModel, singleObjectModel] });\r\n                    expect(viewmodel._commandRegistry.edit.command.canExecute).to.be.equal(false);\r\n                });\r\n                it(\"create product command should not be executable\", function () {\r\n                    viewmodel.set(\"model\", { data: [singleObjectModel, singleObjectModel] });\r\n                    expect(viewmodel._commandRegistry[\"episerver.commerce.product\"].command.canExecute).to.be.equal(false);\r\n                });\r\n                it(\"selection should not be empty\", function () {\r\n                    viewmodel.set(\"model\", { data: [singleObjectModel, singleObjectModel] });\r\n                    expect(viewmodel.selection.get(\"data\")).to.be.not.empty;\r\n                });\r\n            });\r\n\r\n            describe(\"if model have context id with work id\", function () {\r\n                it(\"set selection data with context id without work id\", function () {\r\n                    viewmodel.set(\"model\", { data: [singleObjectModel], contextId: \"27_1_CatalogContent\" });\r\n                    expect(viewmodel.selection.get(\"data\")[0].contextId).to.be.equal(\"27__CatalogContent\");\r\n                });\r\n            });\r\n\r\n            describe('when setting sort mode', function () {\r\n                beforeEach(function () {\r\n                    viewmodel.creatableTypes = [\"popupCommand\"];\r\n                    viewmodel._setupCommands();\r\n                });\r\n                describe('to true', function () {\r\n                    it('should update command availability', function () {\r\n                        viewmodel.set(\"sortMode\", true);\r\n                        expect(viewmodel._commandRegistry.copy.command.canExecute).to.equal(false);\r\n                        expect(viewmodel._commandRegistry.cut.command.canExecute).to.equal(false);\r\n                        expect(viewmodel._commandRegistry.paste.command.canExecute).to.equal(false);\r\n                        expect(viewmodel._commandRegistry.pasteOnContext.command.canExecute).to.equal(false);\r\n                        expect(viewmodel._commandRegistry.detach.command.canExecute).to.equal(false);\r\n                        expect(viewmodel._commandRegistry.remove.command.canExecute).to.equal(false);\r\n                        expect(viewmodel._commandRegistry.moveup.command.isAvailable).to.equal(true);\r\n                        expect(viewmodel._commandRegistry.movedown.command.isAvailable).to.equal(true);\r\n                    });\r\n                });\r\n                describe('to false', function () {\r\n                    var originalValue = true;\r\n\r\n                    beforeEach(function () {\r\n                        viewmodel._commandRegistry.pasteOnContext.command.set(\"canExecute\", originalValue);\r\n\r\n                        viewmodel.commands.forEach(function (command, index) {\r\n                            command.set(\"canExecute\", originalValue);\r\n                        });\r\n\r\n                        viewmodel.set(\"sortMode\", false);\r\n                    });\r\n\r\n                    it('should use the default availability of the command', function () {\r\n                        expect(viewmodel._commandRegistry.copy.command.canExecute).to.equal(originalValue);\r\n                        expect(viewmodel._commandRegistry.cut.command.canExecute).to.equal(originalValue);\r\n                        expect(viewmodel._commandRegistry.paste.command.canExecute).to.equal(originalValue);\r\n                        expect(viewmodel._commandRegistry.pasteOnContext.command.canExecute).to.equal(originalValue);\r\n                        expect(viewmodel._commandRegistry.detach.command.canExecute).to.equal(originalValue);\r\n                        expect(viewmodel._commandRegistry.remove.command.canExecute).to.equal(originalValue);\r\n                    });\r\n\r\n                    it('sort commands should be disabled', function () {\r\n                        expect(viewmodel._commandRegistry.moveup.command.isAvailable).to.equal(false);\r\n                        expect(viewmodel._commandRegistry.moveup.command.canExecute).to.equal(false);\r\n                        expect(viewmodel._commandRegistry.movedown.command.isAvailable).to.equal(false);\r\n                        expect(viewmodel._commandRegistry.movedown.command.canExecute).to.equal(false);\r\n                    });\r\n                });\r\n\r\n            });\r\n        });\r\n\r\n        describe(\"#moveItem\", function () {\r\n            beforeEach(function () {\r\n                viewmodel.treeStoreModel.relationStore.put = sinon.spy();\r\n                viewmodel.model = {};\r\n            });\r\n            describe(\"when moving before target\", function () {\r\n                it(\"should save relation with same sort order as the drop target\", function () {\r\n                    viewmodel.moveItem({ contentLink: \"1\" }, { contentLink: \"2\" }, true);\r\n                    expect(viewmodel.treeStoreModel.relationStore.put).to.be.calledWith({ source: \"1\", sortOrder: 2 });\r\n                });\r\n            });\r\n            describe(\"when moving after target\", function () {\r\n                it(\"should save relation with sort order one higher than drop target\", function () {\r\n                    viewmodel.moveItem({ contentLink: \"1\" }, { contentLink: \"2\" }, false);\r\n                    expect(viewmodel.treeStoreModel.relationStore.put).to.be.calledWith({ source: \"1\", sortOrder: 3 });\r\n                });\r\n            });\r\n            describe(\"when moving after whole list\", function () {\r\n                it(\"should save relation with sort order one higher than last target\", function () {\r\n                    viewmodel.moveItem({ contentLink: \"1\" }, null, false);\r\n                    expect(viewmodel.treeStoreModel.relationStore.put).to.be.calledWith({ source: \"1\", sortOrder: 4 });\r\n                });\r\n            });\r\n        });\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\viewmodel\\CatalogListViewModel_specs.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/ClipboardManager' is an internal Episerver module and can have a breaking change in any release.",
                "line": 6,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/ClipboardManager\",",
                "endLine": 6,
                "endColumn": 33
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/CreateCommandsMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 10,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/CreateCommandsMixin\",",
                "endLine": 10,
                "endColumn": 41
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/array\",\r\n    \"epi/dependency\",\r\n    \"epi/shell/store/Registry\",\r\n    \"epi/shell/ClipboardManager\",\r\n    \"dojo/Stateful\",\r\n    \"epi-cms/command/PasteContent\",\r\n    \"epi-cms/command/DeleteContent\",\r\n    \"epi-cms/widget/CreateCommandsMixin\",\r\n    \"epi-cms/contentediting/ContentActionSupport\",\r\n    \"epi-cms/component/command/ChangeContext\",\r\n    \"epi-ecf-ui/widget/viewmodel/CatalogListViewModel\"\r\n], function (declare, array, dependency, Registry, ClipboardManager, Stateful, PasteCommand, DeleteCommand, CreateCommandsMixin, ContentActionSupport, ChangeContext, CatalogListViewModel) {\r\n\r\n        describe(\"epi-ecf-ui/widget/viewmodel/CatalogListViewModel\", function () {\r\n           \r\n            var viewmodel, store, registry;\r\n            var objectModel;\r\n            var contentRepositoryDescriptorsMock;\r\n\r\n            var constructDependencies = function () {\r\n                contentRepositoryDescriptorsMock = {\r\n                    product: {\r\n                        containedTypes: [\"episerver.commerce.product\"],\r\n                        creatableTypes: [\"episerver.commerce.product\"],\r\n                        mainNavigationTypes: [],\r\n                        roots: [3]\r\n                    },\r\n                    get: function (key ) { return this[key]; }\r\n                };\r\n                store = {\r\n                    get: function () {\r\n                        return {\r\n                            typeIdentifier: \"episerver.core.contentdata\",\r\n                            availableContentTypes: [1, 2]\r\n                        };\r\n                    },\r\n                    query: function () {\r\n                        return {\r\n                            observe: function () { }\r\n                        };\r\n                    }\r\n                };\r\n            };\r\n            beforeEach(function () {\r\n                constructDependencies();\r\n                registry = new Registry();\r\n                registry.add(\"epi.commerce.global.clipboard\", new ClipboardManager());\r\n                dependency.register(\"epi.commerce.global\", registry);\r\n                dependency.register(\"epi.cms.contentRepositoryDescriptors\", contentRepositoryDescriptorsMock);\r\n                registry = {\r\n                    get: function (storeKey) {\r\n                        if (storeKey === \"epi.commerce.relation\") {\r\n                            return {\r\n                                query: function () {\r\n                                    return {\r\n                                        models: []\r\n                                    };\r\n                                },\r\n                                get: function () {\r\n                                    return {};\r\n                                }\r\n                            };\r\n                        } else {\r\n                            return store;\r\n                        }\r\n                    }\r\n                };\r\n                dependency.register(\"epi.cms.ContentHierarchyService\", {});\r\n                dependency.register(\"epi.storeregistry\", registry);\r\n                dependency.register(\"epi.cms.contentRepositoryDescriptors\", contentRepositoryDescriptorsMock);\r\n                dependency.register(\"epi.shell.MessageService\", function () { });\r\n                viewmodel = new CatalogListViewModel({\r\n                    getCreateCommands: function (index) {\r\n                        return true;\r\n                    },\r\n                    postCreate: new CatalogListViewModel().postCreate\r\n                });\r\n                objectModel = {\r\n                    accessMask: ContentActionSupport.accessLevel.FullAccess,\r\n                    isDeleted: false,\r\n                    isWastebasket: false,\r\n                    providerCapabilityMask: ContentActionSupport.providerCapabilities.Create | ContentActionSupport.providerCapabilities.Edit,\r\n                    contentTypeID: 1,\r\n                    hasTranslationAccess: true,\r\n                    isPreferredLanguageAvailable: true,\r\n                    contentLink: 27\r\n                };\r\n\r\n            });\r\n\r\n            afterEach(function () {\r\n                dependency.clear();\r\n                contentRepositoryDescriptorsMock = null;\r\n                viewmodel.destroy();\r\n                viewmodel = null;\r\n                store = null;\r\n                registry = null;\r\n            });\r\n\r\n            describe(\"post script\", function () {\r\n                it(\"hits getCreateCommands()\", function () {\r\n                    expect(viewmodel.getCreateCommands()).to.be.equal(true);\r\n                    \r\n                });\r\n                it(\"adds edit command first\", function () {\r\n                    expect(viewmodel.commands[0] instanceof (ChangeContext)).to.be.equal(true);\r\n                });\r\n                it(\"should add paste command\", function () {\r\n                    expect(viewmodel.commands[1] instanceof (PasteCommand)).to.be.equal(true);\r\n                });\r\n                it(\"should add delete command\", function () {\r\n                    expect(viewmodel.commands[2] instanceof (DeleteCommand)).to.be.equal(true);\r\n                });\r\n            });\r\n\r\n            describe(\"model setter\", function () {\r\n                describe(\"if model is null\", function () {\r\n                    it(\"edit command should not be executable\", function () {\r\n                        viewmodel.set(\"model\", null);\r\n                        expect(viewmodel.commands[0].canExecute).to.be.equal(false);\r\n                    });\r\n                });\r\n\r\n                describe(\"if model is not null\", function () {\r\n                    it(\"edit command should be executable\", function () {\r\n                        viewmodel.set(\"model\", objectModel);\r\n                        expect(viewmodel.commands[0].canExecute).to.be.equal(true);\r\n                    });\r\n                    it(\"edit command's model should be input model\", function () {\r\n                        viewmodel.set(\"model\", objectModel);\r\n                        expect(objectModel, viewmodel.commands[0].get(\"model\")).to.be.equal;\r\n                    });\r\n                });\r\n\r\n\r\n            });\r\n        });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\viewmodel\\CatalogTreeStoreModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\viewmodel\\DiscountListModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\viewmodel\\DiscountTreeStoreModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\viewmodel\\FacetGroupListViewModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\viewmodel\\FacetGroupViewModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell.Client.Tests\\UnitTests\\widget\\viewmodel\\PricingOverviewModel_specs.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\command\\DetachFromCategory.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/_SelectionCommandMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 13,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/_SelectionCommandMixin\",",
                "endLine": 13,
                "endColumn": 47
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/Deferred\",\r\n    \"dojo/promise/all\",\r\n    \"dojo/topic\",\r\n    \"dojo/when\",\r\n    \r\n// epi-shell\r\n    \"epi/dependency\",\r\n    \"epi/shell/command/_Command\",\r\n    \"epi/shell/command/_SelectionCommandMixin\",\r\n    \"epi/shell/TypeDescriptorManager\",\r\n    \"epi/shell/widget/dialog/Alert\",\r\n\r\n// epi-cms\r\n    \"epi-cms/core/ContentReference\",\r\n\r\n// epi-ecf-ui\r\n    \"../contentediting/ModelSupport\",\r\n\r\n// Resources\r\n    \"epi/i18n!epi/cms/nls/commerce.command.detachfromcategory\"\r\n],\r\n\r\nfunction (\r\n// dojo\r\n    array,\r\n    declare,\r\n    Deferred,\r\n    promiseAll,\r\n    topic,\r\n    when,\r\n\r\n// epi-shell\r\n    dependency,\r\n    _Command,\r\n    _SelectionCommandMixin,\r\n    TypeDescriptorManager,\r\n    Alert,\r\n\r\n// epi-cms\r\n    ContentReference,\r\n\r\n// epi-ecf-ui\r\n    ModelSupport,\r\n\r\n// Resources\r\n    res\r\n) {\r\n\r\n    // module:\r\n    //      epi-cms/command/PasteContent\r\n    // summary:\r\n    //      A command that pastes whats in the clip board onto the current selection.\r\n    // tags:\r\n    //      public\r\n\r\n    return declare([_Command, _SelectionCommandMixin], {\r\n\r\n        // label: [readonly] String\r\n        //      The action text of the command to be used in visual elements.\r\n        label: res.label,\r\n\r\n        // categoryLink: String\r\n        //      Optional. Definies what category the selection should be detached from.\r\n        categoryLink: null,\r\n\r\n        // iconClass: [readonly] String\r\n        //      The icon class of the command to be used in visual elements.\r\n        iconClass: \"epi-iconDetach\",\r\n        \r\n        _store: null,\r\n\r\n        postscript: function () {\r\n            // summary:\r\n            //      init registry and _store\r\n            // tags:\r\n            //      public override\r\n            this.inherited(arguments);\r\n            if (!this._store) {\r\n                var registry = dependency.resolve(\"epi.storeregistry\");\r\n                this._store = registry.get(\"epi.commerce.relation\");\r\n            }\r\n        },\r\n\r\n        _execute: function() {\r\n            // summary:\r\n            //      Executes this command; publishes a change view request to change to the create content view.\r\n            // tags:\r\n            //      protected override\r\n            var categoryLink = this.categoryLink ||\r\n                                when(this.model.getCurrentContext(), function (currentContext) {\r\n                                    return currentContext.id;\r\n                                });\r\n            var nodeContentLink = new ContentReference(categoryLink).createVersionUnspecificReference();\r\n\r\n            var deferreds = array.map(this.selection.data, function(selectionItem) {\r\n                return when(this._store.query(this._getQuery(selectionItem.data.contentLink)), function(relations) {\r\n                    return promiseAll(array.map(relations, function(relation) {\r\n                        var targetContentLink = new ContentReference(relation.target);\r\n                        if (targetContentLink.id === nodeContentLink.id) {\r\n                            return this._store.remove(relation.id).then(function(){\r\n                                topic.publish(\"relationChanged\", relation);\r\n                            });\r\n                        }\r\n                    }, this));\r\n                }.bind(this));\r\n            }, this);\r\n\r\n            promiseAll(deferreds);\r\n        },\r\n\r\n        _onModelChange: function() {\r\n            // summary:\r\n            //\t\tUpdates canExecute after the model has been updated.\r\n            // tags:\r\n            //\t\tprotected override\r\n\r\n            var deferreds = [];\r\n            var anythingSelected = this.selection.data.length > 0;\r\n            array.forEach(this.selection.data, function(selectionItem) {\r\n                var deferred = new Deferred();\r\n                deferreds.push(deferred.promise);\r\n                if (selectionItem.type !== \"epi.cms.contentdata\") {\r\n                    deferred.resolve(false);\r\n                    return;\r\n                }\r\n\r\n                if (!this.isUsedByCollectionEditor) {\r\n                    if (!selectionItem.data.properties.isRelatedToCurrentCategory) {\r\n                        deferred.resolve(false);\r\n                    }\r\n                    else {\r\n                        when(this.model.getCurrentContext(), function(currentContext) {\r\n                            deferred.resolve(!ContentReference.compareIgnoreVersion(selectionItem.data.parentLink, currentContext.id));\r\n                        });\r\n                    }\r\n                    return;\r\n                }\r\n                \r\n                if (!this.categoryLink) {\r\n                    deferred.resolve(false);\r\n                    return;\r\n                }\r\n                \r\n                deferred.resolve(!ContentReference.compareIgnoreVersion(selectionItem.data.parentLink, this.categoryLink));\r\n            }, this);\r\n            promiseAll(deferreds).then(function (results) {\r\n                var anyFailingSelections = array.some(results, function(result) {\r\n                    return !result;\r\n                });\r\n                this.set(\"canExecute\", anythingSelected && !anyFailingSelections);\r\n            }.bind(this));\r\n        },\r\n\r\n        _typeIsAssignableFrom: function (/*string*/ type, /*string*/ baseTypeToSupport) {\r\n            return TypeDescriptorManager.isBaseTypeIdentifier(type, baseTypeToSupport);\r\n        },\r\n\r\n        _getQuery: function(contentLink) {\r\n            return { referenceId: contentLink, relationTypes: [ModelSupport.relationType.node] };\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\command\\MarketingToolbarCommandProvider.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/component/command/_GlobalToolbarCommandProvider' is an internal Episerver module and can have a breaking change in any release.",
                "line": 7,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/component/command/_GlobalToolbarCommandProvider\",",
                "endLine": 7,
                "endColumn": 62
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/command/CreateContentFromSelector' is an internal Episerver module and can have a breaking change in any release.",
                "line": 8,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/command/CreateContentFromSelector\",",
                "endLine": 8,
                "endColumn": 55
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    \"dojo/_base/declare\",\r\n    \"dojo/topic\",\r\n    \"dijit/Destroyable\",\r\n    \"dijit/form/ToggleButton\",\r\n    \"epi/shell/command/ToggleCommand\",\r\n    \"epi-cms/component/command/_GlobalToolbarCommandProvider\",\r\n    \"epi-cms/widget/command/CreateContentFromSelector\",\r\n    \"../MarketingUtils\",\r\n    // Resources\r\n    \"epi/i18n!epi/cms/nls/episerver.cms.contentediting\"\r\n], function(\r\n    declare,\r\n    topic,\r\n    Destroyable,\r\n    ToggleButton,\r\n    ToggleCommand,\r\n    _GlobalToolbarCommandProvider,\r\n    CreateContentFromSelector,\r\n    MarketingUtils,\r\n    // Resources\r\n    resources\r\n) {\r\n\r\n    //Copied from episerver-ui\r\n    //http://stash01:7990/projects/SH/repos/episerver-ui/browse/EPiServer.Cms.Shell.UI/UI/ClientResources/epi-cms/component/command/GlobalToolbarCommandProvider.js?at=e10aef906d6fea33cc3cd328614c0a08c6f65fdd#81\r\n    var _ToggleAssetsPaneCommand = declare([ToggleCommand, Destroyable], {\r\n        iconClass: \"epi-iconFolder\",\r\n        tooltip: resources.toolbar.buttons.toggleassetspane,\r\n        label: resources.toolbar.buttons.toggleassetspane,\r\n        canExecute: true,\r\n        constructor: function () {\r\n            this.own(\r\n                topic.subscribe(\"/epi/layout/pinnable/tools/visibilitychanged\", function (visible) {\r\n                    this.set(\"active\", visible);\r\n                }.bind(this))\r\n            );\r\n        },\r\n        _execute: function () {\r\n            topic.publish(\"/epi/layout/pinnable/tools/toggle\");\r\n        }\r\n    });\r\n\r\n    return declare([_GlobalToolbarCommandProvider], {\r\n\r\n        contentRepositoryDescriptors: null,\r\n        viewName: null,\r\n\r\n        postscript: function () {\r\n            this.inherited(arguments);\r\n\r\n            this.addToTrailing(new _ToggleAssetsPaneCommand(), {\r\n                widget: ToggleButton,\r\n                \"class\": \"epi-trailingToggleButton epi-mediumButton\"\r\n            });\r\n\r\n            this.newCampaignCommand = new CreateContentFromSelector({\r\n                creatingTypeIdentifier: MarketingUtils.contentTypeIdentifier.salesCampaign\r\n            });\r\n            this.newPromotionCommand = new CreateContentFromSelector({\r\n                creatingTypeIdentifier: MarketingUtils.contentTypeIdentifier.promotionData\r\n            });\r\n            //If you want to add new types to create here: consider making it more generic and use repository descriptors as GlobalToolbarCommandProvider does in cms.\r\n            this.addCommand(this.newCampaignCommand, { category: \"create\" });\r\n            this.addCommand(this.newPromotionCommand, { category: \"create\" });\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\command\\NavigateToEditPage.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\command\\PasteCatalogContent.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\command\\ShowCatalogThumbnails.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\CommerceUIModule.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/ClipboardManager' is an internal Episerver module and can have a breaking change in any release.",
                "line": 9,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/ClipboardManager\",",
                "endLine": 9,
                "endColumn": 33
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/store/CustomQueryEngine' is an internal Episerver module and can have a breaking change in any release.",
                "line": 10,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/store/CustomQueryEngine\",",
                "endLine": 10,
                "endColumn": 38
            },
            {
                "ruleId": "episerver-cms/no-deprecated-episerver-apis",
                "severity": 1,
                "message": "'epi-cms/store/CustomQueryEngine' is a deprecated Episerver module and will be removed in a future major version.",
                "line": 10,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/store/CustomQueryEngine\",",
                "endLine": 10,
                "endColumn": 38
            }
        ],
        "errorCount": 2,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n// epi\r\n    \"epi/_Module\",\r\n    \"epi/routes\",\r\n    \"epi/dependency\",\r\n    \"epi/shell/store/Registry\",\r\n    \"epi/shell/ClipboardManager\",\r\n    \"epi-cms/store/CustomQueryEngine\",\r\n\r\n    \"epi-ecf-ui/FacetFiltersService\",\r\n    \"./command/MarketingToolbarCommandProvider\",\r\n    \"epi-ecf-ui/plugin-area/_CommerceEditViewFilter\"\r\n], function (\r\n// dojo\r\n    declare,\r\n// epi\r\n    _Module,\r\n    routes,\r\n    dependency,\r\n    Registry,\r\n    ClipboardManager,\r\n    CustomQueryEngine,\r\n\r\n    FacetFiltersService,\r\n    MarketingToolbarCommandProvider,\r\n    _CommerceEditViewFilter\r\n) {\r\n\r\n    return declare([_Module], {\r\n        // summary: this is the initializer of CommerceUIModule.\r\n\r\n        //  _settings: [protected override] Object\r\n        //      Settings object\r\n        _settings: null,\r\n\r\n        // _hashWrapper: Object\r\n        //    HashWrapper instance, which will be used to manipulate hash.\r\n        _hashWrapper: null,\r\n\r\n        constructor: function (settings) {\r\n            this._settings = settings;\r\n        },\r\n\r\n        initialize: function () {\r\n            // summary:\r\n            //\t\tInitialize module\r\n            //\r\n            // description:\r\n            //\r\n\r\n            this.inherited(arguments);\r\n\r\n            // Initialize stores\r\n            this._initializeStores();\r\n\r\n            this._initializeCommands();\r\n\r\n            // Initialize global/singleton instance\r\n            this._initializeGlobalInstances();\r\n\r\n            this._hashWrapper = dependency.resolve(\"epi.shell.HashWrapper\");\r\n\r\n            // Call onContextChange for epi.commerce.campaignitem routes.\r\n            var contextService = this.resolveDependency(\"epi.shell.ContextService\");\r\n            contextService.registerRoute(\"epi.commerce.campaign\", this._redirectCampaignContext.bind(this));\r\n        },\r\n\r\n        _initializeStores: function () {\r\n            var registry = this.resolveDependency(\"epi.storeregistry\");\r\n            registry.create(\"epi.commerce.market\", this._getRestPath(\"market\"), {});\r\n            registry.create(\"epi.commerce.price\", this._getRestPath(\"price\"), {queryEngine: CustomQueryEngine});\r\n            registry.create(\"epi.commerce.inventory\", this._getRestPath(\"inventory\"), {});\r\n            registry.create(\"epi.commerce.relation\", this._getRestPath(\"relation\"), { queryEngine: CustomQueryEngine });\r\n            registry.create(\"epi.commerce.association\", this._getRestPath(\"association\"), { queryEngine: CustomQueryEngine });\r\n            registry.create(\"epi.commerce.customergroup\", this._getRestPath(\"customergroup\"), {});\r\n            registry.create(\"epi.commerce.associationgroupdefinition\", this._getRestPath(\"associationgroupdefinition\"), {});\r\n            registry.create(\"epi.commerce.relationgroupdefinition\", this._getRestPath(\"relationgroupdefinition\"), {});\r\n            registry.create(\"epi.commerce.metadictionary\", this._getRestPath(\"metadictionary\"), {});\r\n            registry.create(\"epi.commerce.metadictionaryitem\", this._getRestPath(\"metadictionaryitem\"), {});\r\n            registry.create(\"epi.commerce.campaignitem\", this._getRestPath(\"campaignitem\"), {});\r\n            registry.create(\"epi.commerce.promotions\", this._getRestPath(\"promotions\"), {});\r\n            registry.create(\"epi.commerce.facet\", this._getRestPath(\"facet\"), {});\r\n            registry.create(\"epi.commerce.marketingstatistics\", this._getRestPath(\"marketingstatistics\"), {});\r\n        },\r\n\r\n        _getRestPath: function (name) {\r\n            return routes.getRestPath({ moduleArea: \"EPiServer.Commerce.Shell\", storeName: name });\r\n        },\r\n\r\n        _initializeCommands: function(){\r\n            var commandregistry = dependency.resolve(\"epi.globalcommandregistry\");\r\n            commandregistry.registerProvider(\"epi.commerce.marketingToolbar\", new MarketingToolbarCommandProvider());\r\n        },\r\n\r\n        _initializeGlobalInstances: function () {\r\n            var registry = new Registry();\r\n            registry.add(\"epi.commerce.global.clipboard\", new ClipboardManager());\r\n            dependency.register(\"epi.commerce.global\", registry);\r\n\r\n            this.registerDependency(\"epi.commerce.FacetFiltersService\", new FacetFiltersService({ hashKey: \"campaignFacet\" }));\r\n        },\r\n\r\n        _redirectCampaignContext: function (context, callerData) {\r\n            // summary:\r\n            //      Process redirect action for content data context.\r\n            //\r\n            // context: Object\r\n            //      Context from context service\r\n            //\r\n            // callerData: Object\r\n            //      Sources that fire the event\r\n            //\r\n            // tags:\r\n            //      Private\r\n\r\n            this._hashWrapper.onContextChange(context, callerData);\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\component\\_OverviewBase.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\component\\Campaigns.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/asset/HierarchicalList' is an internal Episerver module and can have a breaking change in any release.",
                "line": 5,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/asset/HierarchicalList\",",
                "endLine": 5,
                "endColumn": 37
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n// epi cms\r\n    \"epi-cms/asset/HierarchicalList\",\r\n// Resources\r\n    \"epi/i18n!epi/cms/nls/commerce.components.marketing\"\r\n],\r\n\r\nfunction (\r\n// dojo\r\n    declare,\r\n// epi cms\r\n    HierarchicalList,\r\n// Resources\r\n    res) {\r\n    // module:\r\n    //      epi-ecf-ui.component.Campaigns\r\n\r\n    return declare([HierarchicalList], {\r\n        // summary:\r\n        //      Campaigns component.\r\n        // tags:\r\n        //      public\r\n\r\n        noDataMessages: res.nodatamessages,\r\n\r\n        postscript: function () {\r\n            // summary: Overridden to remove all commands.\r\n            //\r\n            // tag:\r\n            //      public override\r\n\r\n            this.inherited(arguments);\r\n            this.model.set(\"commands\", []);\r\n        },\r\n\r\n        setupContextMenu: function () {\r\n            // summary: Set up the context menu. Overridden to not add context menu on the campaign tree gadget.\r\n            //\r\n            // tag:\r\n            //      public override\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\component\\CatalogNavigationTree.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/component/ContentNavigationTree' is an internal Episerver module and can have a breaking change in any release.",
                "line": 7,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/component/ContentNavigationTree\",",
                "endLine": 7,
                "endColumn": 46
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/Deferred\",\r\n    \"dojo/when\",\r\n// epi\r\n    \"epi-cms/component/ContentNavigationTree\",\r\n// commerce\r\n    \"../widget/viewmodel/CatalogTreeStoreModel\",\r\n    \"./ContentContextMenuCommandProvider\",\r\n    \"./commerceDndSource\"\r\n],\r\n\r\nfunction (\r\n// dojo\r\n    declare,\r\n    Deferred,\r\n    when,\r\n// epi\r\n    ContentNavigationTree,\r\n// commerce\r\n    CatalogTreeStoreModel,\r\n    ContextMenuCommandProvider,\r\n    commerceDndSource\r\n ) {\r\n\r\n    // module:\r\n    //      epi-ecf-ui.component.CatalogNavigationTree\r\n\r\n    return declare([ContentNavigationTree], {\r\n        // summary:\r\n        //      Catalog tree component, which support market filtering.\r\n        // tags:\r\n        //      public\r\n\r\n        dndSource: commerceDndSource,\r\n\r\n        contextMenuCommandProvider: ContextMenuCommandProvider,\r\n\r\n        _createTreeModel: function () {\r\n            // summary:\r\n            //      Create content tree model\r\n            // tags:\r\n            //      protected override\r\n\r\n            return new CatalogTreeStoreModel({\r\n                roots: this.roots,\r\n                typeIdentifiers: this.typeIdentifiers,\r\n                containedTypes: this.settings.containedTypes\r\n            });\r\n        },\r\n\r\n        // Remark: Because cms-ui starts to use confirm on pasteItems and not just pasteItem\r\n        _wrapModel: function (model) {\r\n            return model;\r\n        },\r\n\r\n        _updateGlobalToolbarButtons: function (targetNode) {\r\n\r\n            if (targetNode){\r\n                var parent = targetNode.getParent();\r\n\r\n                targetNode.item.contextId = parent.dndData.contentLink;\r\n            }\r\n\r\n            this.inherited(arguments);\r\n        },\r\n\r\n        selectContent: function (contentReferenceAsString, setFocus, needParentRefresh, onComplete) {\r\n            // summary:\r\n            //      Select a given content.\r\n            // tags:\r\n            //      public override\r\n\r\n            var args = arguments,\r\n                inherited = this.getInherited(args),\r\n                deferred = new Deferred();\r\n\r\n            return when(this.model.store.get(contentReferenceAsString), function (content) {\r\n                if (content && !content.properties.isLinkedToCurrentCategory) {\r\n                    return inherited.apply(this, args);\r\n                }\r\n\r\n                return deferred.promise;\r\n            }.bind(this));\r\n        }\r\n    });\r\n\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\component\\Catalogs.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/asset/HierarchicalList' is an internal Episerver module and can have a breaking change in any release.",
                "line": 12,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/asset/HierarchicalList\",",
                "endLine": 12,
                "endColumn": 37
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/on\",\r\n    \"dojo/topic\",\r\n    \"dojo/dom-class\",\r\n    \"dojo/string\",\r\n// epi shell\r\n    \"epi/shell/dgrid/util/misc\",\r\n// epi cms\r\n    \"epi-cms/asset/HierarchicalList\",\r\n    \"epi-cms/core/ContentReference\",\r\n    \"epi-cms/dgrid/formatters\",\r\n// commerce\r\n    \"./viewmodel/CatalogsViewModel\",\r\n// Resources\r\n    \"epi/i18n!epi/cms/nls/commerce.components.catalogs\"\r\n],\r\n\r\nfunction (\r\n// dojo\r\n    declare,\r\n    lang,\r\n    on,\r\n    topic,\r\n    domClass,\r\n    dojoString,\r\n// epi shell\r\n    misc,\r\n// epi cms\r\n    HierarchicalList,\r\n    ContentReference,\r\n    formatters,\r\n// commerce\r\n    CatalogsViewModel,\r\n// Resources\r\n    res\r\n) {\r\n    // module:\r\n    //      epi-ecf-ui.component.Catalogs\r\n\r\n    return declare([HierarchicalList], {\r\n        // summary:\r\n        //      Catalogs component.\r\n        // tags:\r\n        //      public\r\n\r\n        noThumbnailClass: \"epi-dgrid--no-thumbnail\",\r\n\r\n        catalogListClass: \"epi-thumbnailContentList epi-thumbnailContentList--with-icon\",\r\n\r\n        showThumbnail: true,\r\n\r\n        res: res,\r\n\r\n        noDataMessages: res.nodatamessages,\r\n\r\n        // To enable context change when search catalog entries\r\n        triggerContextChange: true,\r\n\r\n        // refreshOnEdit: [public] bool\r\n        //      Force the browser to navigate to edit content page instead of only changing context.\r\n        navigateOnEdit: false,\r\n\r\n        modelClassName: CatalogsViewModel,\r\n\r\n        postMixInProperties: function () {\r\n            this.inherited(arguments);\r\n            lang.mixin(this.modelBindingMap, { showCatalogThumbnails: [\"showCatalogThumbnails\"] });\r\n\r\n            this.model.set(\"navigateOnEdit\", this.navigateOnEdit);\r\n        },\r\n\r\n        _setShowCatalogThumbnailsAttr: function (value) {\r\n            // summary:\r\n            //      Set show catalog thumbnails attribute.\r\n            // tags:\r\n            //      protected\r\n\r\n            var gridNode = this.list.grid.domNode;\r\n            var searchListNode = this.searchResultList.grid.domNode;\r\n\r\n            domClass.toggle(gridNode, this.catalogListClass);\r\n            domClass.toggle(searchListNode, this.catalogListClass);\r\n\r\n            if (!this.model.showCatalogThumbnails) {\r\n                domClass.add(gridNode, this.noThumbnailClass);\r\n                domClass.add(searchListNode, this.noThumbnailClass);\r\n            } else {\r\n                domClass.remove(gridNode, this.noThumbnailClass);\r\n                domClass.remove(searchListNode, this.noThumbnailClass);\r\n            }\r\n        },\r\n\r\n        getThumbnailSelector: function (item) {\r\n            // summary:\r\n            //      Get thumbnail url from content item.\r\n            // tags:\r\n            //      public\r\n\r\n            if (item && item.properties) {\r\n                return item.properties.thumbnail;\r\n            }\r\n            return '';\r\n        },\r\n\r\n        getTitleSelector: function (item) {\r\n            // summary:\r\n            //      Get title information from content item.\r\n            // tags:\r\n            //      public\r\n\r\n            if (item) {\r\n                var reference = new ContentReference(item.contentLink);\r\n                if (reference) {\r\n                        return item.properties.customToolTip;\r\n                    }\r\n            }\r\n            return '';\r\n        },\r\n\r\n        _setFormatterForList: function (list) {\r\n            // summary:\r\n            //      Reset formatter for catalog hierarchical list.\r\n            // tags:\r\n            //      protected\r\n\r\n            if (list) {\r\n                var grid = list.grid;\r\n                // Reset formatter for catalog list to display both thumbnail and icon type identifier\r\n                grid.formatters = [this.catalogItemFormatter.bind(this)];\r\n                grid.configStructure();\r\n            }\r\n        },\r\n\r\n        catalogItemFormatter: function (value, object, node, options) {\r\n            // summary:\r\n            //      Formatter for catalog list to display both thumbnail and icon type identifier.\r\n            // tags:\r\n            //      public\r\n\r\n            var text = misc.htmlEncode(object.name);\r\n            var title = misc.attributeEncode(this.getTitleSelector(object) || text);\r\n            var returnValue = dojoString.substitute(\"${thumbnail} ${icon} ${text}\", {\r\n                thumbnail: formatters.thumbnail(this.getThumbnailSelector(object)),\r\n                icon: formatters.contentIcon(object.typeIdentifier),\r\n                text: misc.ellipsis(text, title)\r\n            });\r\n\r\n            node.innerHTML = returnValue;\r\n            return returnValue;\r\n        },\r\n\r\n        startup: function () {\r\n            // summary:\r\n            //      Adds the breadcrumb widget to the top of the list widget.\r\n            // tags:\r\n            //      protected\r\n            this.inherited(arguments);\r\n\r\n            this.own(topic.subscribe(\"relationChanged\", function () {\r\n                this.list._updateQuery(this.list.query);\r\n            }.bind(this)));\r\n            // disable DnD action on this gadget\r\n            this.tree.dndController.readOnly = true;\r\n\r\n            this._setFormatterForList(this.list);\r\n            this._setFormatterForList(this.searchResultList);\r\n\r\n            this.searchBox.triggerContextChange = false;\r\n        },\r\n\r\n        setupContextMenu: function () {\r\n            // summary: set up the context menu. Overrriden to not add context menu on the catalog tree gadget\r\n            //\r\n            // tag:\r\n            //      public override\r\n\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\component\\commerceDndSource.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/dnd/tree/dndSource' is an internal Episerver module and can have a breaking change in any release.",
                "line": 5,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/dnd/tree/dndSource\"",
                "endLine": 5,
                "endColumn": 35
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    \"dojo/_base/declare\", // declare\r\n    \"dojo/_base/lang\",\r\n\r\n    \"epi/shell/dnd/tree/dndSource\"\r\n], function (declare, lang, dndSource) {\r\n\r\n    return declare([dndSource], {\r\n        // summary:\r\n        //      dnd source to supply catalog tree with the required dnd data\r\n        // tags:\r\n        //      internal\r\n\r\n        getItem: function (/*String*/key) {\r\n            var item = this.inherited(arguments);\r\n            //add info about where the item was dragged from\r\n            item.data.dndData.contextId = item.options.oldParentItem.contentLink;\r\n            return item;\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\component\\CommerceMediaItemModel.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/editors/model/CollectionEditorItemModel' is an internal Episerver module and can have a breaking change in any release.",
                "line": 12,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/editors/model/CollectionEditorItemModel\",",
                "endLine": 12,
                "endColumn": 69
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// Dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/Deferred\",\r\n    \"dojo/when\",\r\n\r\n// EPi Framework\r\n    \"epi/dependency\",\r\n\r\n// EPi CMS\r\n    \"epi-cms/contentediting/editors/model/CollectionEditorItemModel\",\r\n    \"epi-cms/core/PermanentLinkHelper\",\r\n// Resources\r\n    \"epi/i18n!epi/cms/nls/commerce.contentediting.editors.commercemediacollectioneditor\"\r\n], function (\r\n\r\n// Dojo\r\n    array,\r\n    declare,\r\n    Deferred,\r\n    when,\r\n\r\n// EPi Framework\r\n    dependency,\r\n\r\n// EPi CMS\r\n    CollectionEditorItemModel,\r\n    PermanentLinkHelper,\r\n// Resources\r\n    resources\r\n) {\r\n\r\n    return declare([CollectionEditorItemModel], {\r\n        // summary:\r\n        //      The commerce media item model.\r\n        // module:\r\n        //      \"epi-ecf-ui/component/commercemediaitemmodel\"\r\n        // description:\r\n        //      That supports: edit, delete, create commerce media link\r\n        // tags:\r\n        // public\r\n\r\n        fromItemData: function (itemData) {\r\n            // summary:\r\n            //      Create item model object from raw item data.\r\n            // itemData: Object\r\n            //      The raw item data.\r\n            // tags:\r\n            //      public\r\n\r\n            var df = new Deferred();\r\n\r\n            // Store arguments so we can reuse them in another closure.\r\n            var args = arguments;\r\n\r\n            itemData.assetKey = itemData.assetKey || itemData.permanentUrl || \"\";\r\n\r\n            when(PermanentLinkHelper.getContent(itemData.assetKey)).then(function (content) {\r\n\r\n                if (content) {\r\n                    itemData.thumbnailUrl = content.thumbnailUrl;\r\n                    itemData.assetName = content.name;\r\n                    itemData.text = content.name;\r\n                    itemData.assetKey = content.permanentLink;\r\n                    itemData.assetType = itemData.assetType || content.typeIdentifier;\r\n                } else {\r\n                    itemData.thumbnailUrl = itemData.assetKey;\r\n                    itemData.assetName = resources.medianotfound;\r\n                }\r\n\r\n                //set default value for groupname and sortorder\r\n                itemData.groupName = itemData.groupName || \"default\";\r\n                itemData.sortOrder = itemData.sortOrder || 0;\r\n\r\n                // After manipulating itemData we call fromItemData on base class to set the item data property names.\r\n                this.inherited(args);\r\n\r\n                df.resolve(this);\r\n            }.bind(this));\r\n\r\n            return df;\r\n        }\r\n\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\component\\ContentContextMenuCommandProvider.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/selection' is an internal Episerver module and can have a breaking change in any release.",
                "line": 11,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/selection\",",
                "endLine": 11,
                "endColumn": 26
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/withConfirmation' is an internal Episerver module and can have a breaking change in any release.",
                "line": 12,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/withConfirmation\",",
                "endLine": 12,
                "endColumn": 41
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/component/ContentContextMenuCommandProvider' is an internal Episerver module and can have a breaking change in any release.",
                "line": 14,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/component/ContentContextMenuCommandProvider\",",
                "endLine": 14,
                "endColumn": 58
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/command/TranslateContent' is an internal Episerver module and can have a breaking change in any release.",
                "line": 21,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/command/TranslateContent\",",
                "endLine": 21,
                "endColumn": 39
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/content-approval/command/EditApprovalDefinition' is an internal Episerver module and can have a breaking change in any release.",
                "line": 22,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/content-approval/command/EditApprovalDefinition\",",
                "endLine": 22,
                "endColumn": 62
            }
        ],
        "errorCount": 5,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/string\",\r\n// dojox\r\n    \"dojox/html/entities\",\r\n// epi shell\r\n    \"epi/dependency\",\r\n    \"epi/shell/selection\",\r\n    \"epi/shell/command/withConfirmation\",\r\n// epi cms\r\n    \"epi-cms/component/ContentContextMenuCommandProvider\",\r\n    \"epi-cms/component/command/ChangeContext\",\r\n    \"epi-cms/command/NewContent\",\r\n    \"epi-cms/command/DeleteContent\",\r\n    \"epi-cms/command/CutContent\",\r\n    \"epi-cms/command/CopyContent\",\r\n    \"epi-cms/command/PasteContent\",\r\n    \"epi-cms/command/TranslateContent\",\r\n    \"epi-cms/content-approval/command/EditApprovalDefinition\",\r\n//  commerce\r\n    \"./DeleteCatalogContentHandler\",\r\n    \"../contentediting/ModelSupport\",\r\n// Resources\r\n    \"epi/i18n!epi/cms/nls/commerce.components.catalogs.commands\",\r\n    \"epi/i18n!epi/nls/episerver.shared\"\r\n],\r\n\r\nfunction (\r\n// dojo\r\n    array,\r\n    lang,\r\n    declare,\r\n    dojoString,\r\n// dojox\r\n    htmlEntities,\r\n // epi shell\r\n    dependency,\r\n    Selection,\r\n    withConfirmation,\r\n// epi cms\r\n    ContentContextMenuCommandProvider,\r\n    ChangeContextCommand,\r\n    NewCatalogCommand,\r\n    DeleteCommand,\r\n    CutCommand,\r\n    CopyCommand,\r\n    PasteCommand,\r\n    TranslateCommand,\r\n    EditApprovalDefinition,\r\n// commerce\r\n    DeleteCatalogContentHandler,\r\n    ModelSupport,\r\n// Resources\r\n    res,\r\n    sharedResources\r\n) {\r\n    // module:\r\n    //      epi-ecf-ui.component.ContentContextMenuCommandProvider\r\n\r\n    return declare([ContentContextMenuCommandProvider], {\r\n        // summary:\r\n        //      Command provider for Commerce content context menu.\r\n        // tags:\r\n        //      public\r\n\r\n        _formEditViewName: \"formedit\",\r\n\r\n        postscript: function () {\r\n            // make sure clipboard is shared across widgets\r\n            arguments[0].clipboardManager = this.clipboardManager = dependency.resolve(\"epi.commerce.global\").get(\"epi.commerce.global.clipboard\");\r\n\r\n            this.inherited(arguments);\r\n\r\n            var commands = this.get(\"commands\");\r\n\r\n            // create a separated command for creating new Catalog, to show only one menu item as \"New Catalog\", \r\n            // instead of having a popup menu item as New, and one child menu item \"Catalog\" only.\r\n            var createCommand = lang.mixin(this._createCommand(ModelSupport.contentTypeIdentifier.catalogContent), {\r\n                isAvailable: this.isAvailableFlags\r\n            });\r\n            // customize the label\r\n            createCommand.label = dojoString.substitute(res.addcontent, { name: createCommand.label || \"\" });\r\n            commands.push(createCommand);\r\n\r\n            var changeContext = new ChangeContextCommand({\r\n                category: \"context\",\r\n                forceContextChange: true,\r\n                viewName: this._formEditViewName\r\n            });\r\n            commands.splice(0, 0, changeContext); //add edit first\r\n            this.set(\"commands\", commands);\r\n        },\r\n\r\n        updateCommandModel: function (model) {\r\n            // summary:\r\n            //      Updates model for commands. Overwrite this function to display/hide command based on content types.\r\n            // tags:\r\n            //      protected\r\n\r\n            this.inherited(arguments);\r\n\r\n            array.some(this.get(\"commands\"), function (command) {\r\n                if (command.isInstanceOf(ChangeContextCommand)) {\r\n                    command.set(\"model\", model);\r\n                }\r\n                if (command.selection) {\r\n                    command.selection.set(\"data\", model ? [{ type: \"epi.cms.contentdata\", data: model }] : []);\r\n                }\r\n\r\n                // Hide translate command from every types, as well as when model is null\r\n                if (!model || command.isInstanceOf(TranslateCommand)) {\r\n                    command.set(\"isAvailable\", false);\r\n                    return;\r\n                }\r\n\r\n                // Update delete command, to show a confirmation dialog.\r\n                if (command.isInstanceOf(DeleteCommand)) {\r\n                    this._updateDeleteCommand(command, model);\r\n                }\r\n\r\n                var isEditCommand = command.isInstanceOf(ChangeContextCommand) && command.viewName === this._formEditViewName;\r\n\r\n                switch (model.typeIdentifier) {\r\n                    case ModelSupport.contentTypeIdentifier.rootContent:\r\n                        // hide every command but Add catalog command from Root content\r\n                        command.set(\"isAvailable\", command.isInstanceOf(NewCatalogCommand) || command.isInstanceOf(EditApprovalDefinition));\r\n                        break;\r\n                    case ModelSupport.contentTypeIdentifier.catalogContent:\r\n                        // Catalog content is not allowed to add new catalog, cut or copy, but we can paste Nodes into it, so just hide cut, copy and add new catalog command.\r\n                        if (command.isInstanceOf(CutCommand) || command.isInstanceOf(CopyCommand)\r\n                            || command.isInstanceOf(NewCatalogCommand)) {\r\n                            command.set(\"isAvailable\", false);\r\n                        }\r\n                        else if (command.isInstanceOf(DeleteCommand) || isEditCommand){\r\n                            command.set(\"isAvailable\", true);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        // For node content, every command but add catalog command (except Translate command is disabled above) is available.\r\n                        if (command.isInstanceOf(NewCatalogCommand)) {\r\n                            command.set(\"isAvailable\", false);\r\n                        }\r\n                        else if (command.isInstanceOf(CutCommand) || command.isInstanceOf(CopyCommand) \r\n                            || command.isInstanceOf(DeleteCommand) || isEditCommand) {\r\n                            command.set(\"isAvailable\", true);\r\n                        }\r\n                }\r\n            }, this);\r\n        },\r\n\r\n        _updateDeleteCommand: function (command, model) {\r\n            // summary:\r\n            //      Update delete command, to show a confirmation dialog.\r\n            //      In case of deleting a Catalog, the confirmation dialog will have a warning icon, and different text, to give a higher warning level.\r\n            // tags:\r\n            //      private\r\n\r\n            // since execute function will be modify in withConfirmation, we must back it up.\r\n            if (!command._originalExecute) {\r\n                // keep original execute function\r\n                command._originalExecute = command._execute;\r\n            } else {\r\n                // rollback execute function\r\n                command._execute = command._originalExecute;\r\n            }\r\n\r\n            var setting = {\r\n                title: res.deleteconfirmationtitle,\r\n                description: res.deleteconfirmationdescription,\r\n                confirmActionText: sharedResources.action.deletelabel,\r\n                cancelActionText: sharedResources.action.cancel\r\n            };\r\n\r\n            // higher warning level when deleting Catalog\r\n            if (model.typeIdentifier === ModelSupport.contentTypeIdentifier.catalogContent) {\r\n                // make sure the input object is un-touched by creating a cloned object, then modify the name property.\r\n                var clonedObject = lang.clone(model);\r\n                clonedObject.name = htmlEntities.encode(clonedObject.name);\r\n                lang.mixin(setting, {\r\n                    iconClass: \"epi-iconWarning epi-icon--large epi-icon--colored\",\r\n                    title: res.deletecatalogconfirmationtitle,\r\n                    description: dojoString.substitute(res.deletecatalogconfirmationdescription, clonedObject),\r\n                    confirmActionText: res.deletecatalogconfirmationlabel,\r\n                    setFocusOnConfirmButton: false // make Delete button gray\r\n                });\r\n            }\r\n\r\n            command = withConfirmation(command, DeleteCatalogContentHandler, setting);\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\component\\DeleteCatalogContentHandler.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\component\\DeleteConfirmation.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\component\\DiscountPriority.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/ContentEditingValidator' is an internal Episerver module and can have a breaking change in any release.",
                "line": 16,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/ContentEditingValidator\", // in order to display validation messages on the toolbar",
                "endLine": 16,
                "endColumn": 53
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/dom-geometry\",\r\n    \"dojo/topic\",\r\n    \"dojo/when\",\r\n// dijit\r\n    \"dijit/layout/_LayoutWidget\",\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n// epi\r\n    \"epi/dependency\",\r\n    \"epi/shell/ViewSettings\",\r\n    \"epi/shell/_ContextMixin\",\r\n// epi-cms    \r\n    \"epi-cms/contentediting/ContentEditingValidator\", // in order to display validation messages on the toolbar\r\n// resources\r\n    \"dojo/text!./templates/DiscountPriority.html\",\r\n    \"epi/i18n!epi/cms/nls/commerce.components.discountpriority\",\r\n    \"epi/i18n!epi/nls/episerver.shared\",\r\n// Widgets in the template\r\n    \"../widget/MarketingToolbar\",\r\n    \"../widget/DiscountList\"\r\n], function (\r\n    array,\r\n    declare,\r\n    domGeometry,\r\n    topic,\r\n    when,\r\n// dijit\r\n    _LayoutWidget,\r\n    _TemplatedMixin,\r\n    _WidgetsInTemplateMixin,\r\n// epi\r\n    dependency,\r\n    ViewSettings,\r\n    _ContextMixin,\r\n// epi-cms\r\n    ContentEditingValidator,\r\n// resources\r\n    template,\r\n    resources,\r\n    sharedResources\r\n) {\r\n    return declare([_LayoutWidget, _TemplatedMixin, _WidgetsInTemplateMixin, ContentEditingValidator, _ContextMixin], {\r\n        // summary:\r\n        //      This is the initializer of Discount Priority component.\r\n\r\n        resources: resources,\r\n\r\n        templateString: template,\r\n\r\n        contextTypeName: \"epi.cms.contentdata\",\r\n\r\n        // profile:\r\n        //      Refer the Profile settings, including the right panel toolbar\r\n        profile: null,\r\n\r\n        // pinnablePanelVisible: boolean\r\n        //      Save visibility status of right panel toolbar\r\n        _pinnablePanelVisible: false,\r\n\r\n        // _backLink: Uri\r\n        //      The Uri to the screen would be navigated when clicking on Close button.\r\n        _backLink: null,\r\n\r\n        // _marketingToolbarCommands: Array\r\n        //      Collection of marketing toolbar commands\r\n        _marketingToolbarCommands: [],\r\n\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n\r\n            var contentRepositoryDescriptors = dependency.resolve(\"epi.cms.contentRepositoryDescriptors\");\r\n            this.contextId = this.contextId || contentRepositoryDescriptors.marketing.roots[0];\r\n\r\n            this._marketingToolbarCommands = this._getMarketingToolbarCommands();\r\n            this._setupToolbar();\r\n\r\n            this.profile = this.profile || dependency.resolve(\"epi.shell.Profile\");\r\n        },\r\n\r\n        startup: function () {\r\n            this.inherited(arguments);\r\n\r\n            if (this.discountList.model) {\r\n                this.discountList.model.watch(\"hasPendingChanges\", function (property, oldValue, newValue) {\r\n                    this.toolbar.updateActionButtonStatus(this.toolbar.buttonNames.saveButton, newValue);\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        updateView: function (data, context) {\r\n            // summary:\r\n            //      Updates the view, to reflect data changes.(when opening this view second time)\r\n            // tags:\r\n            //      protected\r\n\r\n            this.inherited(arguments);\r\n\r\n            this._backLink = data && data.backLink ? data.backLink : { uri: ViewSettings.settings.defaultContext };\r\n            // view has been updated, let's update the discount list to reflect changes\r\n            this.discountList.refresh(true);\r\n\r\n            // Set unavailable for marketing toolbar commands when changed to discount priority view\r\n            this._hideMarketingCommands();\r\n\r\n            // update the toolbar with the current contextId, so any error message will be displayed on the toolbar\r\n            this.toolbar.update({\r\n                currentContext: { id: this.contextId },\r\n                viewConfigurations: {\r\n                    availableViews: data.availableViews,\r\n                    viewName: data.viewName\r\n                }\r\n            });\r\n                        \r\n            when(this.profile.get(\"tools\")).then(function (settings) {\r\n                if (settings) {\r\n                    // save current panel visibility status\r\n                    this._pinnablePanelVisible = settings.visible;\r\n                }\r\n            }.bind(this));\r\n\r\n            // invisible tool panel\r\n            topic.publish(\"/epi/layout/pinnable/tools/toggle\", false);\r\n        },\r\n\r\n        resize: function () {\r\n            // summary:\r\n            //      Overridden to resize the discount list\r\n\r\n            this.inherited(arguments);\r\n\r\n            var toolbarSize = domGeometry.getMarginBox(this.toolbar.domNode);\r\n            var headingSize = domGeometry.getMarginBox(this.heading);\r\n\r\n            this.discountList.resize({\r\n                h: this._contentBox.h - toolbarSize.h - headingSize.h,\r\n                w: this._contentBox.w\r\n            });\r\n        },\r\n\r\n        _getMarketingToolbarCommands: function () {\r\n            // summary:\r\n            //      Gets the marketing toolbar commands\r\n            // tags:\r\n            //      private\r\n            var listCommands = [],\r\n                commandRegistry = dependency.resolve(\"epi.globalcommandregistry\"),\r\n                commandProviders = commandRegistry.get(\"epi.commerce.marketingToolbar\", true);\r\n\r\n            if (commandProviders) {\r\n                array.forEach(commandProviders.providers, function (provider) {\r\n                    if (provider.newCampaignCommand) {\r\n                        listCommands.push(provider.newCampaignCommand);\r\n                    }\r\n                    if (provider.newPromotionCommand) {\r\n                        listCommands.push(provider.newPromotionCommand);\r\n                    }\r\n                });\r\n            }\r\n\r\n            return listCommands;\r\n        },\r\n\r\n        _setupToolbar: function () {\r\n            var actionButtons = this.toolbar.getActionButtons();\r\n            actionButtons.save.action = this._onSave.bind(this);\r\n            actionButtons.close.action = this._onClose.bind(this);\r\n\r\n            this.toolbar.add([actionButtons.save, actionButtons.close]);\r\n        },\r\n\r\n        _onSave: function () {\r\n            var promise = this.discountList.save();\r\n            promise.then(function (results) {\r\n                var validationErrors = [];\r\n                if (results) {\r\n                    // display error messages on toolbar if any\r\n                    array.forEach(results, function (result) {\r\n                        if (result.successful) {\r\n                            return true; // continue\r\n                        }\r\n                        array.forEach(result.properties, function (propertyError) {\r\n                            validationErrors.push({ severity: this.severity.error, errorMessage: propertyError.validationErrors });\r\n                        }, this);\r\n                    }, this);\r\n                }\r\n\r\n                this.setGlobalErrors(validationErrors, null);\r\n            }.bind(this));\r\n            return promise;\r\n        },\r\n\r\n        _onClose: function () {\r\n            this.discountList.clearItems();\r\n            topic.publish(\"/epi/shell/context/request\", this._backLink, { sender: this });\r\n        },\r\n\r\n        contextChanged: function (ctx, callerData) {\r\n            // summary:\r\n            //      Function called on context changed\r\n            // tags:\r\n            //      Protected\r\n            topic.publish(\"/epi/layout/pinnable/tools/toggle\", this._pinnablePanelVisible);\r\n        },\r\n\r\n        _hideMarketingCommands: function () {\r\n            // summary:\r\n            //      Hide all marketing toolbar commands\r\n            // tags:\r\n            //      private\r\n                \r\n            array.forEach(this._marketingToolbarCommands, function (command) {\r\n                command.set(\"isAvailable\", false);\r\n            });\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\component\\InventoryOverview.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\component\\MarketingOverview.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/SearchBox' is an internal Episerver module and can have a breaking change in any release.",
                "line": 13,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/SearchBox\",",
                "endLine": 13,
                "endColumn": 31
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "define([\r\n    \"dojo/_base/declare\",\r\n    \"dojo/dom-geometry\",\r\n    \"dojo/when\",\r\n// dijit\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n    \"dijit/layout/_LayoutWidget\",\r\n// epi\r\n    \"epi/shell/_ContextMixin\",\r\n    \"epi/dependency\",\r\n    \"../widget/FacetGroupList\",\r\n    \"epi-cms/widget/SearchBox\",\r\n    \"../widget/viewmodel/MarketingFacetGroupViewModel\",\r\n    \"../widget/viewmodel/MarketingFacetGroupListViewModel\",\r\n// resources\r\n    \"dojo/text!./templates/MarketingOverview.html\",\r\n// Widgets in the template\r\n    \"../widget/CampaignItemList\",\r\n    \"../widget/MarketingToolbar\"\r\n], function (\r\n    declare,\r\n    domGeometry,\r\n    when,\r\n// dijit\r\n    _TemplatedMixin,\r\n    _WidgetsInTemplateMixin,\r\n    _LayoutWidget,\r\n// epi\r\n    _ContextMixin,\r\n    dependency,\r\n    FacetGroupList,\r\n    SearchBox,\r\n    MarketingFacetGroupViewModel,\r\n    MarketingFacetGroupListViewModel,    \r\n// resources\r\n    template\r\n) {\r\n\r\n    return declare([_LayoutWidget, _TemplatedMixin, _WidgetsInTemplateMixin, _ContextMixin], {\r\n        // summary:\r\n        //      This is the initializer of Marketing Overview.\r\n\r\n        templateString: template,\r\n\r\n        postCreate: function () {\r\n            this._searchBox = new SearchBox();\r\n            this.own(this._searchBox);\r\n\r\n            var contentRepositoryDescriptors = dependency.resolve(\"epi.cms.contentRepositoryDescriptors\");\r\n\r\n            this._searchBox.set(\"area\", \"Commerce/Campaigns\");\r\n            this._searchBox.set(\"searchRoots\", contentRepositoryDescriptors.marketing.roots[0]);\r\n\r\n            this._searchBox.placeAt(this.searchBoxContainer);\r\n\r\n            var campaignFacetSettings = {\r\n                itemViewModelClass: MarketingFacetGroupViewModel,\r\n                listViewModelClass: MarketingFacetGroupListViewModel\r\n            };\r\n            this._campaignFacet = new FacetGroupList(campaignFacetSettings);\r\n            this.own(this._campaignFacet);\r\n\r\n            this._campaignFacet.placeAt(this.leftPaneContainer);\r\n\r\n            this.inherited(arguments);\r\n        },\r\n\r\n        updateView: function (data, context) {\r\n            // summary:\r\n            //      Updates the view, to reflect data changes.(when opening this view second time)\r\n            // tags:\r\n            //      protected\r\n\r\n            this.toolbar.update({\r\n                currentContext: context,\r\n                viewConfigurations: {\r\n                    availableViews: data.availableViews,\r\n                    viewName: data.viewName\r\n                }\r\n            });\r\n        },\r\n\r\n        layout: function () {\r\n            // summary:\r\n            //      Layout the children widgets.\r\n            // tags:\r\n            //      protected\r\n\r\n            this.inherited(arguments);\r\n\r\n            var toolbarSize = domGeometry.getMarginBox(this.toolbar.domNode),\r\n                leftPaneSize = domGeometry.getMarginBox(this.leftPaneContainer);\r\n\r\n            var contentHeight = this._contentBox.h - toolbarSize.h;\r\n            domGeometry.setMarginBox(this._campaignFacet.domNode, { h: contentHeight });\r\n\r\n            // Set the size of the marketing overview to be the content height minus the toolbar height and width minus the facet width.\r\n            this.campaignItemList.resize({\r\n                h: contentHeight,\r\n                w: this._contentBox.w - leftPaneSize.w\r\n            });\r\n        },\r\n\r\n        startup: function () {\r\n            this.inherited(arguments);\r\n            when(this.getCurrentContext(), this.contextChanged.bind(this));\r\n            this.toolbar.setViewSelectorVisible(true);\r\n        },\r\n\r\n        contextChanged: function (ctx, callerData) {\r\n            this.toolbar.update({\r\n                currentContext: ctx\r\n            });\r\n        }\r\n    });\r\n\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\component\\PricingOverview.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\component\\viewmodel\\CatalogsViewModel.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/asset/view-model/HierarchicalListViewModel' is an internal Episerver module and can have a breaking change in any release.",
                "line": 7,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/asset/view-model/HierarchicalListViewModel\",",
                "endLine": 7,
                "endColumn": 57
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/when\",\r\n// epi\r\n    \"epi-cms/asset/view-model/HierarchicalListViewModel\",\r\n// Commerce\r\n    \"../../command/NavigateToEditPage\",\r\n    \"../../command/ShowCatalogThumbnails\",\r\n    \"../../widget/viewmodel/CatalogTreeStoreModel\"\r\n],\r\n\r\nfunction (\r\n// dojo\r\n    declare,\r\n    lang,\r\n    when,\r\n// epi\r\n    HierarchicalListViewModel,\r\n// Commerce\r\n    NavigateToEditPageCommand,\r\n    ShowCatalogThumbnailsCommand,\r\n    CatalogTreeStoreModel\r\n) {\r\n    // module:\r\n    //      epi-ecf-ui.component.viewmodel.CatalogsViewModel\r\n\r\n    return declare([HierarchicalListViewModel], {\r\n        // summary:\r\n        //      Catalogs view model.\r\n        // tags:\r\n        //      public\r\n\r\n        treeStoreModelClass: CatalogTreeStoreModel,\r\n\r\n        // showCatalogThumbnails: [public] Boolean\r\n        //      Flag which indicates whether to show thumbnails in catalog hierarchical list. Value is true if thumbnails should be shown; otherwise false.\r\n        showCatalogThumbnails: true,\r\n\r\n        postscript: function () {\r\n            this.inherited(arguments);\r\n\r\n            this.set(\"commands\", [new ShowCatalogThumbnailsCommand({ model: this })]);\r\n        },\r\n\r\n        startup: function () {\r\n            this.inherited(arguments);\r\n\r\n            // if navigateOnEdit is true, let's replace the edit command to NavigateToEditPageCommand\r\n            // so when editing the content, the browser will navigate to edit page instead of changing context.\r\n            if (this.get(\"navigateOnEdit\")) {\r\n                this._commandRegistry.edit.command = new NavigateToEditPageCommand({ category: \"context\" });\r\n            }\r\n        },\r\n\r\n        destroy: function () {\r\n            this.inherited(arguments);\r\n\r\n            this.get(\"treeStoreModel\").destroy();\r\n        },\r\n\r\n        _showCatalogThumbnailsSetter: function (value) {\r\n            // summary:\r\n            //      Set the show catalog thumbnails property.\r\n            // tags:\r\n            //      protected\r\n\r\n            this.showCatalogThumbnails = value;\r\n        },\r\n\r\n        _getSortSettings: function () {\r\n            // summary:\r\n            //      Returns the list of sort criteria.\r\n            // tags:\r\n            //      protected override\r\n\r\n            // overwrite to return empty sort setting, which means that the default content's sort order will be used.\r\n            return [];\r\n        },\r\n\r\n        contentContextChanged: function (context, callerData) {\r\n            // summary:\r\n            //      Called when the currently loaded content changes. I.e. a new content data object is loaded into the preview area.\r\n            //      Override _ContextContextMixin.contentContextChanged\r\n            // tags:\r\n            //      protected override\r\n\r\n            // If the list already has a context, don't change it\r\n            var oldListRef = this.get(\"currentListItem\");\r\n            if (oldListRef) {\r\n                return;\r\n            }\r\n\r\n            // If not, let the base implementation set up the initial context\r\n            this.inherited(arguments);\r\n        },\r\n\r\n        _listQuerySetter: function (value) {\r\n            // summary:\r\n            //      Custom setter for the list query to create a different query depending\r\n            //      on if the item supports sorting of children.\r\n            // tags:\r\n            //      private\r\n\r\n            if (!value) {\r\n                this.listQuery = value;\r\n                return;\r\n            }\r\n\r\n            when(this.store.get(value.referenceId), function (item) {\r\n                var supportSorting = !!item && !!item.capabilities && !!item.capabilities.sortChildren,\r\n                    listQuery = lang.delegate(value, { simplified: !supportSorting });\r\n                this.listQuery = listQuery;\r\n            }.bind(this));\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\_HasNotificationMixin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\_ViewConfigurationsMixin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\_BaseEntryCollectionEditorGrid.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/builder/ButtonBuilder' is an internal Episerver module and can have a breaking change in any release.",
                "line": 21,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/builder/ButtonBuilder\",",
                "endLine": 21,
                "endColumn": 46
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/dgrid/_EditorMetadataMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 22,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/dgrid/_EditorMetadataMixin\",",
                "endLine": 22,
                "endColumn": 43
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_FocusableMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 23,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_FocusableMixin\",",
                "endLine": 23,
                "endColumn": 39
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_ModelBindingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 24,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_ModelBindingMixin\",",
                "endLine": 24,
                "endColumn": 42
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/ContentSelectorDialog' is an internal Episerver module and can have a breaking change in any release.",
                "line": 29,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/ContentSelectorDialog\",",
                "endLine": 29,
                "endColumn": 43
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/editors/_AddItemDialogMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 30,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/editors/_AddItemDialogMixin\",",
                "endLine": 30,
                "endColumn": 57
            }
        ],
        "errorCount": 6,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/aspect\",\r\n    \"dojo/Deferred\",\r\n    \"dojo/when\",\r\n\r\n// dijit\r\n    \"dijit/_Widget\",\r\n    \"dijit/_TemplatedMixin\",\r\n\r\n// dgrid\r\n    \"dgrid/Selection\",\r\n    \"dgrid/OnDemandGrid\",\r\n\r\n// epi\r\n    \"epi/dependency\",\r\n    \"epi/string\",\r\n    \"epi/shell/_ContextMixin\",\r\n    \"epi/shell/command/builder/ButtonBuilder\",\r\n    \"epi/shell/dgrid/_EditorMetadataMixin\",\r\n    \"epi/shell/widget/_FocusableMixin\",\r\n    \"epi/shell/widget/_ModelBindingMixin\",\r\n    \"epi/shell/widget/dialog/Confirmation\",\r\n\r\n// epi cms\r\n    \"epi-cms/dgrid/DnD\",\r\n    \"epi-cms/widget/ContentSelectorDialog\",\r\n    \"epi-cms/contentediting/editors/_AddItemDialogMixin\",\r\n    \"epi-cms/core/ContentReference\",\r\n    \"epi-cms/dgrid/WithContextMenu\",\r\n    \"epi-cms/dgrid/formatters\",\r\n\r\n// epi ecf\r\n    \"../ModelSupport\",\r\n    \"./_CollectionEditorDndMixin\",\r\n    \"./_GridWithDropContainerMixin\",\r\n     \"../../dgrid/_ClickablePathColumnMixin\",\r\n\r\n    \"epi/i18n!epi/cms/nls/commerce.contentediting.editors.relationcollectioneditor\"\r\n],\r\nfunction (\r\n// dojo\r\n    array,\r\n    declare,\r\n    aspect,\r\n    Deferred,\r\n    when,\r\n\r\n// dijit\r\n    _Widget,\r\n    _TemplatedMixin,\r\n\r\n// dgrid\r\n    Selection,\r\n    Grid,\r\n\r\n// epi\r\n    dependency,\r\n    epiString,\r\n    _ContextMixin,\r\n    ButtonBuilder,\r\n    _EditorMetadataMixin,\r\n    _FocusableMixin,\r\n    _ModelBindingMixin,\r\n    Confirmation,\r\n\r\n// epi cms\r\n    DnD,\r\n    ContentSelectorDialog,\r\n    _AddItemDialogMixin,\r\n    ContentReference,\r\n    WithContextMenu,\r\n    formatters,\r\n\r\n// epi ecf\r\n    ModelSupport,\r\n    _CollectionEditorDndMixin,\r\n    _GridWithDropContainerMixin,\r\n    _ClickablePathColumnMixin,\r\n\r\n    resources\r\n) {\r\n    return declare([_Widget, _TemplatedMixin, _ModelBindingMixin, _AddItemDialogMixin, _FocusableMixin, _CollectionEditorDndMixin, _ContextMixin, _GridWithDropContainerMixin], {\r\n\r\n        grid: null,\r\n\r\n        storeKey: \"epi.commerce.relation\",\r\n\r\n        itemType: \"EPiServer.Commerce.Shell.Rest.Models.RelationModel\",\r\n\r\n        allowedDndTypes: [ModelSupport.contentTypeIdentifier.variationContent, ModelSupport.contentTypeIdentifier.productContent, ModelSupport.linkTypeIdentifier.relation],\r\n\r\n        itemEditorTypes: [ModelSupport.contentTypeIdentifier.variationContent, ModelSupport.contentTypeIdentifier.packageContent, ModelSupport.contentTypeIdentifier.productContent],\r\n\r\n        dndSourceTypes: [ModelSupport.linkTypeIdentifier.relation],\r\n\r\n        includedColumns: [\"ContentTypeIdentifier\", \"Name\", \"Path\", \"Quantity\", \"GroupName\"],\r\n\r\n        editableColumns: [\"Quantity\", \"GroupName\"],\r\n\r\n        // Grid action column name\r\n        cellActionName: \"epiGridAction\",\r\n\r\n        itemEditorType: ContentSelectorDialog,\r\n\r\n        noDataMessage: resources.nodatamessage,\r\n\r\n        addLabelText: resources.addlabel,\r\n\r\n        _store: null,\r\n\r\n        postMixInProperties: function () {\r\n            this.model = this.model || new this.modelType({\r\n                itemType: this.itemType\r\n            });\r\n        },\r\n\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n\r\n            if (!this.roots) {\r\n                var contentRepositoryDescriptors = dependency.resolve(\"epi.cms.contentRepositoryDescriptors\"),\r\n                    settings = contentRepositoryDescriptors.catalog;\r\n                this.roots = settings.roots;\r\n            }\r\n            var builder = new ButtonBuilder({ settings: { showLabel: true } }),\r\n                command = this.model.getListCommand();\r\n            builder.create(command, this.commandTargetNode);\r\n\r\n            // Set up metadata capable grid type\r\n            var EditorGrid = declare([Grid, Selection, _EditorMetadataMixin, WithContextMenu, DnD, _ClickablePathColumnMixin], {});\r\n\r\n            this._store = this._createStore();\r\n            // Get metadata for itemType\r\n            when(this.model.metadataManager.getMetadataForType(this.itemType), function (metadata) {\r\n                // Set up columns object with one column for context menu\r\n                var columns = [\r\n                    {\r\n                        field: \"contentTypeIdentifier\",\r\n                        renderHeaderCell: function () { }, // no header\r\n                        get: function (object) {\r\n                            return object.contentTypeIdentifier;\r\n                        },\r\n                        label: \"\",\r\n                        formatter: function (typeIdentifier, additionalClass) {\r\n                            return formatters.contentIcon(typeIdentifier, additionalClass);\r\n                        },\r\n                        className: \"epi-columnIcon16x16\",\r\n                        sortable: false\r\n                    },\r\n                    {\r\n                        field: this.cellActionName,\r\n                        renderHeaderCell: function () { }, // no header\r\n                        renderCell: function (object, value, node, options) {\r\n                            var builder = new ButtonBuilder({ settings: { showLabel: false } }),\r\n                                commands = this.model.getCommands(this.grid, null);\r\n\r\n                            array.forEach(commands, function(command) {\r\n                                builder.create(command, node);\r\n                            });\r\n                        }.bind(this),\r\n                        className: \"epi-columnNarrow\",\r\n                        sortable: false\r\n                    }],\r\n                    store = this._store,\r\n                    // Create grid\r\n                    grid = this.grid = new EditorGrid({\r\n                        store: store,\r\n                        minWidth: 100,\r\n                        noDataMessage: this.noDataMessage,\r\n                        selectionMode: \"single\",\r\n                        \"class\": \"epi-plain-grid epi-plain-grid-modal epi-plain-grid--margin-bottom epi-plain-grid--cell-borders\",\r\n                        columns: columns,\r\n                        metadata: {\r\n                            properties: metadata.properties,\r\n                            gridIncluded: this.includedColumns,\r\n                            gridEditable: this.editableColumns\r\n                        },\r\n                        dndSourceTypes: this.dndSourceTypes,\r\n                        dndParams: {\r\n                            copyOnly: true,\r\n                            accept: this.allowedDndTypes || [],\r\n                            creator: this._dndNodeCreator.bind(this)\r\n                        }\r\n                    }, this.gridNode);\r\n                this.own(grid,\r\n                    this.model.on(\"itemAdded\", function (e) {\r\n                        this.grid.refresh();\r\n                    }.bind(this)),\r\n                    this.model.on(\"itemsRemoved\", function (e) {\r\n                        this.grid.refresh();\r\n                    }.bind(this)),\r\n                    this.model.on(\"itemSaved\", function () {\r\n                        this.grid.refresh();\r\n                    }.bind(this)),\r\n                    this.model.watch(\"contentLink\", function (property, oldValue, newValue) {\r\n                        // Set query even if the content link is the same, to update bundle entry grid\r\n                        this._updateGridQuery(newValue);\r\n                        grid.resize();\r\n                    }.bind(this)),\r\n                    // Listen remove command event\r\n                    this.model.on(\"removeCommandEvent\", function () {\r\n                        // Show confirmation dialog to confirm delete bundle item\r\n                        when(this._showConfirmation(this.deleteConfirmationTitle, this.deleteConfirmationDescription), function () {\r\n                            if (this.model) {\r\n                                var remove = [];\r\n                                for (var selected in this.grid.selection) {\r\n                                    if (this.grid.selection.hasOwnProperty(selected)) {\r\n                                        remove.push(this.model.store.get(selected));\r\n                                    }\r\n                                }\r\n                                return this.model.removeItems(remove);\r\n                            }\r\n                        }.bind(this));\r\n                    }.bind(this))\r\n                );\r\n                this.styleGrid();\r\n                this._setupDnD();\r\n                when(this.getCurrentContext(), function(currentContext){\r\n                    this._updateGridQuery(currentContext.id);\r\n                    this.grid.startup();\r\n                }.bind(this));\r\n            }.bind(this));\r\n\r\n        },\r\n\r\n        _createStore: function () {\r\n            return dependency.resolve(\"epi.storeregistry\").get(this.storeKey);\r\n        },\r\n\r\n        _updateGridQuery: function(value){\r\n            var queryOptions = this.getQueryOptions(value);\r\n            this.grid.set(\"query\", queryOptions.query, queryOptions.options);\r\n        },\r\n\r\n        getQueryOptions: function(referenceId) {\r\n            return {\r\n                query: {\r\n                    referenceId: new ContentReference(referenceId).createVersionUnspecificReference().toString(),\r\n                    relationTypes: [this.relationType]\r\n                },\r\n                options: {\r\n                    ignore: [\"referenceId\", \"relationTypes\"]\r\n                }\r\n            };\r\n        },\r\n\r\n        _addItem: function (item) {\r\n            when(this._dndGetItemData(item), function (itemData) {\r\n                return this.model.addItem(\r\n                    itemData,\r\n                    this.grid.dndSource.current != null ?\r\n                        this.grid.dndSource.getItem(this.grid.dndSource.current.id).data :\r\n                        null,\r\n                    this.grid.dndSource.before\r\n                );\r\n            }.bind(this));\r\n        },\r\n\r\n        resize: function () {\r\n            this.inherited(arguments);\r\n\r\n            if (this.grid) {\r\n                this.grid.resize();\r\n            }\r\n        },\r\n\r\n        _getDialogTitleText: function () {\r\n            return this.addLabelText;\r\n        },\r\n\r\n        _createItemEditor: function () {\r\n            return new this.itemEditorType({\r\n                canSelectOwnerContent: false,\r\n                showButtons: false,\r\n                roots: this.roots,\r\n                allowedTypes: this.itemEditorTypes,\r\n                showAllLanguages: false\r\n            });\r\n        },\r\n\r\n        _dndGetItemData: function (item) {\r\n            return when(item.data, function (data) {\r\n                return this._createItem(data.contentLink, data.name);\r\n            }.bind(this));\r\n        },\r\n\r\n        _createItem: function (targetLink, name) {\r\n            return {\r\n                name: name || targetLink,\r\n                groupName: \"Default\",\r\n                quantity: 1,\r\n                sortOrder: 0,\r\n                source: this.model.get(\"contentLink\"),\r\n                target: targetLink,\r\n                type: this.relationType\r\n            };\r\n        },\r\n\r\n        onExecuteDialog: function () {\r\n            var item = this._itemEditor.get(\"value\");\r\n            this._addItem({ data: { contentLink: item } }, true);\r\n        },\r\n\r\n        _setValueAttr: function (value) {\r\n            // summary:\r\n            //      Value setter.\r\n            // description:\r\n            //      Push value to the model to be its data.\r\n            //  tags:\r\n            //      private\r\n\r\n            this._set(\"value\", value);\r\n\r\n            if (this.model) {\r\n                this.model.set(\"contentLink\", value);\r\n            }\r\n        },\r\n\r\n        destroy: function () {\r\n            // summary:\r\n            //      Destroy the object.\r\n\r\n            if (this.grid) {\r\n                this.grid.destroy();\r\n                this.grid = null;\r\n            }\r\n\r\n            this.inherited(arguments);\r\n        },\r\n\r\n        _showConfirmation: function (title, description) {\r\n            // summary:\r\n            //      Wrap epi.shell.widget.dialog.Confirmation for short type\r\n            //      and return deferred object\r\n            // description:\r\n            //      String: Text to display on dialog\r\n            // tags:\r\n            //      private\r\n\r\n            var deferred = new Deferred();\r\n\r\n            var dialog = new Confirmation({\r\n                destroyOnHide: true,\r\n                title: epiString.toHTML(title),\r\n                description: epiString.toHTML(description),\r\n                onAction: function (confirmed) {\r\n                    if (confirmed) {\r\n                        deferred.resolve();\r\n                    } else {\r\n                        deferred.cancel();\r\n                    }\r\n                }\r\n            });\r\n            dialog.show();\r\n\r\n            return deferred.promise;\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\_CollectionEditorDndMixin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\_GridWithAddCommand.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/builder/ButtonBuilder' is an internal Episerver module and can have a breaking change in any release.",
                "line": 18,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/builder/ButtonBuilder\",",
                "endLine": 18,
                "endColumn": 46
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/dialog/_DialogContentMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 19,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/dialog/_DialogContentMixin\",",
                "endLine": 19,
                "endColumn": 50
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/aspect\",\r\n    \"dojo/dom-construct\",\r\n    \"dojo/dom-style\",\r\n    \"dojo/dom-geometry\",\r\n    // dijit\r\n    \"dijit/layout/_LayoutWidget\",\r\n    \"dijit/_TemplatedMixin\",\r\n    // dgrid\r\n    \"dgrid/OnDemandGrid\",\r\n    \"dgrid/Selection\",\r\n    // epi\r\n    \"epi/dependency\",\r\n    \"epi/shell/command/_Command\",\r\n    \"epi/shell/command/builder/ButtonBuilder\",\r\n    \"epi/shell/widget/dialog/_DialogContentMixin\",\r\n    // epi-ecf-ui\r\n    \"./AddRelationGroupDefinitionCommand\",\r\n    // resources\r\n    \"epi/i18n!epi/cms/nls/commerce.contentediting.editors.relationgroupeditor\"\r\n], function (\r\n    // dojo\r\n    declare,\r\n    lang,\r\n    aspect,\r\n    domConstruct,\r\n    domStyle,\r\n    domGeometry,\r\n    // dijit\r\n    _LayoutWidget,\r\n    _TemplatedMixin,\r\n    // dgrid\r\n    Grid,\r\n    Selection,\r\n    // epi\r\n    dependency,\r\n    _Command,\r\n    ButtonBuilder,\r\n    _DialogContentMixin,\r\n    // epi-ecf-ui\r\n    AddRelationGroupDefinitionCommand,\r\n    // resources\r\n    resources\r\n) {\r\n    return declare([_LayoutWidget, _TemplatedMixin, _DialogContentMixin], {\r\n\r\n        templateString: '<div><div data-dojo-attach-point=\"addNode\"></div></div>',\r\n\r\n        store: null,\r\n\r\n        grid: null,\r\n\r\n        addCommand: null,\r\n\r\n        _builder: null,\r\n\r\n        storeKey: null,\r\n\r\n        // _noDataMessage: string\r\n        //      String to notify that the grid content is empty.\r\n        _noDataMessage: null,\r\n\r\n        // _gridClassName: string\r\n        //      List of CSS class name that will be applied for a grid.\r\n        _gridClassName: \"epi-plain-grid epi-plain-grid-modal epi-plain-grid--margin-bottom epi-plain-grid--in-dialog\",\r\n\r\n        constructor: function () {\r\n            this._builder = new ButtonBuilder({ settings: { showLabel: false } });\r\n        },\r\n\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n            this.store = this.store || dependency.resolve(\"epi.storeregistry\").get(this.storeKey);\r\n            this._setupGrid();\r\n            this.addCommand = this.getAddCommand();\r\n            if (this.addCommand) {\r\n                this._builder.create(this.addCommand, this.addNode);\r\n                // Refresh grid when added item\r\n                this.own(aspect.after(this.addCommand, \"onSaved\", function () {\r\n                    this.grid.refresh();\r\n                }.bind(this)));\r\n            }\r\n        },\r\n\r\n        getAddCommand: function(){\r\n            // summary:\r\n            //      Override to return correct add command.\r\n            // tags:\r\n            //      protected\r\n        },\r\n\r\n        _setupGrid: function () {\r\n            var gridType = declare([Grid, Selection]);\r\n\r\n            this.grid = new gridType({\r\n                columns: {\r\n                    name: {\r\n                        label: this.getColumnTitle(),\r\n                        sortable: false\r\n                    },\r\n                    action: {\r\n                        className: \"epi-columnNarrow\",\r\n                        renderHeaderCell: function (node) { },\r\n                        renderCell: function (object, value, node, options) {\r\n                            var deleteCommand = this.getDeleteCommand(object);\r\n                            this._builder.create(deleteCommand, node);\r\n                        }.bind(this),\r\n                        sortable: false\r\n                    }\r\n                },\r\n                noDataMessage: this._noDataMessage || \"\",\r\n                store: this.store,\r\n                className: this._gridClassName\r\n            });\r\n\r\n            this.grid.set(\"query\", this.getGridQuery());\r\n            this.own(this.grid);\r\n            domConstruct.place(this.grid.domNode, this.domNode);\r\n        },\r\n\r\n        getColumnTitle: function(){\r\n            // summary:\r\n            //      Override to return correct title for column in grid.\r\n            // tags:\r\n            //      protected\r\n        },\r\n\r\n        getDeleteCommand: function(object){\r\n            // summary:\r\n            //      Override to return correct delete command for rows in grid.\r\n            // tags:\r\n            //      protected\r\n\r\n            return new _Command({\r\n                iconClass: \"epi-iconClose\",\r\n                canExecute: true,\r\n                _execute: function () {\r\n                    var itemId = this.getItemId(object);\r\n                    this.store.remove(itemId).then(function () {\r\n                        this.grid.refresh();\r\n                    }.bind(this));\r\n                }.bind(this)\r\n            });\r\n        },\r\n\r\n        getItemId: function(item){\r\n            // summary:\r\n            //      Override to return correct id for item.\r\n            // tags:\r\n            //      protected\r\n        },\r\n\r\n        getGridQuery: function(){\r\n            // summary:\r\n            //      Override to return correct query for this grid.\r\n            // tags:\r\n            //      protected\r\n            return {};\r\n        },\r\n\r\n        layout: function () {\r\n            // summary:\r\n            //\t\tLayout the children widgets.\r\n            // tags:\r\n            //\t\tprotected\r\n\r\n            this.inherited(arguments);\r\n\r\n            var dialog = this.getParent();\r\n            if (dialog && dialog.containerNode) {\r\n                // Get the height of container node to calculate the height of content grid node.\r\n                var containerNodeHeight = domGeometry.getContentBox(dialog.containerNode).h,\r\n                    gridHeaderHeight = Math.max(domGeometry.getMarginBox(this.grid.headerNode).h, domStyle.get(this.grid.bodyNode, \"margin\")),\r\n                    addButtonHeight = domGeometry.getMarginBox(this.addNode).h;\r\n\r\n                // Set the size of the grid to be the dialog container height\r\n                domStyle.set(this.domNode, \"height\", containerNodeHeight + \"px\");\r\n                domStyle.set(this.grid.contentNode, \"height\", (containerNodeHeight - addButtonHeight - gridHeaderHeight) + \"px\");\r\n            }\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\_GridWithDropContainerMixin.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/dnd/Target' is an internal Episerver module and can have a breaking change in any release.",
                "line": 7,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/dnd/Target\",",
                "endLine": 7,
                "endColumn": 27
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    \"dojo/_base/declare\",\r\n    \"dojo/aspect\",\r\n    \"dojo/dom-class\",\r\n    \"dojo/dom-style\",\r\n    \"dojo/topic\",\r\n    \"epi/shell/dnd/Target\",\r\n    \"epi-cms/contentediting/editors/_TextWithActionLinksMixin\",\r\n    \"./LinkEditorDndMixin\",\r\n    \"dojo/text!./templates/GridWithDropContainer.html\"\r\n], function(\r\n    declare,\r\n    aspect,\r\n    domClass,\r\n    domStyle,\r\n    topic,\r\n    Target,\r\n    _TextWithActionLinksMixin,\r\n    LinkEditorDndMixin,\r\n    template\r\n){\r\n    return declare([_TextWithActionLinksMixin, LinkEditorDndMixin], {\r\n\r\n        templateString: template,\r\n\r\n        gridOverlayClass: \"epi-grid-dnd-overlay\",\r\n\r\n        resources: null,\r\n\r\n        buildRendering: function () {\r\n            this.inherited(arguments);\r\n            if (this.readOnly){\r\n                domStyle.set(this.dropContainer, \"display\", \"none\");\r\n            } else {\r\n                this.setupActionLinks(this.dropContainer);\r\n            }\r\n            var dndTarget = new Target(this.dropContainer, {\r\n                accept: this.allowedDndTypes,\r\n                insertNodes: function () { }\r\n            });\r\n\r\n            this.own(dndTarget,\r\n                    aspect.after(dndTarget, \"onDropData\", function (dndData, source, nodes, copy) {\r\n                        this.onDndDrop(dndData, source, nodes, copy);\r\n            }.bind(this), true));\r\n\r\n            this.setupDndActions(dndTarget, \"checkAcceptance\");\r\n        },\r\n\r\n        getTemplateString: function () {\r\n            // summary:\r\n            //      The template string for drop area\r\n            // tags:\r\n            //      protected\r\n\r\n            return {\r\n                templateString: this.resources.drophere,\r\n                actions: this.resources.actions\r\n            };\r\n        },\r\n\r\n        executeAction: function (actionName) {\r\n            // summary:\r\n            //      Called when [entries] link clicked\r\n            // tags:\r\n            //      public override\r\n\r\n            topic.publish(\"/epi/layout/pinnable/tools/toggle\", true);\r\n        },\r\n\r\n        _setupDnD: function () {\r\n            // summary:\r\n            //      Set up the dnd on the grid.\r\n            // tags:\r\n            //      private\r\n            this.inherited(arguments);\r\n            var dndSource = this.grid.dndSource;\r\n            this.setupDndActions(dndSource, \"checkAcceptance\");\r\n            this.own(aspect.after(dndSource, \"onDndStart\", function (source, nodes, copy) {\r\n                var accepted = dndSource.accept && dndSource.checkAcceptance(source, nodes);\r\n                if (accepted) {\r\n                    domClass.add(this.overlayDnd, this.gridOverlayClass);\r\n                    domClass.remove(this.dropContainer, this.gridOverlayClass);\r\n                } else {\r\n                    domClass.remove(this.overlayDnd, this.gridOverlayClass);\r\n                }\r\n            }.bind(this), true));\r\n        },\r\n\r\n        _setupGrid: function(){\r\n            this.inherited(arguments);\r\n            this.styleGrid();\r\n        },\r\n\r\n        styleGrid: function(){\r\n            this._setGridHeaderFont();\r\n        },\r\n\r\n        _setGridHeaderFont: function(){\r\n            domClass.add(this.gridNode, \"epi-plain-grid--small-header-font\");\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\_GroupDefinitionEditorMixin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\_KeyboardBlurMixin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\_LanguageRestrictedEditButtonMixin.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_ModelBindingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 8,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_ModelBindingMixin\",",
                "endLine": 8,
                "endColumn": 42
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/topic\",\r\n    // dijit\r\n    \"dijit/form/Button\",\r\n    // epi\r\n    \"epi/shell/widget/_ModelBindingMixin\",\r\n    \"epi-cms/contentediting/ContentActionSupport\"\r\n], function (\r\n    // dojo\r\n    declare,\r\n    topic,\r\n    // dijit\r\n    Button,\r\n    // epi\r\n    _ModelBindingMixin,\r\n    ContentActionSupport\r\n) {\r\n        return declare([_ModelBindingMixin], {\r\n\r\n            changeToView: null,\r\n\r\n            buttonLabel: null,\r\n\r\n            buttonClass: \"epi-chromelessButton epi-visibleLink edit-collection-button\",\r\n\r\n            iconClass: null,\r\n\r\n            isLanguageSpecific: false,\r\n\r\n            // contentContext:\r\n            //  accessMask: int\r\n            //  isMasterLanguage: Boolean\r\n            //      Represents if the current content link is shown in the site's master language.\r\n            contentContext: null,\r\n\r\n            isLinkButtonCreated: false,\r\n\r\n            modelBindingMap: {\r\n                \"contentContext\": [\"contentContext\"]\r\n            },\r\n\r\n            _setContentContextAttr: function (value) {\r\n                // summary:\r\n                //      Set the current content with accessMask and isMasterLanguage values.\r\n                // description:\r\n                //      Push value to the model to be its data.\r\n                //  tags:\r\n                //      private\r\n\r\n                this._set(\"contentContext\", value);\r\n\r\n                var isMasterLanguage = value && value.isMasterLanguage;\r\n                if (this.editable !== false && this.buttonLabel && !this.get(\"isLinkButtonCreated\") && (this.isLanguageSpecific || isMasterLanguage)\r\n                    && (value && this._hasAccessRight(value.accessMask))) {\r\n                    this._createButton(value);\r\n                }\r\n            },\r\n\r\n            _hasAccessRight: function (accessMask) {\r\n                if ([\"linksview\"].indexOf(this.changeToView) !== -1) {\r\n                    return true;\r\n                }\r\n\r\n                return ContentActionSupport.hasAccess(accessMask, ContentActionSupport.accessLevel.Publish);\r\n            },\r\n\r\n            _createButton: function (data) {\r\n                var editButton = new Button({\r\n                    label: this.buttonLabel,\r\n                    iconClass: this.iconClass,\r\n                    \"class\": this.buttonClass\r\n                });\r\n\r\n                this.set(\"isLinkButtonCreated\", true);\r\n\r\n                this.own(editButton,\r\n                    editButton.on(\"click\", function () {\r\n                        topic.publish(\"/epi/shell/action/changeview\", this.changeToView, {}, data);\r\n                    }.bind(this)));\r\n\r\n                this.domNode.appendChild(editButton.domNode);\r\n            }\r\n        });\r\n    });"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\_OverviewEditorBase.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_FocusableMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 19,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_FocusableMixin\", ",
                "endLine": 19,
                "endColumn": 39
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_ModelBindingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 20,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_ModelBindingMixin\",",
                "endLine": 20,
                "endColumn": 42
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // Dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/dom-construct\",\r\n    \"dojo/aspect\",\r\n    \"dojo/Deferred\",\r\n    \"dojo/Stateful\",\r\n    \"dojo/when\",\r\n\r\n    // Dijit\r\n    \"dijit/layout/_LayoutWidget\",\r\n    \"dijit/_TemplatedMixin\",\r\n\r\n    // Epi\r\n    \"epi/dependency\",\r\n    \"epi/string\",\r\n    \"epi/shell/_ContextMixin\",\r\n    \"epi/shell/widget/_FocusableMixin\", \r\n    \"epi/shell/widget/_ModelBindingMixin\",\r\n    \"epi/shell/widget/dialog/Confirmation\",\r\n\r\n    //epi-CMS\r\n    \"epi-cms/dgrid/formatters\"\r\n], function (\r\n    // Dojo\r\n    declare,\r\n    lang,\r\n    domConstruct,\r\n    aspect,\r\n    Deferred,\r\n    Stateful,\r\n    when,\r\n\r\n    // Dijit\r\n    _LayoutWidget,\r\n    _TemplatedMixin,\r\n\r\n    // Epi\r\n    dependency,\r\n    epiString,\r\n    _ContextMixin,\r\n    _FocusableMixin,\r\n    _ModelBindingMixin,\r\n    Confirmation,\r\n\r\n    //epi-CMS\r\n    formatters\r\n) {\r\n    return declare([_LayoutWidget, _TemplatedMixin, _ModelBindingMixin, _FocusableMixin, _ContextMixin], {\r\n\r\n        templateString: '<div class=\"epi-listingOverviewEditor\" data-dojo-attach-point=\"gridNode\"></div>',\r\n\r\n        postCreate: function () {\r\n            // Get metadata for itemType\r\n            when(this.model.metadataManager.getMetadataForType(this.itemType), function (metadata) {\r\n                // Set up columns object with one column for context menu\r\n                var columns = [{\r\n                    field: \"epiGridAction\",\r\n                    renderHeaderCell: function () { }, // no header\r\n                    formatter: function () {\r\n                        return formatters.menu({\r\n                            title: this.title\r\n                        });\r\n                    }.bind(this),\r\n                    className: \"epi-columnNarrow\",\r\n                    sortable: false\r\n                }],\r\n                store = dependency.resolve(\"epi.storeregistry\").get(this.storeKey),\r\n\r\n                editorGridSettings = lang.mixin({\r\n                    selectionMode: \"none\",\r\n                    store: store,\r\n                    minWidth: 100,\r\n                    noDataMessage: this._noDataMessage,\r\n                    \"class\": \"epi-plain-grid epi-plain-grid--small-header-font\",\r\n                    columns: columns,\r\n                    metadata: {\r\n                        properties: metadata.properties,\r\n                        gridIncluded: this.includedColumns,\r\n                        gridEditable: this.editableColumns\r\n                    }\r\n                }, this.additionalEditorGridSettings),\r\n\r\n                grid = this.grid = new this.editorGrid(editorGridSettings);\r\n\r\n                this.model.generateFormatters(grid.columns, grid.metadata.gridEditable, grid.metadata);\r\n                domConstruct.place(this.grid.domNode, this.gridNode);\r\n                this._setupEvents(grid);\r\n\r\n                this._setupContextMenu();\r\n\r\n                // Update the grid query in case the contentlink value set but the model or setupEvent hasn't been initialized.\r\n                when(this.getCurrentContext(), function (currentContext) {\r\n                    if (this.model.get(\"contentLink\") !== currentContext.id) {\r\n                        //we're setting the value, since that will update the models content link\r\n                        //which will update the grids query\r\n                        this.set(\"value\", currentContext.id);\r\n                    } else {\r\n                        //the model already has correct contentLink. Here we just make sure\r\n                        //the grid gets the correct query before starting it\r\n                        this._updateGridQuery(grid);\r\n                    }\r\n                    grid.startup();\r\n                    this.own(\r\n                        //we need to wait until after startup to attach to \"edit\" as that function is created\r\n                        //during startup.\r\n                        aspect.before(grid, \"edit\", function (cell) {\r\n                            //we save this value to show in the grid while editing in the popup.\r\n                            this.currentEditorHtmlValue = cell.innerHTML;\r\n                        }.bind(this))\r\n                    );\r\n                }.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        _updateGridQuery: function (grid) {\r\n            // summary:\r\n            //      update the query for grid.\r\n            //  tags:\r\n            //      private\r\n\r\n            var queryOptions = this.model._createQueryOptions();\r\n            grid.set(\"query\", queryOptions.query, queryOptions.options);\r\n        },\r\n\r\n        _changeGridQuery: function (property, oldValue, newValue) {\r\n            // summary:\r\n            //      event to update the grid query.\r\n            //  tags:\r\n            //      private\r\n\r\n            if (oldValue !== newValue) {\r\n                this._updateGridQuery(this.grid);\r\n            }\r\n        },\r\n\r\n        _setupContextMenu: function () {\r\n            this.commands = this.model.getCommands(this.grid, \"context\");\r\n\r\n            this.grid.contextMenu.addProvider(new Stateful({\r\n                commands: this.commands\r\n            }));\r\n        },\r\n\r\n        _setValueAttr: function (value) {\r\n            // summary:\r\n            //      Value setter.\r\n            // description:\r\n            //      Push value to the model to be its data.\r\n            //  tags:\r\n            //      private\r\n\r\n            this._set(\"value\", value);\r\n\r\n            if (this.model) {\r\n                this.model.set(\"contentLink\", value);\r\n            }\r\n        },\r\n\r\n        _showConfirmation: function (title, description) {\r\n            // summary:\r\n            //      Wrap epi.shell.widget.dialog.Confirmation for short type\r\n            //      and return deferred object\r\n            // description:\r\n            //      String: Text to display on dialog\r\n            // tags:\r\n            //      private\r\n\r\n            var deferred = new Deferred();\r\n\r\n            var dialog = new Confirmation({\r\n                destroyOnHide: true,\r\n                title: epiString.toHTML(title),\r\n                description: epiString.toHTML(description),\r\n                onAction: function (confirmed) {\r\n                    if (confirmed) {\r\n                        deferred.resolve();\r\n                    } else {\r\n                        deferred.cancel();\r\n                    }\r\n                }\r\n            });\r\n            dialog.show();\r\n\r\n            return deferred.promise;\r\n        },\r\n\r\n        resize: function () {\r\n            this.inherited(arguments);\r\n            if (this.grid) {\r\n                this.grid.resize();\r\n            }\r\n        },\r\n\r\n        onContextMenuClick: function (e) {\r\n            this.selectedRecord = this.grid.row(e).data;\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\_RelationCollectionEditorBase.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/editors/model/CollectionEditorModel' is an internal Episerver module and can have a breaking change in any release.",
                "line": 22,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/editors/model/CollectionEditorModel\",",
                "endLine": 22,
                "endColumn": 65
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/ContentSelectorDialog' is an internal Episerver module and can have a breaking change in any release.",
                "line": 26,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/ContentSelectorDialog\",",
                "endLine": 26,
                "endColumn": 43
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/Deferred\",\r\n    \"dojo/when\",\r\n    \"dojo/aspect\",\r\n\r\n    // dgrid\r\n    \"dgrid/Keyboard\",\r\n    \"dgrid/OnDemandGrid\",\r\n    \"dgrid/Selection\",\r\n    \"dgrid/extensions/ColumnResizer\",\r\n    \"dgrid/extensions/ColumnReorder\",\r\n\r\n    // EPi Framework\r\n    \"epi/dependency\",\r\n    \"epi/shell/dgrid/Formatter\",\r\n\r\n    // epi cms\r\n    \"epi-cms/contentediting/editors/CollectionEditor\",\r\n    \"epi-cms/contentediting/editors/model/CollectionEditorModel\",\r\n    \"epi-cms/core/ContentReference\",\r\n    \"epi-cms/dgrid/DnD\",\r\n    \"epi-cms/dgrid/WithContextMenu\",\r\n    \"epi-cms/widget/ContentSelectorDialog\",\r\n\r\n    // commerce\r\n    \"./_GridWithDropContainerMixin\",\r\n    \"./RelationCollectionGridAssembler\",\r\n    \"../ModelSupport\",\r\n     \"./LinkEditorDndMixin\",\r\n     \"../../dgrid/_ClickablePathColumnMixin\"\r\n],\r\nfunction (\r\n    //dojo\r\n    declare,\r\n    lang,\r\n    Deferred,\r\n    when,\r\n    aspect,\r\n\r\n    // dgrid\r\n    Keyboard,\r\n    OnDemandGrid,\r\n    Selection,\r\n    ColumnResizer,\r\n    ColumnReorder,\r\n\r\n    // EPi Framework\r\n    dependency,\r\n    Formatter,\r\n\r\n    // epi cms\r\n    CollectionEditor,\r\n    CollectionEditorModel,\r\n    ContentReference,\r\n    DnD,\r\n    WithContextMenu,\r\n    ContentSelectorDialog,\r\n\r\n    // commerce\r\n    _GridWithDropContainerMixin,\r\n    RelationCollectionGridAssembler,\r\n    ModelSupport,\r\n    LinkEditorDndMixin,\r\n    _ClickablePathColumnMixin\r\n) {\r\n    return declare([CollectionEditor, LinkEditorDndMixin, _GridWithDropContainerMixin], {\r\n\r\n        resources: null,\r\n\r\n        itemType: \"EPiServer.Commerce.Shell.Rest.Models.RelationModel\",\r\n\r\n        itemEditorTypes: null,\r\n\r\n        storeKey: \"epi.commerce.relation\",\r\n\r\n        itemEditorType: ContentSelectorDialog,\r\n\r\n        commands: CollectionEditorModel.commandMask.remove,\r\n\r\n        gridAssemblerType: RelationCollectionGridAssembler,\r\n\r\n        gridType: declare([OnDemandGrid, Formatter, Selection, Keyboard, DnD, ColumnResizer, ColumnReorder, WithContextMenu, _ClickablePathColumnMixin]),\r\n\r\n        postMixInProperties: function() {\r\n            // summary:\r\n            //      init _store and gridSettings\r\n            // tags:\r\n            //      public override\r\n            this.inherited(arguments);\r\n\r\n            var registry = dependency.resolve(\"epi.storeregistry\");\r\n            this._store = this._store || registry.get(this.storeKey);\r\n\r\n            if (!this.roots) {\r\n                var contentRepositoryDescriptors = dependency.resolve(\"epi.cms.contentRepositoryDescriptors\");\r\n                var settings = contentRepositoryDescriptors.catalog;\r\n                this.roots = settings.roots;\r\n            }\r\n\r\n            this.gridSettings = lang.mixin(this.gridSettings || {}, {\r\n                useDeleteWithConfirmation: true,\r\n                dndSourceTypes: [ModelSupport.linkTypeIdentifier.relation],\r\n                deleteConfirmationTitle: this.resources.deleteconfirmation.title,\r\n                deleteConfirmationMessage: this.resources.deleteconfirmation.description\r\n            });\r\n        },\r\n\r\n        onExecuteDialog: function () {\r\n            var contentLink = this._itemEditor.get(\"value\");\r\n            when(this.getCurrentContext()).then(function(ctx){\r\n                if (ContentReference.compareIgnoreVersion(ctx.id, contentLink)){\r\n                    this.emit(\"list-error\", { errorText: this.resources.addselferror});\r\n                } else {\r\n                    this.model.addItem(this._createItem(contentLink));\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        _renderNoDataMessage: function () {\r\n            this.grid.set(\"noDataMessage\", this.resources.nodatamessage);\r\n            this.inherited(arguments);\r\n        },\r\n\r\n\r\n        _getDialogTitleText: function () {\r\n            return this.resources.addlabel;\r\n        },\r\n\r\n        _createItemEditor: function () {\r\n            return new this.itemEditorType({\r\n                canSelectOwnerContent: false,\r\n                showButtons: false,\r\n                roots: this.roots,\r\n                allowedTypes: this.itemEditorTypes,\r\n                showAllLanguages: false\r\n            });\r\n        },\r\n\r\n        _dndGetItemData: function (item) {\r\n            return when(item.data, function (data) {\r\n                if (data) {\r\n                    return this._createItem(data.contentLink, data.name);\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        _createItem: function (targetLink, name) {\r\n            return {\r\n                name: name || targetLink,\r\n                sortOrder: 0,\r\n                source: this.model.get(\"data\"),\r\n                target: targetLink,\r\n                type: this.relationType\r\n            };\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\AddRelationGroupDefinitionCommand.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/command/_CommandWithDialogMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 14,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/command/_CommandWithDialogMixin\",",
                "endLine": 14,
                "endColumn": 61
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/when\",\r\n    // dijit\r\n    \"dijit/_Widget\",\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n    \"dijit/form/ValidationTextBox\",\r\n    // epi\r\n    \"epi/dependency\",\r\n    \"epi/shell/command/_Command\",\r\n    // epi-cms\r\n    \"epi-cms/contentediting/command/_CommandWithDialogMixin\",\r\n    // resources\r\n    \"epi/i18n!epi/nls/episerver.shared\",\r\n    \"epi/i18n!epi/cms/nls/commerce.command.addgroup\",\r\n    \"dojo/text!./templates/ManageGroupDefinitionDialog.html\"\r\n\r\n], function (\r\n    // dojo\r\n    declare,\r\n    when,\r\n    // dijit\r\n    _Widget,\r\n    _TemplatedMixin,\r\n    _WidgetsInTemplateMixin,\r\n    ValidationTextBox,\r\n    // epi\r\n    dependency,\r\n    _Command,\r\n    // epi-cms\r\n    _CommandWithDialogMixin,\r\n    // resources\r\n    sharedResources,\r\n    commandResources,\r\n    template\r\n) {\r\n    var AddGroupDefinitionContent = declare([_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {\r\n\r\n        templateString: template,\r\n\r\n        store: null,\r\n\r\n        resources: sharedResources.header,\r\n\r\n        constructor: function () {\r\n            this.store = this.store || dependency.resolve(\"epi.storeregistry\").get(\"epi.commerce.relationgroupdefinition\");\r\n        },\r\n\r\n        saveToStore: function () {\r\n            if (this.nameTextBox.validate()) {\r\n                return this.store.put({\r\n                    name: this.nameTextBox.value\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    return declare([_Command, _CommandWithDialogMixin], {\r\n        dialogContentClass: AddGroupDefinitionContent,\r\n\r\n        dialogClass: \"epi-dialog-confirm\",\r\n\r\n        // Set autofocus to false to prevent the validate the require fields when opening dialog.\r\n        dialogParams: { autofocus: true },\r\n\r\n        iconClass: \"epi-iconPlus\",\r\n\r\n        confirmActionText: sharedResources.action.add,\r\n\r\n        title: commandResources.title,\r\n\r\n        postscript: function () {\r\n            // summary:\r\n            //      Hide close icon\r\n            // tags:\r\n            //      public override\r\n            this.inherited(arguments);\r\n\r\n            if (!this.dialogParams) {\r\n                this.dialogParams = {};\r\n            }\r\n\r\n            this.dialogParams.closeIconVisible = false;\r\n        },\r\n\r\n        _execute: function () {\r\n            // summary:\r\n            //      Executes this command assuming canExecute has been checked.\r\n            // tags:\r\n            //      protected override\r\n            this.showDialog();\r\n\r\n            if (this._dialog) {\r\n                this._setDialogConfirmActionStatus();\r\n\r\n                this.dialogContent.nameTextBox.on(\"change\", this._setDialogConfirmActionStatus.bind(this));\r\n            }\r\n        },\r\n\r\n        _setDialogConfirmActionStatus: function () {\r\n            this._dialog.onActionPropertyChanged({ name: this._dialog._okButtonName }, \"disabled\", !this.dialogContent.nameTextBox.validate());\r\n        },\r\n\r\n        onDialogExecute: function () {\r\n            when(this.dialogContent.saveToStore(), this.onSaved.bind(this));\r\n        },\r\n\r\n        onSaved: function () {\r\n            // summary:\r\n            //      Process value when saved store.\r\n            //      Need to override.\r\n            // tags:\r\n            //      public virtual \r\n        },\r\n\r\n        canExecute: true\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\AmountEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\AssociationCollectionEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\AssociationCollectionReadOnlyEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\AssociationGroupSelectionEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\BundleEntryCollectionEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\BundleEntryCollectionReadOnlyEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\CategoryCollectionEditor.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_FocusableMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 16,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_FocusableMixin\",",
                "endLine": 16,
                "endColumn": 39
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/dom\",\r\n    \"dojo/when\",\r\n    \"dojo/topic\",\r\n\r\n    // dgrid\r\n    \"dgrid/OnDemandGrid\",\r\n    \"dgrid/extensions/ColumnResizer\",\r\n    \"dgrid/extensions/ColumnReorder\",\r\n\r\n    // EPi Framework\r\n    \"epi/shell/DestroyableByKey\",\r\n    \"epi/shell/dgrid/Formatter\",\r\n    \"epi/shell/widget/_FocusableMixin\",\r\n\r\n    // epi cms\r\n    \"epi-cms/dgrid/WithContextMenu\",\r\n\r\n    // ecf-ui\r\n    \"./_RelationCollectionEditorBase\",\r\n    \"../viewmodel/CategoryCollectionEditorModel\",\r\n    \"./LinkEditEditor\",\r\n    \"../ModelSupport\",\r\n    \"../../dgrid/_ClickablePathColumnMixin\",\r\n\r\n    // Resources\r\n    \"dojo/text!./templates/CategoryRelationEditor.html\",\r\n    \"epi/i18n!epi/cms/nls/commerce.contentediting.editors.categorycollectioneditor\"\r\n],\r\n    function (\r\n        //dojo\r\n        declare,\r\n        dom,\r\n        when,\r\n        topic,\r\n\r\n        //dgrid\r\n        OnDemandGrid,\r\n        ColumnResizer,\r\n        ColumnReorder,\r\n\r\n        // Epi Framework\r\n        DestroyableByKey,\r\n        Formatter,\r\n        _FocusableMixin,\r\n\r\n        // epi cms\r\n        WithContextMenu,\r\n\r\n        // ecf-ui\r\n        _RelationCollectionEditorBase,\r\n        CategoryCollectionEditorModel,\r\n        LinkEditEditor,\r\n        ModelSupport,\r\n        _ClickablePathColumnMixin,\r\n\r\n        // Resources\r\n        template,\r\n        resources\r\n    ) {\r\n        var collectionEditor = declare([_RelationCollectionEditorBase, _FocusableMixin], {\r\n            // module:\r\n            //      epi-ecf-ui/contentediting/editors/CategoryCollectionEditor\r\n            // summary:\r\n            //      Represents the editor widget for the categories of an entry or category.\r\n\r\n            gridSettings: { dndDisabled: true },\r\n\r\n            modelType: CategoryCollectionEditorModel,\r\n\r\n            gridType: declare([OnDemandGrid, Formatter, ColumnResizer, ColumnReorder, _ClickablePathColumnMixin, WithContextMenu]),\r\n\r\n            allowedDndTypes: [ModelSupport.contentTypeIdentifier.nodeContent, ModelSupport.linkTypeIdentifier.relation],\r\n\r\n            itemEditorTypes: [ModelSupport.contentTypeIdentifier.nodeContent],\r\n\r\n            resources: resources,\r\n\r\n            relationType: ModelSupport.relationType.node,\r\n\r\n            _addItem: function (item) {\r\n                // The base implementation requires a dndSource property on the grid. Override to call model.addItem\r\n                // without that requirement, we know the item is dragged from an external source.\r\n                when(this._dndGetItemData(item), function (itemData) {\r\n                    if (itemData) {\r\n                        return this.model.addItem(itemData);\r\n                    }\r\n                }.bind(this));\r\n            }\r\n        });\r\n\r\n        return declare([LinkEditEditor, DestroyableByKey], {\r\n\r\n            resources: resources,\r\n\r\n            templateString: template,\r\n\r\n            gridCollectionType: collectionEditor,\r\n\r\n            _setPrimaryCategoryNameAttr: { node: \"primaryCategoryNameNode\", type: \"innerHTML\" },\r\n\r\n            _setPrimaryCategoryPathAttr: { node: \"primaryCategoryPathNode\", type: \"innerHTML\" },\r\n\r\n            _setPrimaryCategoryMissingAttr: { node: \"primaryCategoryMissingNode\", type: \"innerHTML\" },\r\n\r\n            _setTitleAttr: { node: \"titleNode\", type: \"innerHTML\" },\r\n\r\n            buildRendering: function () {\r\n                this.inherited(arguments);\r\n\r\n                this.own(\r\n                    this.gridCollection.model.watch(\"primaryCategory\", function (property, oldValue, newValue) {\r\n                        if (newValue) {\r\n                            this.set(\"primaryCategoryName\", newValue.name);\r\n                            this.set(\"primaryCategoryPath\", newValue.path);\r\n                            this.set(\"primaryCategoryMissing\", \"\");                            \r\n                        } else {\r\n                            this.set(\"primaryCategoryName\", \"\");\r\n                            this.set(\"primaryCategoryPath\", \"\");\r\n                            this.set(\"primaryCategoryMissing\", resources.primarycategory.noprimarycategorymessage);\r\n                        }\r\n                    }.bind(this)),\r\n                    this.gridCollection.model.watch(\"contentContext\", function (property, oldValue, newValue) {\r\n                        this.set(\"contentContext\", newValue);\r\n                    }.bind(this)));\r\n            },\r\n\r\n            postCreate: function () {\r\n                this.inherited(arguments);\r\n                this.set(\"title\", resources.title);\r\n                this.ownByKey(\"pathClick\", this.on(\".clickablePath:click\", function (event) {\r\n                    var contentLink = this.gridCollection.model.primaryCategory.target;\r\n                    topic.publish(\"/epi/shell/context/request\", { uri: \"epi.cms.contentdata:///\" + contentLink }, { sender: this });\r\n                }.bind(this)));\r\n            }\r\n        });\r\n    });"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\CategoryCollectionReadOnlyEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\CommerceMediaCollectionEditor.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_FocusableMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 11,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_FocusableMixin\",",
                "endLine": 11,
                "endColumn": 39
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/dnd/Target' is an internal Episerver module and can have a breaking change in any release.",
                "line": 12,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/dnd/Target\",",
                "endLine": 12,
                "endColumn": 27
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/aspect\",\r\n    \"dojo/dom-class\",\r\n    \"dojo/dom-style\",\r\n    \"dojo/topic\",\r\n\r\n    // EPi Framework\r\n    \"epi/shell/widget/_FocusableMixin\",\r\n    \"epi/shell/dnd/Target\",\r\n\r\n\r\n    // epi cms\r\n    \"epi-cms/contentediting/editors/CollectionEditor\",\r\n    \"epi-cms/contentediting/editors/_TextWithActionLinksMixin\",\r\n\r\n    // epi commerce\r\n    \"./_GridWithDropContainerMixin\",\r\n    \"./model/CommerceMediaCollectionEditorModel\",\r\n    \"epi-ecf-ui/component/CommerceMediaItemModel\",\r\n\r\n    // Resources\r\n    \"epi/i18n!epi/cms/nls/commerce.contentediting.editors.commercemediacollectioneditor\"\r\n\r\n],\r\nfunction (\r\n    //dojo\r\n    declare,\r\n    lang,\r\n    aspect,\r\n    domClass,\r\n    domStyle,\r\n    topic,\r\n\r\n    // EPi Framework\r\n    _FocusableMixin,\r\n    Target,\r\n\r\n    // epi cms\r\n    CollectionEditor,\r\n    _TextWithActionLinksMixin,\r\n\r\n    // epi commerce\r\n    _GridWithDropContainerMixin,\r\n    CommerceMediaCollectionEditorModel,\r\n    CommerceMediaItemModel,\r\n\r\n    // Resources\r\n    res\r\n) {\r\n    return declare([CollectionEditor, _GridWithDropContainerMixin, _FocusableMixin], {\r\n        // module:\r\n        //      epi-ecf-ui/contentediting/editors/commercemediacollectioneditor\r\n        // summary:\r\n        //      Editor widget for commerce media assets\r\n\r\n        resources: res,\r\n\r\n        _noDataMessage: '<span><span class=\"dijitReset dijitInline\">' + res.nodatamessage + '</span></span>',\r\n\r\n        // itemModelType: Function\r\n        //      Item Model constructor.\r\n        itemModelType: CommerceMediaItemModel,\r\n\r\n        modelType: CommerceMediaCollectionEditorModel,\r\n\r\n        //  defaultAssetGroupName: string\r\n        //      Value provided from server that specifies a default group name for assets.\r\n        defaultAssetGroupName: null,\r\n\r\n        // Set autofocus to false to prevent the validate the require fields when opening dialog.\r\n        dialogParams: { autofocus: false },\r\n\r\n        _setupGrid: function () {\r\n            // summary:\r\n            //      Set up the grid.\r\n            // tags:\r\n            //      protected\r\n\r\n            this.inherited(arguments);\r\n            domClass.add(this.gridNode, \"epi-plain-grid--margin-bottom epi-plain-grid--cell-borders\");\r\n            this.model.defaultAssetGroupName = this.defaultAssetGroupName;\r\n            this._settingReadOnlyState();\r\n        },\r\n\r\n        postCreate: function () {\r\n            // summary:\r\n            //      Post create initialization.\r\n            // description:\r\n            //      Setup related components.\r\n            // tags:\r\n            //      protected\r\n\r\n            this.gridSettings.cellNavigation = false;\r\n\r\n            this.inherited(arguments);\r\n\r\n            domClass.add(this.domNode, \"epi-media-collection\");\r\n        },\r\n\r\n        // Override CollectionEditor.onDndDrop to call this.grid.focus() instead of this.onFocus(), to fix the issue where onBlur event does not fire when\r\n        // the Editor lost focus.\r\n        // TODO remove this function after bug 121239 is fixed.\r\n        onDndDrop: function (dndData, source, nodes, copy) {\r\n            var i;\r\n\r\n            // internal move\r\n            if (this.grid.dndSource === source) {\r\n                this.inherited(arguments);\r\n            } else { // external drop\r\n                // Set focus to mark start editing\r\n                // make sure editor will be marked as start-editing immediately by invoking onDropping\r\n                // to fix an issue in IE9, which was caused by the race condition,\r\n                // which would lead to a problem of auto save.\r\n                this.onDropping && this.onDropping();\r\n                this.grid.focus();\r\n\r\n                for (i = 0; i < dndData.length; i++) {\r\n                    this._addItem(dndData[i]);\r\n\r\n                    // Remove from source?\r\n                    // TODO: Simplify\r\n                    if (source && source.grid && source.grid.consumer && source.grid.consumer !== this) {\r\n                        source.grid.consumer.model.removeItem(this.grid.dndSource.getItem(nodes[i].id).data);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _settingReadOnlyState: function () {\r\n            if (this.readOnly) {\r\n                // For dnd\r\n                domStyle.set(this.dropContainer, \"display\", \"none\");\r\n                domClass.remove(this.overlayDnd, this.gridOverlayClass);\r\n\r\n                // For grid\r\n                this.grid.set(\"selectionMode\", \"none\");\r\n                this.allowedDndTypes = [];\r\n                this.gridSettings.dndDisabled = true;\r\n                this.model.availableCommands = 0;\r\n            }\r\n        },\r\n\r\n        _getDialogTitleText: function(existingItem){\r\n            return !existingItem ? res.addlabel : res.editlabel;\r\n        },\r\n\r\n        _getGridDefinition: function () {\r\n            // summary:\r\n            //      Returns grid's columns definition.\r\n            // tags:\r\n            //      private\r\n\r\n            var columns = this.generateColumns ?\r\n                this.model.generateColumnsDefinition(this.excludedColumns) : // If auto generate is on, ask model to compute columns definition.\r\n                this.includedColumns || {}; // Otherwise, use configured ones.\r\n\r\n            if (this.readOnly)\r\n            {\r\n                for (var columnName in columns) {\r\n                    lang.setObject(\"sortable\", false, columns[columnName]);\r\n                }\r\n            }\r\n\r\n            return this.model.generateFormatters(columns);\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\ContentReferenceListEditor.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/editors/ContentReferenceListEditor' is an internal Episerver module and can have a breaking change in any release.",
                "line": 8,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/editors/ContentReferenceListEditor\",",
                "endLine": 8,
                "endColumn": 64
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/aspect\",\r\n\r\n    // epi-cms\r\n    \"epi/shell/widget/dialog/Alert\",\r\n    \"epi-cms/contentediting/editors/ContentReferenceListEditor\",\r\n\r\n    // epi commerce\r\n    \"./model/ContentReferenceListEditorModel\",\r\n\r\n    // resources\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.contentreferencelisteditor\"\r\n],\r\nfunction (\r\n    //dojo\r\n    declare,\r\n    aspect,\r\n\r\n    // epi-cms\r\n    Alert,\r\n    BaseContentReferenceListEditor,\r\n\r\n    // epi commerce\r\n    ContentReferenceListEditorModel,\r\n\r\n    // resources\r\n    resources\r\n) {\r\n    return declare([BaseContentReferenceListEditor], {\r\n        // summary:\r\n        //      Represents the Content reference list editor in Commerce, which handles the Change context command as opening\r\n        //      the content edit in Edit mode.\r\n\r\n        postMixInProperties: function () {\r\n            // summary:\r\n            //      Called after the parameters to the widget have been read-in,\r\n            //      but before the widget template is instantiated.\r\n            // tags:\r\n            //      protected\r\n\r\n            this.model = this.model || new ContentReferenceListEditorModel();\r\n\r\n            this.inherited(arguments);\r\n\r\n            if (this.isDistinctList) {\r\n                this.own(\r\n                    aspect.around(this.model, \"addItems\", function (original) {\r\n\r\n                        return function (items, existingItemIndex, before) {\r\n                            // items: Array\r\n                            //      The items added.\r\n                            // existingItemIndex: Number\r\n                            //      The index of an existing item.\r\n                            // before: Boolean\r\n                            //      Indicates that the new item should be added before the existing item.\r\n\r\n                            var contentLink = items[0].contentLink;\r\n                            if (this.model.get(\"contentLinks\").indexOf(contentLink) === -1) {\r\n                                return original.apply(this.model, arguments);\r\n                            }\r\n                            else {\r\n                                this._showAlert();\r\n                            }\r\n                        }.bind(this);\r\n\r\n                    }.bind(this))\r\n                );\r\n            }\r\n        },\r\n\r\n        _showAlert: function () {\r\n            // summary:\r\n            //      Show alert message when add an item already exists in the list\r\n            // tags:\r\n            //      private\r\n\r\n            var dialog = new Alert({\r\n                heading: resources.dialog.heading,\r\n                description: resources.dialog.description\r\n            });\r\n\r\n            dialog.show();\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\DictionaryEditor.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/withConfirmation' is an internal Episerver module and can have a breaking change in any release.",
                "line": 13,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/withConfirmation\",",
                "endLine": 13,
                "endColumn": 41
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/aspect\",\r\n    \"dojo/string\",\r\n    \"dojo/when\",\r\n    // dojox\r\n    \"dojox/html/entities\",\r\n    // epi\r\n    \"epi/dependency\",\r\n    \"epi/shell/command/_Command\",\r\n    \"epi/shell/command/withConfirmation\",\r\n    \"epi/shell/widget/dialog/Dialog\",\r\n\r\n    // epi-ecf-ui\r\n    \"./_GridWithAddCommand\",\r\n    \"./DictionaryItemEditor\",\r\n    // resources\r\n    \"epi/i18n!epi/nls/commerce.widget.dictionaryadministration\",\r\n    \"epi/i18n!epi/nls/episerver.shared\"\r\n], function(\r\n    // dojo\r\n    declare,\r\n    lang,\r\n    aspect,\r\n    dojoString,\r\n    when,\r\n    // dojox\r\n    htmlEntities,\r\n    // epi\r\n    dependency,\r\n    _Command,\r\n    withConfirmation,\r\n    Dialog,\r\n    // epi-ecf-ui\r\n    _GridWithAddCommand,\r\n    DictionaryItemEditor,\r\n    // resources\r\n    resources,\r\n    sharedResources\r\n) {\r\n    return declare([_GridWithAddCommand], {\r\n\r\n        storeKey: \"epi.commerce.metadictionaryitem\",\r\n\r\n        dictionaryId: null,\r\n\r\n        dialogType: Dialog,\r\n\r\n        dialogContentType: DictionaryItemEditor,\r\n\r\n        _confirmationHandler: null,\r\n\r\n        resources: resources,\r\n\r\n        // _noDataMessage: string\r\n        //      String to notify that the grid content is empty.\r\n        _noDataMessage: null,\r\n\r\n        postCreate: function() {\r\n            this._noDataMessage = this._noDataMessage || '<span><span class=\"dijitReset dijitInline\">' + this.resources.nodatamessage + '</span></span>';\r\n            this.inherited(arguments);\r\n        },\r\n\r\n        getAddCommand: function() {\r\n            return new _Command({\r\n                iconClass: \"epi-iconPlus\",\r\n                canExecute: true,\r\n                _execute: function() {\r\n                    this._createAndShowDialog();\r\n                }.bind(this)\r\n            });\r\n        },\r\n\r\n        getDeleteCommand: function(object){\r\n            // summary:\r\n            //      Override to return correct delete command for rows in grid.\r\n            // tags:\r\n            //      protected\r\n\r\n            var command = new _Command({\r\n                iconClass: \"epi-iconClose\",\r\n                canExecute: true,\r\n                _execute: function () {\r\n                    return when(this.store.remove(object.id)).then(function () {\r\n                         this.grid.refresh();\r\n                    }.bind(this));\r\n                }.bind(this)\r\n            });\r\n            // make sure the input object is un-touched by creating a cloned object, then modify the name property.\r\n            var clonedObject = lang.clone(object);\r\n            clonedObject.name = htmlEntities.encode(clonedObject.name);\r\n            var dialogText = dojoString.substitute(this.resources.confirmationdescription, clonedObject);\r\n            if (object.isInUse) {\r\n                dialogText = dialogText + \"<br /><br />\" + this.resources.isinuse;\r\n            }\r\n            return withConfirmation(command, this._confirmationHandler, {\r\n                title: this.resources.confirmationtitle,\r\n                description: dialogText,\r\n                confirmActionText: this.resources.confirmationtext,\r\n                cancelActionText: sharedResources.action.cancel\r\n            });\r\n        },\r\n\r\n        getColumnTitle: function() {\r\n            return this.resources.values;\r\n        },\r\n\r\n        getItemId: function(item) {\r\n            return item.id;\r\n        },\r\n\r\n        getGridQuery: function() {\r\n            return {\r\n                id: this.dictionaryId\r\n            };\r\n        },\r\n\r\n        _createAndShowDialog: function() {\r\n            if (this._dialog) {\r\n                this._dialog.destroy();\r\n                this._dialog = null;\r\n            }\r\n            var addValueContent = new this.dialogContentType({\r\n                dictionaryId: this.dictionaryId\r\n            });\r\n\r\n            \r\n            var grid = this.grid;\r\n            this._dialog = new this.dialogType({\r\n                dialogClass: \"epi-dialog-confirm\",\r\n                defaultActionsVisible: true,\r\n                confirmActionText: sharedResources.action.add,\r\n                content: addValueContent,\r\n                title: this.resources.addtitle,\r\n                closeIconVisible: false,\r\n                validate: function () {\r\n                    return addValueContent.valueTextBox.validate();\r\n                }\r\n            });\r\n            this._dialog.own(aspect.after(this._dialog, \"onExecute\", function() {\r\n                when(addValueContent.saveToStore(), function() {\r\n                    grid.refresh();\r\n                });\r\n            }));\r\n            this.own(this._dialog);\r\n            this._dialog.show();\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\DictionaryItemEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\HelpTextSpinner.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\InventoryCollectionReadOnlyEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\InventoryOverviewEditor.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/dgrid/_EditorMetadataMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 17,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/dgrid/_EditorMetadataMixin\",",
                "endLine": 17,
                "endColumn": 43
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "define([\r\n// Dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/aspect\",\r\n    \"dojo/dom-construct\",\r\n    \"dojo/when\",\r\n\r\n    // DGrid\r\n    \"dgrid/OnDemandGrid\",\r\n    \"dgrid/Selection\",\r\n    \"dgrid/selector\",\r\n    \"dgrid/extensions/ColumnResizer\",\r\n    \"dgrid/editor\",\r\n\r\n    // EPi\r\n    \"epi/shell/dgrid/_EditorMetadataMixin\",\r\n    \"epi/shell/dgrid/Formatter\",\r\n    \"epi/shell/widget/CheckBox\",\r\n\r\n    //epi-CMS\r\n    \"epi-cms/dgrid/WithContextMenu\",\r\n    \"epi-cms/dgrid/formatters\",\r\n\r\n    // epi commerce\r\n    \"./_OverviewEditorBase\",\r\n    \"../viewmodel/InventoryOverviewEditorModel\",\r\n\r\n    //resources\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.inventoryoverview.grid\",\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.inventorycollection.message\"\r\n],\r\nfunction (\r\n    // Dojo\r\n    array,\r\n    declare,\r\n    aspect,\r\n    domConstruct,\r\n    when,\r\n\r\n    // DGrid\r\n    OnDemandGrid,\r\n    Selection,\r\n    selector,\r\n    ColumnResizer,\r\n    editor,\r\n\r\n    // EPi\r\n    _EditorMetadataMixin,\r\n    Formatter,\r\n    Checkbox,\r\n\r\n    //epi-CMS\r\n    WithContextMenu,\r\n    formatters,\r\n\r\n    // epi commerce\r\n    _OverviewEditorBase,\r\n    InventoryOverviewEditorModel,\r\n\r\n    // Resources\r\n    resources,\r\n    messageResources\r\n) {\r\n    return declare([_OverviewEditorBase], {\r\n\r\n        grid: null,\r\n\r\n        modelType: InventoryOverviewEditorModel,\r\n\r\n        itemType: \"EPiServer.Commerce.Shell.ObjectEditing.InternalMetadata.InventoryRecordModel\",\r\n\r\n        activeEditor: null,\r\n\r\n        includedColumns: [\"WarehouseCode\", \"CatalogEntryCode\", \"IsTracked\", \"PurchaseAvailabeQuantity\", \"PurchaseAvailableUtc\", \"BackorderAvailableQuantity\", \"BackorderAvailableUtc\", \"PreorderQuantity\", \"PreorderAvailableUtc\", \"ReorderMinQuantity\"],\r\n\r\n        editableColumns: [\"IsTracked\", \"PurchaseAvailabeQuantity\", \"PurchaseAvailableUtc\", \"BackorderAvailableQuantity\", \"BackorderAvailableUtc\", \"PreorderQuantity\", \"PreorderAvailableUtc\", \"ReorderMinQuantity\"],\r\n\r\n        additionalEditorGridSettings: null,\r\n\r\n        editorGrid: null,\r\n\r\n        storeKey: \"epi.commerce.inventory\",\r\n\r\n        title: resources.commands.title,\r\n\r\n        _noDataMessage: resources.nodatamessage,\r\n\r\n        postMixInProperties: function () {\r\n            this.model = this.model || new this.modelType({\r\n                itemType: this.itemType\r\n            });\r\n        },\r\n\r\n        postCreate: function () {\r\n            // Set up metadata capable grid type\r\n            this.editorGrid = declare([OnDemandGrid, Selection, Formatter, _EditorMetadataMixin, ColumnResizer, WithContextMenu]);\r\n            this.additionalEditorGridSettings = { getBeforePut: false, sort: [\"WarehouseCode\"] };\r\n            \r\n            this.inherited(arguments);\r\n        },\r\n\r\n        _setupEvents: function (grid) {\r\n            this.own(grid,\r\n                grid.on(\"dgrid-editor-show\", function (e) {\r\n                    this.activeEditor = e.editor;\r\n                    this._showEditorInPopup(e);\r\n                }.bind(this)),\r\n                grid.on(\"dgrid-datachange\", function (e) {\r\n                    //invalid value will result in no changes to the inventory row.\r\n                    if (this.activeEditor && this.activeEditor.isValid && !this.activeEditor.isValid()) {\r\n                        e.preventDefault();\r\n                    }\r\n                }.bind(this)),\r\n                grid.on(\".epi-iconContextMenu:click\", this.onContextMenuClick.bind(this)),\r\n                this.model.watch(\"contentLink\", this._changeGridQuery.bind(this)),\r\n                this.model.on(\"itemAdded\", grid.refresh.bind(grid)),\r\n                this.model.on(\"itemsRemoved\", grid.refresh.bind(grid)),\r\n                // Listen remove command event\r\n                this.model.on(\"removeCommandEvent\", function() {\r\n                    // Show confirmation dialog to confirm delete inventory item\r\n                    when(this._showConfirmation(resources.deleteconfirmation.inventorytitle, resources.deleteconfirmation.inventorydescription), function () {\r\n                        if (this.model) {\r\n                            return this.model.removeItems([this.selectedRecord]);\r\n                        }\r\n                    }.bind(this));\r\n                }.bind(this))\r\n            );\r\n        },\r\n\r\n        _showEditorInPopup: function (e) {\r\n            //we're wrapping the editor in a div to give it a popup styling.\r\n            var popupElement = domConstruct.create(\"div\", { \"class\": \"epi-dgrid-popup\" }, e.cell.element, \"last\");\r\n            var editorWrapper = domConstruct.create(\"div\", { \"class\": \"epi-dgrid-popup__content\" }, popupElement, \"last\");\r\n\r\n            domConstruct.place(e.editor.domNode, editorWrapper);\r\n\r\n            if (e.editor instanceof (Checkbox)) {\r\n                var labelNode = '<label style=\"margin:10px;\" for=\"' + e.editor.checkbox.get(\"id\") + '\">' + e.editor.get(\"label\") + '</label>';\r\n                domConstruct.place(labelNode, editorWrapper);\r\n            }\r\n\r\n            domConstruct.place(this.currentEditorHtmlValue, e.cell.element, \"first\");\r\n\r\n            // reset the editor's content box so when FormContainer do the layout, it will resize\r\n            // its children based on their actual size, not the specific one, which has the incorrect value.\r\n            e.editor._contentBox = null;\r\n\r\n            var beforeBlurHandle = aspect.before(e.editor, \"onBlur\", function () {\r\n                //we need to move the editor back to the grid before \"blur\"\r\n                //so that the dgrid/editor plugin can do its save/\"hide editor\" magic\r\n\r\n                //move the editor to a temporary div first to prevent issues in IE\r\n                //when we move the editors domNode as the only child to e.cell.element\r\n                var tempDiv = domConstruct.create(\"div\");\r\n                domConstruct.place(e.editor.domNode, tempDiv);\r\n                //then move it as the only child to the element we're editing.\r\n                domConstruct.place(e.editor.domNode, e.cell.element, \"only\");\r\n                beforeBlurHandle.remove();\r\n            });\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\LinkEditEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\LinkEditorDndMixin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\model\\CommerceMediaCollectionEditorModel.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/DelegateCommand' is an internal Episerver module and can have a breaking change in any release.",
                "line": 6,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/DelegateCommand\",",
                "endLine": 6,
                "endColumn": 40
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/editors/model/CollectionEditorModel' is an internal Episerver module and can have a breaking change in any release.",
                "line": 7,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/editors/model/CollectionEditorModel\",",
                "endLine": 7,
                "endColumn": 65
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/Deferred\",\r\n    // epi\r\n    \"epi/shell/command/DelegateCommand\",\r\n    \"epi-cms/contentediting/editors/model/CollectionEditorModel\",\r\n    \"epi-cms/dgrid/formatters\",\r\n    // Resources\r\n    \"epi/i18n!epi/cms/nls/commerce.contentediting.editors.commercemediacollectioneditor\"\r\n], function (\r\n    array,\r\n    declare,\r\n    Deferred,\r\n     // epi\r\n    DelegateCommand,\r\n    CollectionEditorModel,\r\n    formatters,\r\n    // Resources\r\n    res\r\n) {\r\n    return declare([CollectionEditorModel], {\r\n\r\n        addItem: function (item, refItem, before) {\r\n            // summary:\r\n            //      Add new item.\r\n            // item: Object\r\n            //      The item raw data\r\n            // refItem: Object\r\n            //      The reference item (item model instance)\r\n            // before: Boolean\r\n            //      Indicates that the new item should be added before the reference item.\r\n            // tags:\r\n            //      public override\r\n            item.groupName = item.groupName || this.defaultAssetGroupName;\r\n            var items = this.get(\"items\");\r\n            if (!items || items.length < 1) {\r\n                return this.inherited(arguments);\r\n            }\r\n\r\n            // check if adding item is existed, to move it to top\r\n            // instead of adding duplicated item.\r\n            var itemIdentifier = item.permanentUrl || item.assetKey;\r\n            var existingItem;\r\n            array.some(items, function (oldItem) {\r\n                if (oldItem && oldItem.assetKey === itemIdentifier) {\r\n                    existingItem = oldItem;\r\n                    return true;\r\n                }\r\n            });\r\n            if (existingItem) {\r\n                var def = new Deferred();\r\n                this.moveItem(existingItem, refItem || existingItem, before || true);\r\n                def.resolve();\r\n                return def;\r\n            } else {\r\n                return this.inherited(arguments);\r\n            }\r\n        },\r\n\r\n        saveItem: function (item, index) {\r\n            // summary:\r\n            //      Save an item.\r\n            // item: Object\r\n            //      The item raw data\r\n            // index: Number\r\n            //      The item index\r\n            // tags:\r\n            //      public override\r\n\r\n            var items = this.get(\"items\");\r\n            if (!items || items.length < 1) {\r\n                return this.inherited(arguments);\r\n            }\r\n\r\n            // Don't save if there already is an item with this key.\r\n            var itemExists;\r\n            var currentIndex = 0;\r\n            var itemIdentifier = item.permanentUrl || item.assetKey;\r\n            array.some(items, function (oldItem) {\r\n                if (oldItem && oldItem.assetKey === itemIdentifier && currentIndex !== index) {\r\n                    itemExists = true;\r\n                    return true;\r\n                }\r\n                currentIndex++;\r\n            });\r\n\r\n            if (!itemExists) {\r\n                return this.inherited(arguments);\r\n            }\r\n        },\r\n\r\n        getListCommands: function (availableCommands) {\r\n            // summary:\r\n            //      get list commands from avaible commands\r\n            // tags:\r\n            //      public override\r\n            return [\r\n                new DelegateCommand({\r\n                    name: \"add\",\r\n                    label: res.addlabel,\r\n                    iconClass: \"epi-iconPlus\",\r\n                    canExecute: true,\r\n                    isAvailable: true,\r\n                    delegate: this.addItemDelegate.bind(this)\r\n                })\r\n            ];\r\n        },\r\n\r\n        generateFormatters: function (columnDefinitions) {\r\n            // summary:\r\n            //      Generate formatters for the specified column definitions.\r\n            // columnDefinitions:\r\n            //      The definition for the columns that should get the generated formatters.\r\n            // tags:\r\n            //      public override\r\n\r\n            var thumbnailFormatter = function (value) {\r\n                return [formatters.thumbnail(value)];\r\n            };\r\n\r\n            for (var columnName in columnDefinitions) {\r\n                if (columnDefinitions[columnName].isThumbnail) {\r\n                    columnDefinitions[columnName].formatter = thumbnailFormatter;\r\n\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            return columnDefinitions;\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\model\\ContentReferenceListEditorModel.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/editors/model/ContentReferenceListEditorModel' is an internal Episerver module and can have a breaking change in any release.",
                "line": 8,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/editors/model/ContentReferenceListEditorModel\",",
                "endLine": 8,
                "endColumn": 75
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n\r\n    // epi-cms\r\n    \"epi-cms/component/command/ChangeContext\",\r\n    \"epi-cms/contentediting/editors/model/ContentReferenceListEditorModel\",\r\n    \"epi-cms/contentediting/ContentActionSupport\",\r\n\r\n    // epi-ecf-ui\r\n    \"../../../command/NavigateToEditPage\"\r\n],\r\nfunction (\r\n    //dojo\r\n    array,\r\n    declare,\r\n\r\n    // epi-cms\r\n    ChangeContextCommand,\r\n    BaseContentReferenceListEditorModel,\r\n    ContentActionSupport,\r\n\r\n    // epi-ecf-ui\r\n    NavigateToEditPageCommand\r\n) {\r\n    return declare([BaseContentReferenceListEditorModel], {\r\n        // summary:\r\n        //      Represents the Content reference list editor model in Commerce, which handles the Change context command as opening\r\n        //      the content edit in Edit mode.\r\n\r\n        navigateOnEdit: true,\r\n\r\n        _navigateToEditPageCommand: null,\r\n\r\n        postscript: function () {\r\n            // summary:\r\n            //      Mix constructor arguments into the object after construction.\r\n            // tags:\r\n            //      protected\r\n\r\n            this._navigateToEditPageCommand = new NavigateToEditPageCommand({\r\n                category: \"menuWithSeparator\"\r\n            });\r\n            this.inherited(arguments);\r\n\r\n            if (this.get(\"navigateOnEdit\")) {\r\n                array.some(this.commands, function (command, index) {\r\n                    if (command.isInstanceOf(ChangeContextCommand)) {\r\n                        this.commands[index] = this._navigateToEditPageCommand;\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }, this);\r\n            }\r\n        },\r\n\r\n        navigateToItem: function (item) {\r\n            // summary:\r\n            //      Navigate to the item edit page.\r\n            // tags:\r\n            //      public\r\n\r\n            if (!this.get(\"navigateOnEdit\")) {\r\n                this.inherited(arguments);\r\n                return;\r\n            }\r\n\r\n            if (!ContentActionSupport.hasAccess(item.accessMask, ContentActionSupport.accessLevel.Read)) {\r\n                return;\r\n            }\r\n            this._navigateToEditPageCommand.execute();\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\MonetaryRewardEditor.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_FocusableMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 13,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_FocusableMixin\",",
                "endLine": 13,
                "endColumn": 39
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/dom-style\",\r\n    \"dojo/keys\",\r\n// dijit\r\n    \"dijit/_WidgetBase\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/form/NumberSpinner\",\r\n    \"dijit/form/RadioButton\",\r\n// epi\r\n    \"epi/shell/widget/_FocusableMixin\",\r\n// epi-ecf-ui\r\n    \"./MoneyListEditor\",\r\n// template\r\n    \"dojo/text!./templates/MonetaryRewardEditor.html\",\r\n// resources\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.monetaryreward\"\r\n], function (\r\n// dojo\r\n    declare,\r\n    domStyle,\r\n    keys,\r\n// dijit\r\n    _WidgetBase,\r\n    _WidgetsInTemplateMixin,\r\n    _TemplatedMixin,\r\n    NumberSpinner,\r\n    RadioButton,\r\n// epi\r\n    _FocusableMixin,\r\n// epi-ecf-ui\r\n    MoneyListEditor,\r\n// template\r\n    template,\r\n// resources\r\n    resources\r\n) {\r\n    return declare([_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, _FocusableMixin], {\r\n        // summary:\r\n        //      The editor used when editing an instance of EPiServer.Commerce.Marketing.MonetaryReward\r\n        // tags:\r\n        //      internal\r\n\r\n        templateString: template,\r\n\r\n        resources: resources,\r\n\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n            this.own(\r\n                this.moneyList.on(\"change\", this._onChangeCallback.bind(this)),\r\n                this.percentage.on(\"change\", this._onChangeCallback.bind(this)),\r\n                this.useAmounts.on(\"change\", this._useAmountsChanged.bind(this)),\r\n                this.percentage.on(\"keydown\", this._onPercentageKeyDown.bind(this))\r\n            );\r\n        },\r\n\r\n        _onChangeCallback: function () {\r\n            this.onChange(this.get(\"value\"));\r\n        },\r\n\r\n        _useAmountsChanged: function (newValue) {\r\n            domStyle.set(this.moneyListContainer, \"display\", newValue ? \"\" : \"none\");\r\n            domStyle.set(this.percentageContainer, \"display\", newValue ? \"none\" : \"\");\r\n\r\n            this.percentage.set(\"required\", !newValue);\r\n            this._onChangeCallback();\r\n        },\r\n\r\n        _onPercentageKeyDown: function(event){\r\n            if (event.keyCode === keys.ENTER) {\r\n                // Hitting the ENTER key should enable\r\n                // any existing save button on the parent form.\r\n                this.percentage.set(\"value\", this.percentage.get(\"value\"));\r\n            }\r\n        },\r\n\r\n        _setValueAttr: function (value) {\r\n            this.moneyList.set(\"value\", value.amounts);\r\n            this.percentage.set(\"value\", value.percentage);\r\n            this.useAmounts.set(\"checked\", value.useAmounts);\r\n            this.usePercentage.set(\"checked\", !value.useAmounts);\r\n        },\r\n\r\n        _getValueAttr: function () {\r\n            var useAmounts = this.useAmounts.get(\"checked\");\r\n\r\n            if (useAmounts) {\r\n                return {\r\n                    amounts: this.moneyList.get(\"value\"),\r\n                    useAmounts: useAmounts\r\n                };\r\n            }\r\n\r\n            return {\r\n                percentage: this.percentage.get(\"value\"),\r\n                useAmounts: useAmounts\r\n            };\r\n        },\r\n\r\n        isValid: function () {\r\n            return this.useAmounts.get(\"checked\") ? this.moneyList.isValid() : this.percentage.isValid();\r\n        },\r\n\r\n        onChange: function (value) {\r\n            // summary:\r\n            //    Fired when value is changed.\r\n            // tags:\r\n            //    public, callback\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\MoneyEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\MoneyListEditor.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/dgrid/Focusable' is an internal Episerver module and can have a breaking change in any release.",
                "line": 22,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/dgrid/Focusable\",",
                "endLine": 22,
                "endColumn": 32
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_FocusableMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 23,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_FocusableMixin\",",
                "endLine": 23,
                "endColumn": 39
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/aspect\",\r\n    \"dojo/currency\",\r\n    \"dojo/keys\",\r\n    \"dojo/store/Memory\",\r\n    \"dojo/string\",\r\n// dijit\r\n    \"dijit/_KeyNavContainer\",\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_WidgetBase\",\r\n    \"dijit/form/_FormValueMixin\",\r\n    \"dijit/form/CurrencyTextBox\",\r\n// dgrid\r\n    \"dgrid/_StoreMixin\",\r\n    \"dgrid/Grid\",\r\n    \"dgrid/editor\",\r\n    \"dgrid/extensions/DijitRegistry\",\r\n// epi\r\n    \"epi/shell/dgrid/Focusable\",\r\n    \"epi/shell/widget/_FocusableMixin\",\r\n// epi-ecf-ui\r\n    \"./AmountEditor\",\r\n// put\r\n     \"put-selector/put\",\r\n// resources\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.moneylisteditor\"\r\n], function (\r\n// dojo\r\n    array,\r\n    declare,\r\n    aspect,\r\n    currency,\r\n    keys,\r\n    Memory,\r\n    string,\r\n// dijit\r\n    _KeyNavContainer,\r\n    _TemplatedMixin,\r\n    _WidgetBase,\r\n    _FormValueMixin,\r\n    CurrencyTextBox,\r\n// dgrid\r\n    _StoreMixin,\r\n    Grid,\r\n    editor,\r\n    DijitRegistry,\r\n// epi\r\n    Focusable,\r\n    _FocusableMixin,\r\n// epi-ecf-ui\r\n    AmountEditor,\r\n// put\r\n    put,\r\n// resources\r\n    resources\r\n) {\r\n\r\n    var MoneyListGrid = declare([Grid, _StoreMixin, DijitRegistry, Focusable], {\r\n        // summary:\r\n        //      dgrid mixin which implements the refresh method to\r\n        //      always perform a single query with no start or count\r\n        //      specified, to retrieve all relevant results at once.\r\n        //      Appropriate for grids using memory stores with small\r\n        //      result set sizes.\r\n        //\r\n        //      based on http://dgrid.io/tutorials/0.3/single_query/\r\n        // tags:\r\n        //      internal\r\n\r\n        refresh: function () {\r\n            var self = this;\r\n\r\n            // First defer to List#refresh to clear the grid's\r\n            // previous content.\r\n            this.inherited(arguments);\r\n\r\n            if (!this.store) {\r\n                return;\r\n            }\r\n            return this._trackError(function () {\r\n                var queryOptions = self.get('queryOptions'),\r\n                    results = self.store.query(\r\n                        self.query, queryOptions);\r\n\r\n                return self.renderArray(\r\n                    results, null, queryOptions);\r\n            });\r\n        },\r\n\r\n        renderArray: function () {\r\n            var rows = this.inherited(arguments);\r\n            // This will ensure that the noDataMessage is added\r\n            // without the need to call refresh on the grid.\r\n            if (rows && rows.length === 0) {\r\n                this.noDataNode = put(this.contentNode, \"div.dgrid-no-data\");\r\n                this.noDataNode.innerHTML = this.noDataMessage;\r\n            }\r\n            // Clear _lastCollection which is ordinarily only used for\r\n            // store-less grids.\r\n            this._lastCollection = null;\r\n\r\n            return rows;\r\n        }\r\n    });\r\n\r\n    return declare([_WidgetBase, _TemplatedMixin, _FocusableMixin, _FormValueMixin, _KeyNavContainer], {\r\n        // summary:\r\n        //      A widget used to edit a list of Money.\r\n        // tags:\r\n        //      internal\r\n\r\n        templateString: '<div class=\"dijitInline\"><div data-dojo-attach-point=\"gridNode,focusNode\"></div></div>',\r\n\r\n        grid: null,\r\n\r\n        value: null,\r\n\r\n        _valueStore: null,\r\n\r\n        // tabIndex: String\r\n        //      We set tabIndex to -1 so that tabbing moves focus to the inputs in the grid.\r\n        tabIndex: \"-1\",\r\n\r\n        // Override _FormWidgetMixin mapping id to this.focusNode since focus node is also a widget\r\n        // and changing its id will break widget destruction.\r\n        _setIdAttr: \"domNode\",\r\n\r\n        _amountEditors: [],\r\n\r\n        postMixInProperties: function () {\r\n            this.inherited(arguments);\r\n            this._valueStore = this._valueStore || new Memory({ idProperty: \"currency\" });\r\n        },\r\n\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n            this._setupGrid();\r\n        },\r\n\r\n        _getAmountEditorId: function (currencyCode) {\r\n            return string.substitute(\"${id}_${currencyCode}_editor\", { id: this.id, currencyCode: currencyCode });\r\n        },\r\n\r\n        _createAmountColumn: function () {\r\n            if (this.readOnly) {\r\n                return {\r\n                    label: resources.amount,\r\n                    sortable: false,\r\n                    className: \"epi-grid--50\",\r\n                    readOnly: true,\r\n                    formatter: this._amountFormatter\r\n                };\r\n            } else {\r\n                return editor({\r\n                    label: resources.amount,\r\n                    sortable: false,\r\n                    editor: AmountEditor,\r\n                    autoSave: true,\r\n                    canEdit: function (object, value) {\r\n                        this._currency = object.currency;\r\n                        return true;\r\n                    },\r\n                    editorArgs: function (column) {\r\n                        return {\r\n                            id: this._getAmountEditorId(column._currency),\r\n                            className: \"epi-grid-column--right dijitInputInner\",\r\n                            currency: column._currency\r\n                        };\r\n                    }.bind(this),\r\n                    className: \"epi-grid--50 epi-dgrid--editable\"\r\n                });\r\n            }\r\n        },\r\n\r\n        _setupGrid: function () {\r\n            var columns = {\r\n                currency: {\r\n                    label: resources.currency,\r\n                    sortable: false,\r\n                    className: \"epi-grid--50\",\r\n                    formatter: function (value) {\r\n                        return string.substitute(\"<label for=\\\"${id}\\\">${currencyCode}</label>\", { id: this._getAmountEditorId(value), currencyCode: value });\r\n                    }.bind(this)\r\n                },\r\n                amount: this._createAmountColumn()\r\n            };\r\n\r\n            this.grid = new MoneyListGrid({\r\n                store: this._valueStore,\r\n                selectionMode: \"none\",\r\n                noDataMessage: resources.nodatamessage,\r\n                className: \"epi-plain-grid epi-grid--with-border epi-grid-height--auto epi-money-grid\",\r\n                columns: columns\r\n            }, this.gridNode);\r\n\r\n            this.own(\r\n                this.grid,\r\n                aspect.after(this.grid, \"save\", function () {\r\n                    if (this.isValid()) {\r\n                        // By calling onChange after save we will report correct values\r\n                        // when tabbing between inputs inside the editor.\r\n                        this.onChange(this.get(\"value\"));\r\n                    }\r\n                }.bind(this))\r\n            );\r\n\r\n            this.grid.set(\"query\", {});\r\n        },\r\n\r\n        _amountFormatter: function (amount) {\r\n            var displayText = resources.undefinedamount;\r\n            if (amount) {\r\n                displayText = currency.format(amount);\r\n            }\r\n            return displayText;\r\n        },\r\n\r\n        _collectAmountEditors: function () {\r\n            // summary:\r\n            // Collect all amount editors in the grid\r\n            // tags:\r\n            //    private\r\n            if (!this.grid) {\r\n                return;\r\n            }\r\n\r\n            this._amountEditors.length = 0;\r\n            array.forEach(this._valueStore.data, function (money) {\r\n                var cell = this.grid.cell(money.currency, \"amount\");\r\n                if (cell && cell.element) {\r\n                    var editor = cell.element.widget;\r\n                    if (editor) {\r\n                        this._amountEditors.push(editor);\r\n                    }\r\n                }\r\n            }, this);\r\n\r\n        },\r\n\r\n        _setValueAttr: function (value) {\r\n            if (value) {\r\n                this._valueStore.setData(value);\r\n            }\r\n            if (this.grid) {\r\n                this.grid.refresh();\r\n                this._collectAmountEditors();\r\n            }\r\n        },\r\n\r\n        _getValueAttr: function () {\r\n            if (!this._valueStore.data.length) {\r\n                return null;\r\n            }\r\n            var newCurrencyValues = this.grid.dirty;\r\n            for (var currencyId in newCurrencyValues) {\r\n                // If we have any dirty data in the grid we need to update it on the store data\r\n                // immediately and not wait for any timeouts set by other widgets or modules.\r\n                // This enables the correct values to be returned when the entire widget is blurred.\r\n                this._updateCurrencyAmountValue(currencyId, newCurrencyValues[currencyId]);\r\n            }\r\n            return this._valueStore.data;\r\n        },\r\n\r\n        _updateCurrencyAmountValue: function (currencyId, newCurrencyValue) {\r\n            var currencyAmount = this._valueStore.get(currencyId);\r\n            if (currencyAmount) {\r\n                currencyAmount.amount = newCurrencyValue.amount;\r\n                this._valueStore.put(currencyAmount);\r\n            }\r\n        },\r\n\r\n        onChange: function (value) {\r\n            // summary:\r\n            //    Fired when value is changed.\r\n            // tags:\r\n            //    public, callback\r\n        },\r\n\r\n        destroy: function () {\r\n            this.inherited(arguments);\r\n\r\n            this._amountEditors.length = 0;\r\n        },\r\n\r\n        isValid: function () {\r\n            // summary:\r\n            // Editor is valid when and only when all child widgets are valid.\r\n            // tags:\r\n            //    public\r\n            return !array.some(this._amountEditors, function (widget) {\r\n                return !widget.isValid();\r\n            });\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\NullableDateTimeEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\PackageEntryCollectionEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\PackageEntryCollectionReadOnlyEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\ParentEntriesCollectionReadOnlyEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\PriceCollectionReadOnlyEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\PricingOverviewEditor.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/dgrid/_EditorMetadataMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 18,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/dgrid/_EditorMetadataMixin\",",
                "endLine": 18,
                "endColumn": 43
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "define([\r\n// Dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/aspect\",\r\n    \"dojo/dom-construct\",\r\n    \"dojo/when\",\r\n\r\n    // DGrid\r\n    \"dgrid/OnDemandGrid\",\r\n    \"dgrid/Selection\",\r\n    \"dgrid/selector\",\r\n    \"dgrid/extensions/ColumnResizer\",\r\n\r\n    // EPi\r\n    \"epi/dependency\",\r\n    \"epi/shell/dgrid/_EditorMetadataMixin\",\r\n\r\n    //epi-CMS\r\n    \"epi-cms/dgrid/WithContextMenu\",\r\n    \"epi-cms/dgrid/formatters\",\r\n\r\n    // epi commerce\r\n    \"./_OverviewEditorBase\",\r\n    \"../viewmodel/PricingOverviewEditorModel\",\r\n    \"./SaleCodeEditor\",\r\n    \"./MoneyEditor\",\r\n\r\n    //resources\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.pricingoverview.grid\",\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.pricecollection.message\"\r\n],\r\nfunction (\r\n    // Dojo\r\n    array,\r\n    declare,\r\n    lang,\r\n    aspect,\r\n    domConstruct,\r\n    when,\r\n\r\n    // DGrid\r\n    OnDemandGrid,\r\n    Selection,\r\n    selector,\r\n    ColumnResizer,\r\n\r\n    // EPi\r\n    dependency,\r\n    _EditorMetadataMixin,\r\n\r\n    //epi-CMS\r\n    WithContextMenu,\r\n    formatters,\r\n\r\n    // epi commerce\r\n    _OverviewEditorBase,\r\n    PricingOverviewEditorModel,\r\n    SaleCodeEditor,\r\n    MoneyEditor,\r\n\r\n    // Resources\r\n    resources,\r\n    messageResources\r\n) {\r\n    return declare([_OverviewEditorBase], {\r\n\r\n        grid: null,\r\n\r\n        modelType: PricingOverviewEditorModel,\r\n\r\n        itemType: \"EPiServer.Commerce.Shell.ObjectEditing.InternalMetadata.PriceModel\",\r\n\r\n        activeEditor: null,\r\n\r\n        includedColumns: [\"Name\", \"Code\", \"MarketId\", \"PriceType\", \"MinQuantity\", \"PriceCode\", \"UnitPrice\", \"ValidDate\"],\r\n\r\n        editableColumns: [\"PriceType\", \"MinQuantity\", \"PriceCode\", \"UnitPrice\", \"ValidDate\"],\r\n\r\n        editorGrid: null,\r\n\r\n        storeKey: \"epi.commerce.price\",\r\n\r\n        title: resources.commands.title,\r\n\r\n        _noDataMessage: resources.nodatamessage,\r\n\r\n        postMixInProperties: function () {\r\n            this.model = this.model || new this.modelType({\r\n                itemType: this.itemType\r\n            });\r\n        },\r\n\r\n        postCreate: function () {\r\n            // Set up metadata capable grid type\r\n            this.editorGrid = declare([OnDemandGrid, Selection, _EditorMetadataMixin, ColumnResizer, WithContextMenu], {\r\n\r\n                _filterProperties: function (properties, include) {\r\n                    // Summary:\r\n                    //      This is overridden to be able to handle rendering of complex type properties in\r\n                    //      the grid. In our case it is a DateTimeRange object.\r\n\r\n                    var result = this.inherited(arguments);\r\n                    array.some(result, function (property) {\r\n                        if (property.uiType === null && property.properties.length > 0) {\r\n                            //When we find a property without any ui type and it has properties\r\n                            //we know that we want to render it as a form.\r\n                            property.uiType = \"epi-ecf-ui/widget/NewPrice\";\r\n                            var metadataManager = this.metadataManager || dependency.resolve(\"epi.shell.MetadataManager\");\r\n                            property.settings = {\r\n                                metadata: metadataManager.getMetadataForType(property.modelType)\r\n                            };\r\n                            return true;\r\n                        }\r\n                    }, this);\r\n                    return result;\r\n                }\r\n            });\r\n\r\n            this._setMarkets();\r\n            this.inherited(arguments);\r\n        },\r\n\r\n        _setupEvents: function (grid) {\r\n            var customerPriceGroupType = 2;\r\n            this.own(grid,\r\n                grid.on(\"dgrid-editor-show\", function (e) {\r\n                    if (e.editor instanceof SaleCodeEditor) {\r\n                        //The salecode editor should be updated according to what priceType has been set\r\n                        e.editor.showDropDown(e.cell.row.data.priceType === customerPriceGroupType);\r\n                    } else if (e.editor instanceof MoneyEditor) {\r\n                        e.editor.setCurrencySelections(e.cell.row.data.marketId);\r\n                    }\r\n                    this.activeEditor = e.editor;\r\n                    this._showEditorInPopup(e);\r\n                }.bind(this)),\r\n                grid.on(\"dgrid-datachange\", function (e) {\r\n                    //invalid value / validation error will result in no changes to the price row\r\n                    if (this.activeEditor && this.activeEditor.isValid && !this.activeEditor.isValid()) {\r\n                        e.preventDefault();\r\n                    }\r\n                }.bind(this)),\r\n                grid.on(\".epi-iconContextMenu:click\", this.onContextMenuClick.bind(this)),\r\n                this.model.watch(\"contentLink\", this._changeGridQuery.bind(this)),\r\n                this.model.watch(\"priceCode\", this._changeGridQuery.bind(this)),\r\n                this.model.watch(\"marketId\", this._changeGridQuery.bind(this)),\r\n                this.model.on(\"itemAdded\", grid.refresh.bind(grid)),\r\n                this.model.on(\"itemsRemoved\", grid.refresh.bind(grid)),\r\n                // Listen remove command event\r\n                this.model.on(\"removeCommandEvent\", function () {\r\n                    // Show confirmation dialog to confirm delete price item\r\n                    when(this._showConfirmation(resources.deleteconfirmation.pricetitle, resources.deleteconfirmation.pricedescription), function () {\r\n                        if (this.model) {\r\n                            return this.model.removeItems([this.selectedRecord]);\r\n                        }\r\n                    }.bind(this));\r\n                }.bind(this)),\r\n                this.model.on(\"duplicateCommandEvent\", function () {\r\n                    if (this.selectedRecord && this.model) {\r\n                        // Clone the model and remove its ID so that JsonRest understands this is a new object\r\n                        // and not an attempt to update an existing object\r\n                        var clone = lang.clone(this.selectedRecord);\r\n                        delete clone.id;\r\n\r\n                        this.model.addItem(clone);\r\n                    }\r\n                }.bind(this))\r\n            );\r\n        },\r\n\r\n        _showEditorInPopup: function (e) {\r\n            //we're wrapping the editor in a div to give it a popup styling.\r\n            var popupElement = domConstruct.create(\"div\", { \"class\": \"epi-dgrid-popup\" }, e.cell.element, \"last\");\r\n            var editorWrapper = domConstruct.create(\"div\", { \"class\": \"epi-dgrid-popup__content\" }, popupElement, \"last\");\r\n            domConstruct.place(e.editor.domNode, editorWrapper);\r\n            domConstruct.place(this.currentEditorHtmlValue, e.cell.element, \"first\");\r\n\r\n            // reset the editor's content box so when FormContainer do the layout, it will resize\r\n            // its children based on their actual size, not the specific one, which has the incorrect value.\r\n            e.editor._contentBox = null;\r\n\r\n            var beforeBlurHandle = aspect.before(e.editor, \"onBlur\", function () {\r\n                //we need to move the editor back to the grid before \"blur\"\r\n                //so that the dgrid/editor plugin can do its save/\"hide editor\" magic\r\n\r\n                //move the editor to a temporary div first to prevent issues in IE\r\n                //when we move the editors domNode as the only child to e.cell.element\r\n                var tempDiv = domConstruct.create(\"div\");\r\n                domConstruct.place(e.editor.domNode, tempDiv);\r\n                //then move it as the only child to the element we're editing.\r\n                domConstruct.place(e.editor.domNode, e.cell.element, \"only\");\r\n                beforeBlurHandle.remove();\r\n            });\r\n        },\r\n\r\n        _setMarkets: function () {\r\n            if (!this.get(\"markets\")) {\r\n                var marketStore = dependency.resolve(\"epi.storeregistry\").get(\"epi.commerce.market\");\r\n                marketStore.query().then(function (marketList) {\r\n                    this.set(\"markets\", marketList);\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        _setMarketIdAttr: function (value) {\r\n            // summary:\r\n            //      Value setter.\r\n            // description:\r\n            //      Push value to the model to be its data.\r\n            //  tags:\r\n            //      private\r\n\r\n            this.model.set(\"marketId\", value);\r\n        },\r\n\r\n        _setPriceCodeAttr: function (value) {\r\n            // summary:\r\n            //      Value setter.\r\n            // description:\r\n            //      Push value to the model to be its data.\r\n            //  tags:\r\n            //      private\r\n\r\n            this.model.set(\"priceCode\", value);\r\n        },\r\n\r\n        addPrice: function (newPrice) {\r\n            // summary:\r\n            //      Add new price to the grid\r\n            // tags:\r\n            //      protected\r\n\r\n            // Set default value for marketId column\r\n            var markets = this.get(\"markets\");\r\n            if (!newPrice.marketId && markets && markets.length > 0) {\r\n                var defaultMarket = markets[0];\r\n                newPrice = lang.mixin(newPrice, {\r\n                    marketId: defaultMarket.id,\r\n                    currency: defaultMarket.currencies[0].value\r\n                });\r\n            }\r\n\r\n            // Insert new row in grid then edit\r\n            return this.model.addItem(newPrice);\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\PromotionScheduleEditor.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_FocusableMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 14,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_FocusableMixin\",",
                "endLine": 14,
                "endColumn": 39
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_ModelBindingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 15,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_ModelBindingMixin\",",
                "endLine": 15,
                "endColumn": 42
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/dom-style\",\r\n    \"dojo/string\",\r\n// dijit\r\n    \"dijit/form/RadioButton\",\r\n    \"dijit/_WidgetBase\",\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n// epi\r\n    \"epi/epi\",\r\n    \"epi/shell/widget/_FocusableMixin\",\r\n    \"epi/shell/widget/_ModelBindingMixin\",\r\n    \"epi/shell/widget/DateTimeSelectorDropDown\",\r\n// commerce\r\n    \"./../viewmodel/PromotionScheduleEditorViewModel\",\r\n// template\r\n    \"dojo/text!./templates/PromotionScheduleEditor.html\",\r\n// resources\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.promotionschedule\"\r\n], function (\r\n// dojo\r\n    declare,\r\n    lang,\r\n    domStyle,\r\n    string,\r\n// dijit\r\n    RadioButton,\r\n    _WidgetBase,\r\n    _TemplatedMixin,\r\n    _WidgetsInTemplateMixin,\r\n// epi\r\n    epi,\r\n    _FocusableMixin,\r\n    _ModelBindingMixin,\r\n    DateTimeSelectorDropDown,\r\n// commerce\r\n    PromotionScheduleEditorViewModel,\r\n// template\r\n    template,\r\n// resources\r\n    resources\r\n) {\r\n\r\n    return declare([_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, _ModelBindingMixin, _FocusableMixin], {\r\n        // module:\r\n        //  epi-ecf-ui/contentediting/editors/PromotionScheduleEditor\r\n        // summary:\r\n        //    Represents the widget to edit validUntil and validFrom.\r\n        // tags:\r\n        //    public\r\n\r\n        templateString: template,\r\n\r\n        modelType: PromotionScheduleEditorViewModel,\r\n\r\n        resources: resources,\r\n\r\n        modelBindingMap: {\r\n            \"useCampaignDate\": [\"useCampaignDate\"],\r\n            \"validFrom\": [\"validFrom\"],\r\n            \"validUntil\": [\"validUntil\"],\r\n            \"constraints\": [\"constraints\"],\r\n            \"campaignDateText\": [\"campaignDateText\"]\r\n        },\r\n\r\n        postMixInProperties: function () {\r\n            this.inherited(arguments);\r\n\r\n            if (!this.model && this.modelType) {\r\n                this.model = new this.modelType({ value: this.value });\r\n            }\r\n        },\r\n\r\n        buildRendering: function () {\r\n            this.inherited(arguments);\r\n\r\n            this._setRangeMessages();\r\n\r\n            this.own(\r\n                this.useCampaignDateButton.on(\"change\", function (value) {\r\n                    this.model.set(\"useCampaignDate\", value);\r\n                    this._raiseOnChange();\r\n                }.bind(this)),\r\n                this.validFromSelector.on(\"change\", function (value) {\r\n                    this.model.set(\"validFrom\", value);\r\n                    this._raiseOnChange();\r\n                }.bind(this)),\r\n                this.validUntilSelector.on(\"change\", function (value) {\r\n                    this.model.set(\"validUntil\", value);\r\n                    this._raiseOnChange();\r\n                }.bind(this))\r\n            );\r\n        },\r\n\r\n        _setRadioButtonState: function (value) {\r\n            this.useCampaignDateButton.set(\"checked\", value);\r\n            this.notUseCampaignDateButton.set(\"checked\", !value);\r\n        },\r\n\r\n        _setRangeMessages: function(){\r\n            var validFromRangeMessageAddition = string.substitute(resources.availablefromoutofrange, resources);\r\n            this.validFromSelector.set(\"rangeMessage\", string.substitute(resources.outofrange, { \r\n                prop: resources.availablefrom,\r\n                addition: validFromRangeMessageAddition\r\n            }));\r\n            var expiresOnRangeMessageAddition = string.substitute(resources.expiresonoutofrange, resources);\r\n            this.validUntilSelector.set(\"rangeMessage\", string.substitute(resources.outofrange, {\r\n                prop: resources.expireson,\r\n                addition: expiresOnRangeMessageAddition\r\n            }));\r\n        },\r\n\r\n        _setUseCampaignDateAttr: function (value) {\r\n            domStyle.set(this.validDateFields, \"display\", value ? \"none\" : \"\");\r\n\r\n            this._setRadioButtonState(value);\r\n\r\n            this.validUntilSelector.set(\"required\", !value);\r\n            this.validFromSelector.set(\"required\", !value);\r\n\r\n            // Set focus to date selectors to let selector show required warning.\r\n            if (!value) {\r\n                if (!this.validUntilSelector.isValid()) {\r\n                    this.validUntilSelector.focus();\r\n                }\r\n                if (!this.validFromSelector.isValid()) {\r\n                    this.validFromSelector.focus();\r\n                }\r\n            }\r\n        },\r\n\r\n        _setCampaignDateTextAttr: { node: \"labelUseCampaign\", type: \"innerText\" },\r\n            \r\n        _setValidFromAttr: function (value) {\r\n            this.validFromSelector.set(\"value\", value);\r\n            this.validUntilSelector.set(\"constraints\", lang.mixin(this.validUntilSelector.get(\"constraints\"), { min: this.validFromSelector.value }));\r\n        },\r\n\r\n        _setValidUntilAttr: function (value) {\r\n            this.validUntilSelector.set(\"value\", value);\r\n            this.validFromSelector.set(\"constraints\", lang.mixin(this.validFromSelector.get(\"constraints\"), { max: this.validUntilSelector.value }));\r\n        },\r\n\r\n        _getValueAttr: function () {\r\n            return this.model.get(\"value\");\r\n        },\r\n\r\n        _setValueAttr: function (value) {\r\n            this.model.set(\"value\", value);\r\n        },\r\n\r\n        _setConstraintsAttr: function (value) {\r\n            if (value) {\r\n                this.validFromSelector.set(\"constraints\", lang.mixin(this.validFromSelector.get(\"constraints\"), value));\r\n                this.validUntilSelector.set(\"constraints\", lang.mixin(this.validUntilSelector.get(\"constraints\"), value));\r\n            }\r\n        },\r\n\r\n        isValid: function () {\r\n            return this.model.get(\"useCampaignDate\") || (this.validFromSelector.isValid() && this.validUntilSelector.isValid());\r\n        },\r\n\r\n        _raiseOnChange: function() {\r\n            this.onChange(this.model.get(\"value\"));\r\n        },\r\n\r\n        onChange: function (value) {\r\n            // summary:\r\n            //    Fired when value is changed.\r\n            // tags:\r\n            //    public, callback\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\ReadOnlyCollectionEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\RelationCollectionGridAssembler.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/selection' is an internal Episerver module and can have a breaking change in any release.",
                "line": 7,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/selection\",",
                "endLine": 7,
                "endColumn": 26
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/builder/ButtonBuilder' is an internal Episerver module and can have a breaking change in any release.",
                "line": 8,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/builder/ButtonBuilder\",",
                "endLine": 8,
                "endColumn": 46
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/when\",\r\n    // epi\r\n    \"epi/shell/selection\",\r\n    \"epi/shell/command/builder/ButtonBuilder\",\r\n    // epi-cms\r\n    \"epi-cms/_ContentContextMixin\",\r\n    \"epi-cms/contentediting/editors/DefaultGridAssembler\"\r\n\r\n],\r\nfunction (\r\n    //dojo\r\n    array,\r\n    declare,\r\n    when,\r\n    // epi\r\n    selection,\r\n    ButtonBuilder,\r\n    // epi-cms\r\n    _ContentContextMixin,\r\n    DefaultGridAssembler\r\n) {\r\n    return declare([DefaultGridAssembler, _ContentContextMixin], {\r\n        renderActionMenu: function(item, node, commands) {\r\n            var builder = new ButtonBuilder({ settings: { showLabel: false } });\r\n            array.forEach(commands, function(command) {\r\n                builder.create(command, node);\r\n            });\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\RelationGroupDefinitionEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\RelationGroupSelectionEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\SaleCodeEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\SelectionEditorWithEmptyOption.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\ShippingMethodListEditor.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/editors/CheckBoxListEditor' is an internal Episerver module and can have a breaking change in any release.",
                "line": 6,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/editors/CheckBoxListEditor\",",
                "endLine": 6,
                "endColumn": 56
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/dom-construct\",\r\n//epi-cms\r\n    \"epi-cms/contentediting/editors/CheckBoxListEditor\",\r\n// resources\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.shippingmethodlisteditor\"\r\n], function (\r\n// dojo\r\n    declare,\r\n    domConstruct,\r\n// epi-cms\r\n    CheckBoxListEditor,\r\n// resources\r\n    resources\r\n) {\r\n    return declare([CheckBoxListEditor], {\r\n        // summary:\r\n        //      A widget used to edit a list of shipping method.\r\n        // tags:\r\n        //      internal\r\n\r\n        buildRendering: function () {\r\n            this.inherited(arguments);\r\n\r\n            if(!this.selections.length) {\r\n                this._createNoShippingMethodsNode();\r\n            }            \r\n        },\r\n\r\n        _createNoShippingMethodsNode: function () {\r\n            var label = domConstruct.create(\"div\", { \"class\": \"dgrid-no-data dgrid-no-data--left-aligned\" }, this.domNode);\r\n            label.textContent = resources.noshippingmethods;\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\VariantCollectionEditor.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_FocusableMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 5,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_FocusableMixin\",",
                "endLine": 5,
                "endColumn": 39
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/editors/model/CollectionEditorModel' is an internal Episerver module and can have a breaking change in any release.",
                "line": 7,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/editors/model/CollectionEditorModel\",",
                "endLine": 7,
                "endColumn": 65
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/declare\",\r\n     // EPi Framework\r\n    \"epi/shell/widget/_FocusableMixin\",\r\n    // epi-cms\r\n    \"epi-cms/contentediting/editors/model/CollectionEditorModel\",\r\n    // ecf-ui\r\n    \"./_RelationCollectionEditorBase\",\r\n    \"../viewmodel/VariantCollectionEditorModel\",\r\n    \"../ModelSupport\",\r\n    \r\n    // Resources\r\n    \"epi/i18n!epi/cms/nls/commerce.contentediting.editors.variantcollectioneditor\"\r\n],\r\nfunction (\r\n    //dojo\r\n    declare,\r\n     // EPi Framework\r\n     _FocusableMixin,\r\n    // epi-cms\r\n    CollectionEditorModel,\r\n    // ecf-ui\r\n    _RelationCollectionEditorBase,\r\n    VariantCollectionEditorModel,\r\n    ModelSupport,\r\n    \r\n    // Resources\r\n    resources\r\n) {\r\n    return declare([_RelationCollectionEditorBase, _FocusableMixin], {\r\n        // module:\r\n        //      epi-ecf-ui/contentediting/editors/VariantCollectionEditEditor\r\n        // summary:\r\n        //      Represents the variant editable collection\r\n                \r\n        modelType: VariantCollectionEditorModel,\r\n\r\n        allowedDndTypes: [ModelSupport.contentTypeIdentifier.variationContent, ModelSupport.contentTypeIdentifier.productContent, ModelSupport.linkTypeIdentifier.relation],\r\n\r\n        itemEditorTypes: [ModelSupport.contentTypeIdentifier.variationContent, ModelSupport.contentTypeIdentifier.productContent],\r\n        \r\n        resources: resources,\r\n\r\n        relationType: ModelSupport.relationType.productVariation\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\VariantCollectionReadOnlyEditor.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\VisitorGroupList.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\VisitorGroupSelector.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_FocusableMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 10,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_FocusableMixin\",",
                "endLine": 10,
                "endColumn": 39
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/dom-construct\",\r\n    \"dojo/when\",\r\n// epi\r\n    \"epi/dependency\",\r\n    \"epi/shell/dgrid/util/misc\",\r\n    \"epi/shell/widget/_FocusableMixin\",\r\n    \"epi/shell/widget/_ValueRequiredMixin\",\r\n// epi-ecf-ui\r\n    \"./VisitorGroupSelectorDialog\",\r\n    \"../../widget/_SelectorBase\",\r\n// resources\r\n    \"epi/i18n!epi/nls/commerce.widget.visitorgroupselector\"\r\n], function (\r\n// dojo\r\n    array,\r\n    declare,\r\n    domConstruct,\r\n    when,\r\n// epi\r\n    dependency,\r\n    shellMisc,\r\n    _FocusableMixin,\r\n    _ValueRequiredMixin,\r\n// epi-ecf-ui\r\n    VisitorGroupSelectorDialog,\r\n    _SelectorBase,\r\n// resources\r\n    resources\r\n) {\r\n\r\n    return declare([_SelectorBase, _ValueRequiredMixin, _FocusableMixin], {\r\n        // tags: Represents a widget to select multiple visitor groups\r\n        //      internal\r\n\r\n        resources: resources,\r\n\r\n        dialogTitle: resources.popuptitle,\r\n\r\n        placeholderText: resources.novaluechosen,\r\n\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n\r\n            if (!this.store) {\r\n                var registry = dependency.resolve(\"epi.storeregistry\");\r\n                this.store = registry.get(\"epi.cms.visitorgroup\");\r\n            }\r\n        },\r\n\r\n        _createDialogContent: function() {\r\n            return new VisitorGroupSelectorDialog();\r\n        },\r\n\r\n        _setValueAttr: function(value) {\r\n            // store the arguments in a variable to be able to use them inside a new closure.\r\n            var args = arguments;\r\n            this._setAllVisitorGroups().then(function(){\r\n                this.inherited(args);\r\n            }.bind(this));\r\n        },\r\n\r\n        _updateTextNode: function(visitorGroupIds) {\r\n            var selectedVisitorGroups = null;\r\n            if (visitorGroupIds){\r\n                selectedVisitorGroups = this._convertIdsToVisitorGroups(visitorGroupIds);\r\n            }\r\n            // call the base function with the complete visitor group objects as the new arguments.\r\n            this.inherited(arguments, [selectedVisitorGroups]);\r\n        },\r\n\r\n        _convertIdsToVisitorGroups: function (visitorGroupIds) {\r\n            var visitorGroups = [],\r\n                allVisitorGroups = this.get(\"allVisitorGroups\");\r\n\r\n            visitorGroupIds.forEach(function (visitorGroupId) {\r\n                var visitorGroup = allVisitorGroups.filter(function (visitorGroup) {\r\n                    return visitorGroup.id === visitorGroupId;\r\n                })[0];\r\n\r\n                if (visitorGroup) {\r\n                    visitorGroups.push(visitorGroup);\r\n                } else {\r\n                    visitorGroups.push({ id: visitorGroupId, name: this.resources.deletedvisitorgroup });\r\n                }\r\n            }, this);\r\n\r\n            return visitorGroups;\r\n        },\r\n\r\n        _setAllVisitorGroups: function() {\r\n            return when(this.store.query()).then(function(allVisitorGroups){\r\n                this.set(\"allVisitorGroups\", allVisitorGroups || []);\r\n            }.bind(this));\r\n        },\r\n\r\n        _getEllipsisTooltipLabel: function(notDisplayedItems) {\r\n            // tags:\r\n            //    protected, override\r\n            var otherItems = '';\r\n            notDisplayedItems.forEach(function(visitorGroup){\r\n                otherItems += \"<div>\" + shellMisc.htmlEncode(visitorGroup.name) + \"</div>\";\r\n            });\r\n            return otherItems;\r\n        },\r\n\r\n        _onDialogShow: function () {\r\n            // tags:\r\n            //    protected, override\r\n\r\n            when(this._setAllVisitorGroups()).then(function(){\r\n                this.dialog.content.set(\"allVisitorGroups\", this.get(\"allVisitorGroups\"));\r\n                this.dialog.content.set(\"selectedVisitorGroups\", this.get(\"value\"));\r\n            }.bind(this));\r\n        },\r\n\r\n        _getDialogValue: function () {\r\n            // tags:\r\n            //    protected, override\r\n\r\n            return this.dialog.content.get(\"selectedVisitorGroups\");\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\editors\\VisitorGroupSelectorDialog.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\GridContentPane.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\GridFormContainer.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/layout/SimpleContainer' is an internal Episerver module and can have a breaking change in any release.",
                "line": 7,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/layout/SimpleContainer\",",
                "endLine": 7,
                "endColumn": 39
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/when\",\r\n// epi\r\n    \"epi/shell/TypeDescriptorManager\",\r\n    \"epi/shell/layout/SimpleContainer\",\r\n// epi-cms\r\n    \"epi-cms/_ContentContextMixin\",\r\n// resources\r\n    \"dojo/text!./templates/GridFormContainer.html\"\r\n], function(\r\n// dojo\r\n    declare,\r\n    when,\r\n// epi\r\n    TypeDescriptorManager,\r\n    SimpleContainer,\r\n// epi-cms\r\n    _ContentContextMixin,\r\n// resources\r\n    template\r\n){\r\n    return declare([SimpleContainer, _ContentContextMixin], {\r\n\r\n        templateString: template,\r\n\r\n        typeDescriptorManager: TypeDescriptorManager,\r\n\r\n        buildRendering: function(){\r\n            this.inherited(arguments);\r\n\r\n            when(this.getCurrentContent()).then(function (currentContext) {\r\n                var specificGroupResources;\r\n                var allGroupResources = this.typeDescriptorManager.getResourceValue(currentContext.typeIdentifier, \"groups\");\r\n\r\n                if (allGroupResources) {\r\n                    specificGroupResources = allGroupResources[this.name.toLowerCase()];\r\n                }\r\n\r\n                if (specificGroupResources && specificGroupResources.help) {\r\n                    this.set(\"helpText\", specificGroupResources.help);\r\n                }\r\n            }.bind(this));\r\n            \r\n        },\r\n\r\n        _setHelpTextAttr: { node: \"helpTextNode\", type: \"innerHTML\" }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\ModelSupport.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\PromotionContainer.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/form/formFieldRegistry' is an internal Episerver module and can have a breaking change in any release.",
                "line": 7,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/form/formFieldRegistry\",",
                "endLine": 7,
                "endColumn": 39
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/form/Group' is an internal Episerver module and can have a breaking change in any release.",
                "line": 8,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/form/Group\",",
                "endLine": 8,
                "endColumn": 27
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/layout/SimpleContainer' is an internal Episerver module and can have a breaking change in any release.",
                "line": 9,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/layout/SimpleContainer\",",
                "endLine": 9,
                "endColumn": 39
            }
        ],
        "errorCount": 3,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/dom-class\",\r\n// epi\r\n    \"epi/shell/form/formFieldRegistry\",\r\n    \"epi/shell/form/Group\",\r\n    \"epi/shell/layout/SimpleContainer\",\r\n    \"epi/shell/TypeDescriptorManager\",\r\n// resources\r\n    \"dojo/text!./templates/PromotionContainer.html\"\r\n], function(\r\n// dojo\r\n    declare,\r\n    lang,\r\n    domClass,\r\n// epi\r\n    formFieldRegistry,\r\n    Group,\r\n    SimpleContainer,\r\n    TypeDescriptorManager,\r\n// resources\r\n    template\r\n){\r\n    var module = declare([SimpleContainer], {\r\n\r\n        templateString: template,\r\n\r\n        contentType: null,\r\n\r\n        buildRendering: function(){\r\n            this.inherited(arguments);\r\n            this.set(\"contentTypeName\", this.contentType.name);\r\n            this.set(\"contentTypeDescription\", this._injectSpan(this.contentType.description) || '');\r\n        },\r\n\r\n        _setContentTypeNameAttr: { node: \"contentTypeNameNode\", type: \"innerHTML\" },\r\n\r\n        _setContentTypeDescriptionAttr: { node: \"contentTypeDescriptionNode\", type: \"innerHTML\" },\r\n\r\n        _injectSpan: function (text) {\r\n            if (!text) {\r\n                return text;\r\n            }\r\n\r\n            return lang.replace(text, function (segment, key) {\r\n\r\n                if (key === '/') {\r\n                    return '</span>';\r\n                }\r\n                return '<span class=\"epi-promotion-link epi-promotion--' + key + '\">';\r\n            });\r\n        }\r\n    });\r\n\r\n    // this must match the \"_hint\" editor setting defined in GridFormMetadataExtender.cs\r\n    var promotionFormFieldHint = \"promotion\";\r\n\r\n    var addPromotionRegionStyling = function(widget, wrapper) {\r\n        if (widget.promotionRegion) {\r\n            domClass.add(wrapper.domNode, \"epi-promotion-block epi-promotion--\" + widget.promotionRegion);\r\n        }\r\n    };\r\n\r\n    // for regular properties\r\n    formFieldRegistry.add({\r\n        type: formFieldRegistry.type.field,\r\n        hint: promotionFormFieldHint,\r\n        factory: function (widget, parent) {\r\n\r\n            var originalFactory = formFieldRegistry.get(widget._type, \"\");\r\n            var wrapper = originalFactory(widget, parent);\r\n\r\n            addPromotionRegionStyling(widget, wrapper);\r\n\r\n            return wrapper;\r\n        }\r\n    });\r\n\r\n    // for block properties\r\n    formFieldRegistry.add({\r\n        type: formFieldRegistry.type.parent,\r\n        hint: promotionFormFieldHint,\r\n        factory: function (widget, parent) {\r\n\r\n            var wrapper = new Group({\r\n                // this class definition is copied from:\r\n                // https://stash.ep.se/projects/SH/repos/episerver-ui/browse/EPiServer.Shell.UI/UI/ClientResources/EPi/shell/layout/SimpleContainer.js?at=ddf71c8c81a4c1f883703eb6f9e3edfeb21dc32a\r\n                \"class\": \"epi-form-container__section__row epi-form-container__section__row--\" + widget._type\r\n            });\r\n\r\n            addPromotionRegionStyling(widget, wrapper);\r\n\r\n            return wrapper;\r\n        }\r\n    });\r\n\r\n    return module;\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\_BaseEntryCollectionEditorModel.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/DelegateCommand' is an internal Episerver module and can have a breaking change in any release.",
                "line": 11,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/DelegateCommand\",",
                "endLine": 11,
                "endColumn": 40
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/Evented\",\r\n    \"dojo/promise/all\",\r\n    \"dojo/Stateful\",\r\n    \"dojo/when\",\r\n// epi\r\n    \"epi/dependency\",\r\n    \"epi/shell/command/DelegateCommand\",\r\n// epi-ecf-ui\r\n    \"epi-ecf-ui/contentediting/_HasNotificationMixin\",\r\n// resources\r\n    \"epi/i18n!epi/nls/episerver.shared\"\r\n], function(\r\n//dojo\r\n    declare,\r\n    lang,\r\n    Evented,\r\n    all,\r\n    Stateful,\r\n    when,\r\n// epi\r\n    dependency,\r\n    DelegateCommand,\r\n// epi-ecf-ui\r\n    _HasNotificationMixin,\r\n// resources\r\n    sharedResources\r\n){\r\n    return declare([Stateful, Evented, _HasNotificationMixin], {\r\n\r\n        storeKey: null,\r\n\r\n        resources: null,\r\n\r\n        postscript: function () {\r\n            this.inherited(arguments);\r\n\r\n            this.storeRegistry = dependency.resolve(\"epi.storeregistry\");\r\n            this.store = this.store || this.storeRegistry.get(this.storeKey);\r\n            this.metadataManager = this.metadataManager || dependency.resolve(\"epi.shell.MetadataManager\");\r\n        },\r\n\r\n        getCommands: function (model, category) {\r\n            var commonSettings = {\r\n                category: category,\r\n                model: model,\r\n                canExecute: true,\r\n                isAvailable: true\r\n            };\r\n\r\n            return [\r\n                new DelegateCommand(lang.mixin({\r\n                    name: \"remove\",\r\n                    label: this.resources.commands.remove,\r\n                    iconClass: \"epi-iconClose\",\r\n                    delegate: function (cmd) {\r\n                        this.emit(\"removeCommandEvent\");\r\n                    }.bind(this)\r\n                }, commonSettings))\r\n            ];\r\n        },\r\n\r\n        addItem: function (item, refItem, before) {\r\n            // summary:\r\n            //      Add new item.\r\n            // item: Object\r\n            //      The item raw data\r\n            // refItem: Object\r\n            //      The reference item (item model instance)\r\n            // before: Boolean\r\n            //      Indicates that the new item should be added before the reference item.\r\n            // tags:\r\n            //      public\r\n\r\n            this._setSortOrder(item, refItem, before);\r\n            return when(this.store.add(item), function (data) {\r\n                this.emit(\"itemAdded\", { id: data.id });\r\n            }.bind(this), this._showNotification.bind(this));\r\n        },\r\n\r\n        removeItems: function (models) {\r\n            var promises = [];\r\n\r\n            for (var i = 0, j = models.length; i < j; i += 1) {\r\n                promises.push(this.store.remove(models[i].id));\r\n            }\r\n\r\n            return all(promises).then(function (removed) {\r\n                this.emit(\"itemsRemoved\");\r\n            }.bind(this));\r\n        },\r\n\r\n        getListCommand: function (availableCommands) {\r\n            return new DelegateCommand({\r\n                name: \"add\",\r\n                label: this.resources.addlabel,\r\n                tooltip: sharedResources.action.add,\r\n                iconClass: \"epi-iconPlus\",\r\n                canExecute: true,\r\n                isAvailable: true,\r\n                delegate: this.addItemDelegate.bind(this)\r\n            });\r\n        },\r\n\r\n        addItemDelegate: function () {\r\n            // summary:\r\n            //      execute delegate for add command.\r\n            // tags:\r\n            //      protected\r\n\r\n            this.emit(\"toggleItemEditor\", null);\r\n        },\r\n\r\n        moveItem: function(item, refItem, before) {\r\n            this._setSortOrder(item, refItem, before);\r\n            return when(this.store.put(item), function(data) {\r\n                this.emit(\"itemSaved\", { id: data.id });\r\n            }.bind(this));\r\n        },\r\n\r\n        _setSortOrder: function (item, refItem, before) {\r\n            if (refItem) {\r\n                // Set sortOrder equal to refItem to place it before\r\n                // The store will update sort index of any items after it\r\n                item.sortOrder = before ? refItem.sortOrder : refItem.sortOrder + 1;\r\n            }\r\n        }\r\n\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\_OverviewEditorModelBase.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\_RelationCollectionEditorModelMixin.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/DelegateCommand' is an internal Episerver module and can have a breaking change in any release.",
                "line": 8,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/DelegateCommand\",",
                "endLine": 8,
                "endColumn": 40
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/topic\",\r\n    \"dojo/when\",\r\n// epi\r\n    \"epi/shell/command/DelegateCommand\",\r\n// epi cms\r\n    \"epi-cms/dgrid/formatters\",\r\n// epi-ecf-ui\r\n    \"epi-ecf-ui/contentediting/_HasNotificationMixin\",\r\n// Resources\r\n    \"epi/i18n!epi/nls/episerver.shared\"\r\n], function (\r\n//dojo\r\n    array,\r\n    declare,\r\n    topic,\r\n    when,\r\n// epi\r\n    DelegateCommand,\r\n// epi cms\r\n    formatters,\r\n// epi-ecf-ui\r\n    _HasNotificationMixin,\r\n// Resources\r\n    sharedResources\r\n) {\r\n\r\n    return declare([_HasNotificationMixin], {\r\n\r\n        // module:\r\n        //      epi-ecf-ui/contentediting/viewmodel/_RelationCollectionEditorModelMixin\r\n        // summary:\r\n        //      Mixes in overrides of CollectionEditorModel, which can be used by a relation collection editor model to get save, move, remove functionality etz.\r\n\r\n        resources: null,\r\n\r\n        setSortOrderOnChange: true,\r\n\r\n        postscript: function(){\r\n            this.inherited(arguments);\r\n\r\n            this.own(topic.subscribe(\"relationChanged\", this._refresh.bind(this)));\r\n        },\r\n\r\n        generateColumnsDefinition: function () {\r\n            // summary:\r\n            //      Generate columns definition.\r\n            // tags:\r\n            //      public\r\n\r\n            return {\r\n                contentTypeIdentifier: {\r\n                    label: \"\",\r\n                    className: \"epi-columnIcon16x16\",\r\n                    formatter: function (typeIdentifier, additionalClass) {\r\n                        return formatters.contentIcon(typeIdentifier, additionalClass);\r\n                    }\r\n                },\r\n                name: {\r\n                    label: this.resources.headings.name\r\n                },\r\n                path: {\r\n                    label: this.resources.headings.path\r\n                }\r\n            };\r\n        },\r\n\r\n        getItemCommands: function() {\r\n            var commands = this.inherited(arguments);\r\n\r\n            if (commands) {\r\n                for (var i = 0; i < commands.length; i++) {\r\n                    if (commands[i].name === \"remove\") {\r\n                        commands[i].iconClass = \"epi-iconClose\";\r\n                    }\r\n                }\r\n            }\r\n\r\n            return commands;\r\n        },\r\n\r\n        getListCommands: function (availableCommands) {\r\n\r\n            return [\r\n                new DelegateCommand({\r\n                    name: \"add\",\r\n                    label: this.resources.addlabel,\r\n                    tooltip: sharedResources.action.add,\r\n                    iconClass: \"epi-iconPlus\",\r\n                    canExecute: true,\r\n                    isAvailable: true,\r\n                    delegate: this.addItemDelegate.bind(this)\r\n                })\r\n            ];\r\n        },\r\n\r\n\r\n        addItem: function (item, refItem, before) {\r\n            var items = this.get(\"items\");\r\n            if (items && items.length > 0) {\r\n                // check if adding item is existed, to move it to above\r\n                // instead of adding duplicated item.\r\n                var itemIdentifier = item.permanentUrl || item.target;\r\n                var existingItem;\r\n                array.some(items, function (oldItem) {\r\n                    if (oldItem && oldItem.target === itemIdentifier) {\r\n                        existingItem = oldItem;\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                if (existingItem) {\r\n                    this.moveItem(existingItem, refItem || existingItem, before || true);\r\n                    return this._refresh();\r\n                }\r\n            }\r\n\r\n            if (this.setSortOrderOnChange) {\r\n                // Set sort order before inherited to avoid including new items sort order in calculation\r\n                this._setSortOrder(item, refItem, before);\r\n            }\r\n\r\n            return when(this.inherited(arguments), function () {\r\n                return when(this._store.add(item), this._refresh.bind(this), function (error) {\r\n                    return this._showNotification(error, this._refresh.bind(this));\r\n                }.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        moveItem: function (item, refItem, before) {\r\n            return when(this.inherited(arguments), function () {\r\n                if (this.setSortOrderOnChange) {\r\n                    this._setSortOrder(item, refItem, before);\r\n                }\r\n                return when(this._store.put(item), this._refresh.bind(this), function (error) {\r\n                    return this._showNotification(error, this._refresh.bind(this));\r\n                }.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        removeItem: function (item) {\r\n            return when(this.inherited(arguments), function () {\r\n                return when(this._store.remove(item.id), this._refresh.bind(this), function (error) {\r\n                    return this._showNotification(error, this._refresh.bind(this));\r\n                }.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        saveItem: function (item, index) {\r\n            return when(this.inherited(arguments), function () {\r\n                return when(this._store.put(item), this._refresh.bind(this), function (error) {\r\n                    return this._showNotification(error, this._refresh.bind(this));\r\n                }.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        _refresh: function () {\r\n            // This will force a refresh of the grid.\r\n            this.set(\"data\", this.get(\"data\"));\r\n        },\r\n\r\n        _setSortOrder: function(item, refItem, before) {\r\n            if (refItem) {\r\n                // Set sortOrder equal to refItem to place it before\r\n                // The store will update sort index of any items after it\r\n                item.sortOrder = before ? refItem.sortOrder : refItem.sortOrder + 1;\r\n            } else {\r\n                // Place last\r\n                var items = this.get(\"items\");\r\n                var lastSortOrder = (items.length > 0) ? items[items.length - 1].sortOrder : 0;\r\n                if (!item.sortOrder || lastSortOrder >= item.sortOrder) {\r\n                    item.sortOrder = lastSortOrder + 100;\r\n                }\r\n            }\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\AssociationCollectionEditorModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\AssociationCollectionReadOnlyEditorModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\BundleEntryCollectionReadOnlyEditorModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\CategoryCollectionEditorModel.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/selection' is an internal Episerver module and can have a breaking change in any release.",
                "line": 8,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/selection\",",
                "endLine": 8,
                "endColumn": 26
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/editors/model/CollectionEditorModel' is an internal Episerver module and can have a breaking change in any release.",
                "line": 11,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/editors/model/CollectionEditorModel\",",
                "endLine": 11,
                "endColumn": 65
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/topic\",\r\n    \"dojo/when\",\r\n\r\n    // shell\r\n    \"epi/shell/selection\",\r\n\r\n    // epi-cms\r\n    \"epi-cms/contentediting/editors/model/CollectionEditorModel\",\r\n    \"epi-cms/core/ContentReference\",\r\n\r\n    // ecf\r\n    \"./CategoryCollectionReadOnlyEditorModel\",\r\n    \"./_RelationCollectionEditorModelMixin\",\r\n    \"../../command/DetachFromCategory\",\r\n\r\n    // resources\r\n    \"epi/i18n!epi/cms/nls/commerce.contentediting.editors.categorycollectioneditor\"\r\n],\r\n    function (\r\n        //dojo\r\n        declare,\r\n        topic,\r\n        when,\r\n\r\n        // shell\r\n        selection,\r\n\r\n        // epi-cms\r\n        CollectionEditorModel,\r\n        ContentReference,\r\n\r\n        // ecf\r\n        CategoryCollectionReadOnlyEditorModel,\r\n        _RelationCollectionEditorModelMixin,\r\n        DetachFromCategory,\r\n\r\n        // resources\r\n        resources\r\n    ) {\r\n        return declare([CategoryCollectionReadOnlyEditorModel, _RelationCollectionEditorModelMixin], {\r\n            // module:\r\n            //      epi-ecf-ui/contentediting/viewmodel/CategoryCollectionEditEditorModel\r\n            // summary:\r\n            //      Represents the model for RelationCollectionEditor\r\n\r\n            resources: resources,\r\n\r\n            setSortOrderOnChange: false,\r\n\r\n            _contentStructureStore: null,\r\n\r\n            getItemCommands: function (item, availableCommands, category) {\r\n                var commands = this.inherited(arguments);\r\n\r\n                if (commands) {\r\n                    for (var i = 0; i < commands.length; i++) {\r\n                        if (commands[i].name === \"remove\") {\r\n                            // Replace remove command with detach command\r\n                            var removeCmd = commands[i];\r\n\r\n                            var detachCmd = new DetachFromCategory({\r\n                                name: removeCmd.name,\r\n                                category: removeCmd.category,\r\n                                label: removeCmd.label,\r\n                                iconClass: removeCmd.iconClass,\r\n                                selection: new selection(),\r\n                                categoryLink: item.target,\r\n                                isUsedByCollectionEditor: true\r\n                            });\r\n                            //Todo: move function out from for loop\r\n                            /*jshint loopfunc:true */\r\n                            when(this.getCurrentContent(), function (content) {\r\n                                detachCmd.selection.data = [{ data: content, type: \"epi.cms.contentdata\" }];\r\n                                detachCmd.set(\"model\", {}); // This will trigger _onModelChange on the command.\r\n                            });\r\n\r\n                            commands[i] = detachCmd;\r\n                        }\r\n                    }\r\n                }\r\n                return commands;\r\n            },\r\n\r\n            addItem: function (item, refItem, before) {\r\n\r\n                if (this.primaryCategory &&\r\n                    ContentReference.compareIgnoreVersion(item.target, this.primaryCategory.target) &&\r\n                    ContentReference.compareIgnoreVersion(item.source, this.primaryCategory.source)) {\r\n                    return;\r\n                }\r\n\r\n                return when(this.inherited(arguments), function () {\r\n                    topic.publish(\"relationChanged\", item);\r\n                });\r\n            }\r\n        });\r\n    });"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\CategoryCollectionReadOnlyEditorModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\EntryRelationCollectionEditorModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\InventoryCollectionReadOnlyEditorModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\InventoryOverviewEditorModel.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/DelegateCommand' is an internal Episerver module and can have a breaking change in any release.",
                "line": 11,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/DelegateCommand\",",
                "endLine": 11,
                "endColumn": 40
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/promise/all\",\r\n\r\n    // dojox\r\n    \"dojox/html/entities\",\r\n\r\n    // epi\r\n    \"epi/shell/command/DelegateCommand\",\r\n    \"epi/datetime\",\r\n    \"epi-cms/dgrid/formatters\",\r\n\r\n    // commerce\r\n    \"./_OverviewEditorModelBase\",\r\n\r\n    // resources\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.pricingoverview.grid\",\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.pricecollection.message\"\r\n],\r\nfunction (\r\n    //dojo\r\n    array,\r\n    declare,\r\n    all,\r\n\r\n    // dojox\r\n    htmlEntities,\r\n\r\n    // epi\r\n    DelegateCommand,\r\n    epiDate,\r\n    formatters,\r\n\r\n    // commerce\r\n    _OverviewEditorModelBase,\r\n\r\n    // resources\r\n    resources,\r\n    res\r\n) {\r\n    return declare([_OverviewEditorModelBase], {\r\n        // module:\r\n        //      epi-ecf-ui/contentediting/viewmodel/InventoryOverviewEditorModel\r\n        // summary:\r\n        //      Represents the model for InventoryOverviewEditor\r\n\r\n        _storeKey: \"epi.commerce.inventory\",\r\n\r\n        _createQueryOptions: function () {\r\n            // summary:\r\n            //      Creates and returns query options, based on selected content link, market id and customer group (if any).\r\n            // tags:\r\n            //      private\r\n\r\n            return {\r\n                query: { referenceId: this.get(\"contentLink\"), query: \"getinventory\" }\r\n            };\r\n        },\r\n\r\n        getCommands: function (model, category) {\r\n            return [\r\n                new DelegateCommand({\r\n                    name: \"remove\",\r\n                    label: resources.commands.remove,\r\n                    iconClass: \"epi-iconClose\",\r\n                    category: category,\r\n                    model: model,\r\n                    canExecute: true,\r\n                    isAvailable: true,\r\n                    delegate: function (cmd) {\r\n                        this.emit(\"removeCommandEvent\");\r\n                    }.bind(this)\r\n                })\r\n            ];\r\n        },\r\n\r\n        removeItems: function (models) {\r\n            var promises = [];\r\n\r\n            for (var i = 0, j = models.length; i < j; i += 1) {\r\n                promises.push(this.store.remove(models[i].contentLink + \"$\" + models[i].warehouseCode));\r\n            }\r\n\r\n            return all(promises).then(function (removed) {\r\n                this.emit(\"itemsRemoved\", { removedItems: removed });\r\n            }.bind(this));\r\n        },\r\n\r\n        generateFormatters: function (columnDefinitions, editableColumns, metadata) {\r\n            for (var definitionName in columnDefinitions) {\r\n                var column = columnDefinitions[definitionName];\r\n\r\n                if (definitionName === \"warehouseCode\") {\r\n                    column.formatter = this._getWarehouseFormatter(metadata);\r\n                    continue;\r\n                }\r\n\r\n                if (!this._isColumnEditable(definitionName, editableColumns)) {\r\n                    continue;\r\n                }\r\n\r\n                if (definitionName === \"backorderAvailableUtc\" || definitionName === \"preorderAvailableUtc\" || definitionName === \"purchaseAvailableUtc\") {\r\n                    column.formatter = formatters.localizedDate;\r\n                } else if (definitionName === \"isTracked\") {\r\n                    column.formatter = formatters.friendlyBoolean;\r\n                } else if (column.editorArgs && column.editorArgs.selections && column.editorArgs.selections.length > 0) {\r\n                    column.formatter = this._getSelectionFormatter(column);\r\n                } else {\r\n                    column.formatter = this._editableValueFormatter;\r\n                }\r\n\r\n                column.className = column.className ? column.className + \" epi-dgrid--editable\" : \"epi-dgrid--editable\";\r\n            }\r\n        },\r\n\r\n        getAllItems: function (contentLink) {\r\n            return this.store.query({ referenceId: contentLink });\r\n        },\r\n\r\n        _getWarehouseFormatter: function (metadata) {\r\n            // summary:\r\n            //      A custom formatter for the warehouse code. Display the selection for the current value, but don't make the field editable.\r\n\r\n            var selections;\r\n            array.some(metadata.properties, function (property) {\r\n                if (property.name === \"WarehouseCode\") {\r\n                    selections = property.selections;\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            return function (value) {\r\n                array.some(selections, function (selection) {\r\n                    if (selection.value === value) {\r\n                        value = selection.text;\r\n                        return true;\r\n                    }\r\n                });\r\n                return value;\r\n            }.bind(this);\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\PackageEntryCollectionReadOnlyEditorModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\ParentEntriesCollectionReadOnlyEditorModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\PriceCollectionReadOnlyEditorModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\PricingOverviewEditorModel.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/DelegateCommand' is an internal Episerver module and can have a breaking change in any release.",
                "line": 12,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/DelegateCommand\",",
                "endLine": 12,
                "endColumn": 40
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/currency\",\r\n    \"dojo/promise/all\",\r\n\r\n    // dojox\r\n    \"dojox/html/entities\",\r\n\r\n    // epi\r\n    \"epi/shell/command/DelegateCommand\",\r\n    \"epi/datetime\",\r\n\r\n    // commerce\r\n    \"./_OverviewEditorModelBase\",\r\n\r\n    // resources\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.pricingoverview.grid\",\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.pricecollection.message\"\r\n],\r\nfunction (\r\n    //dojo\r\n    declare,\r\n    lang,\r\n    currency,\r\n    all,\r\n\r\n    // dojox\r\n    htmlEntities,\r\n\r\n    // epi\r\n    DelegateCommand,\r\n    epiDate,\r\n\r\n    // commerce\r\n    _OverviewEditorModelBase,\r\n\r\n    // resources\r\n    resources,\r\n    res\r\n) {\r\n    return declare([_OverviewEditorModelBase], {\r\n        // module:\r\n        //      epi-ecf-ui/contentediting/viewmodel/PricingOverviewEditorModel\r\n        // summary:\r\n        //      Represents the model for PricingOverviewEditor\r\n\r\n        _storeKey: \"epi.commerce.price\",\r\n\r\n        _createQueryOptions: function () {\r\n            // summary:\r\n            //      Creates and returns query options, based on selected content link, market id and customer group (if any).\r\n            // tags:\r\n            //      private\r\n\r\n            var query = { referenceId : this.get(\"contentLink\"), query: \"getprice\" },\r\n                ignoreOptions = [\"query\", \"referenceId\"];\r\n\r\n            if (this.get(\"marketId\")) {\r\n                lang.mixin(query, { marketId: this.get(\"marketId\") });\r\n                if (query.marketId === \"ALL\") {\r\n                    ignoreOptions.push(\"marketId\");\r\n                }\r\n            }\r\n\r\n            if (this.get(\"priceCode\")) {\r\n                lang.mixin(query, { priceCode: this.get(\"priceCode\") });\r\n                if (query.priceCode === \"ALL\"){\r\n                    ignoreOptions.push(\"priceCode\");\r\n                }\r\n            }\r\n\r\n            return { query: query, options: { ignore: ignoreOptions } };\r\n        },\r\n\r\n        getCommands: function (model, category) {\r\n            var commonSettings = {\r\n                category: category,\r\n                model: model,\r\n                canExecute: true,\r\n                isAvailable: true\r\n            };\r\n\r\n            return [\r\n                new DelegateCommand(lang.mixin({\r\n                    name: \"duplicate\",\r\n                    label: resources.commands.duplicate,\r\n                    iconClass: \"epi-iconDuplicatePage\",\r\n                    delegate: function (cmd) {\r\n                        this.emit(\"duplicateCommandEvent\");\r\n                    }.bind(this)\r\n                }, commonSettings)),\r\n                new DelegateCommand(lang.mixin({\r\n                    name: \"remove\",\r\n                    label: resources.commands.remove,\r\n                    iconClass: \"epi-iconClose\",\r\n                    delegate: function (cmd) {\r\n                        this.emit(\"removeCommandEvent\");\r\n                    }.bind(this)\r\n                }, commonSettings))\r\n            ];\r\n        },\r\n\r\n        removeItems: function (models) {\r\n            var promises = [];\r\n\r\n            for (var i = 0, j = models.length; i < j; i += 1) {\r\n                promises.push(this.store.remove(models[i].id));\r\n            }\r\n\r\n            return all(promises).then(function(removed) {\r\n                this.emit(\"itemsRemoved\", { removedItems: removed });\r\n            }.bind(this));\r\n        },\r\n\r\n        generateFormatters: function (columnDefinitions, editableColumns) {\r\n            for(var definitionName in columnDefinitions){\r\n                if (!this._isColumnEditable(definitionName, editableColumns)){\r\n                    continue;\r\n                }\r\n                var column = columnDefinitions[definitionName];\r\n                if (definitionName === \"validDate\"){\r\n                    column.formatter = this._validDateFormatter.bind(this);\r\n                } else if(definitionName === \"unitPrice\"){\r\n                    column.formatter = this._unitPriceFormatter.bind(this);\r\n                } else if (definitionName === \"priceCode\"){\r\n                    column.formatter = this._priceCodeFormatter.bind(this);\r\n                } else if(column.editorArgs && column.editorArgs.selections && column.editorArgs.selections.length > 0){\r\n                    column.formatter = this._getSelectionFormatter(column);\r\n                } else{\r\n                    column.formatter = this._editableValueFormatter;\r\n                }\r\n                column.className = column.className ? column.className + \" epi-dgrid--editable\" : \"epi-dgrid--editable\";\r\n            }\r\n        },\r\n\r\n        _validDateFormatter: function(value){\r\n            var formattedDate = this._formatValidDate(value);\r\n            return this._editableValueFormatter(formattedDate);\r\n        },\r\n\r\n        _formatValidDate: function (value) {\r\n            // Format datetime\r\n            return this._formatDate(value.validFrom) + \" - \" + this._formatDate(value.validUntil);\r\n        },\r\n\r\n        _formatDate: function (datetime) {\r\n            // summary:\r\n            //      Format datetime to short type.\r\n            // datetime: Object\r\n            //      The raw data.\r\n            // tags:\r\n            //      public\r\n\r\n            return datetime && datetime !== \"\" ? epiDate.toUserFriendlyString(datetime) : res.untildatenotdefined;\r\n        },\r\n\r\n        _unitPriceFormatter: function(value){\r\n            var formattedCurrency = currency.format(value.amount, { currency: value.currency });\r\n            return this._editableValueFormatter(formattedCurrency);\r\n        },\r\n\r\n        _priceCodeFormatter: function(value){\r\n            var encodedValue = htmlEntities.encode(value);\r\n            return this._editableValueFormatter(encodedValue);\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\PromotionScheduleEditorViewModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\ReadOnlyCollectionEditorModel.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/editors/model/CollectionEditorModel' is an internal Episerver module and can have a breaking change in any release.",
                "line": 11,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/editors/model/CollectionEditorModel\",",
                "endLine": 11,
                "endColumn": 65
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/when\",\r\n\r\n    \"epi/dependency\",\r\n\r\n    // epi cms\r\n    \"epi-cms/dgrid/formatters\",\r\n    \"epi-cms/contentediting/editors/model/CollectionEditorModel\",\r\n    \"epi-cms/_ContentContextMixin\"\r\n],\r\n    function (\r\n        //dojo\r\n        declare,\r\n        lang,\r\n        when,\r\n\r\n        dependency,\r\n\r\n        // epi cms\r\n        formatters,\r\n        CollectionEditorModel,\r\n        _ContentContextMixin\r\n    ) {\r\n        return declare([CollectionEditorModel, _ContentContextMixin], {\r\n            // module: \r\n            //      epi-ecf-ui/contentediting/viewmodel/ReadOnlyCollectionEditorModel\r\n            // summary:\r\n            //      Represents the model for ReadOnly CollectionEditor\r\n\r\n            // _storeKey: String\r\n            //      Represents the key to get the store object. Implementation will set this property, to get, for example, price store, or inventory store\r\n            _storeKey: null,\r\n\r\n            // _store: Object\r\n            //      Represents the REST store, to get data from.\r\n            _store: null,\r\n\r\n            // _contentLink: ContentReference\r\n            //      Represents the underlay data, a content reference.\r\n            _contentLink: null,\r\n\r\n            // contentContext:\r\n            //  accessMask: int\r\n            //  isMasterLanguage: Boolean\r\n            //      Represents if the current content link is in master language or not\r\n            contentContext: null,\r\n\r\n            // summary:\r\n            //      Sets whether the editor's collection can be sorted or not.\r\n            // value: Boolean\r\n            //      The value true makes the collection sortable by clicking the grid's column headers, else false.\r\n            // tags: \r\n            //      protected\r\n            _enableSorting: false,\r\n\r\n            postscript: function () {\r\n                // summary:\r\n                //      Post script initialization.\r\n                // description:\r\n                //      Set default values.\r\n\t    var registry = dependency.resolve(\"epi.storeregistry\");\r\n                this._store = this._store || registry.get(this._storeKey);\r\n                this.inherited(arguments);\r\n            },\r\n\r\n            _preprocessResult: function (result) {\r\n                // tags: \r\n                //      protected\r\n\r\n                return result.models || result;\r\n            },\r\n\r\n            _dataSetter: function (value) {\r\n                // summary:\r\n                //      Set data property.\r\n                // value: ContentReference\r\n                //      Model value, which would be a ContentReference.\r\n                // tags: \r\n                //      private\r\n\r\n                // The model value is ContentReference. We need to query to the store, to get the appropriate data (for example: price list, or inventory list)\r\n                this._contentLink = value;\r\n                if (!value) {\r\n                    this.data = value;\r\n                    this._initData();\r\n\r\n                    return;\r\n                }\r\n\r\n                when(this._store.query(this.createQuery(value)))\r\n                    .then(this._preprocessResult.bind(this))\r\n                    .then(function (processedResult) {\r\n                        this.data = processedResult;\r\n                        this._initData();\r\n                    }.bind(this));\r\n\r\n                when(this.getCurrentContent(), function (content) {\r\n                    this.set(\"contentContext\", {\r\n                        accessMask: content.accessMask,\r\n                        isMasterLanguage: content.currentLanguageBranch.isMasterLanguage\r\n                    });\r\n                }.bind(this));\r\n            },\r\n\r\n            _dataGetter: function () {\r\n                // summary:\r\n                //      Get data property.\r\n                // tags: \r\n                //      private\r\n\r\n                return this._contentLink;\r\n            },\r\n\r\n            createQuery: function (referenceId) {\r\n                return { referenceId: referenceId };\r\n            },\r\n\r\n            generateFormatters: function (columnDefinitions) {\r\n                // summary:\r\n                //      Generate formatters for the specified column definitions.\r\n                // columnDefinitions:\r\n                //      The definition for the columns that should get the generated formatters.\r\n                // tags: \r\n                //      override\r\n\r\n                this.inherited(arguments);\r\n\r\n                var typeColumn = columnDefinitions.contentTypeIdentifier;\r\n\r\n                if (typeColumn) {\r\n                typeColumn.formatter = function(typeIdentifier, additionalClass) {\r\n                    return formatters.contentIcon(typeIdentifier, additionalClass);\r\n                };\r\n                }\r\n                // Disable sort order in dgrid\r\n                for (var columnName in columnDefinitions) {\r\n                    lang.setObject(\"sortable\", this._enableSorting, columnDefinitions[columnName]);\r\n                }\r\n\r\n                return columnDefinitions;\r\n            }\r\n        });\r\n    });"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\VariantCollectionEditorModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\contentediting\\viewmodel\\VariantCollectionReadOnlyEditorModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\dgrid\\_ClickablePathColumnMixin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\dgrid\\_NoDataMessageMixin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\FacetFiltersService.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\layers\\epi-ecf-ui-widgets.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\MarketingUtils.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\plugin-area\\_CommerceEditViewFilter.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/PluginArea' is an internal Episerver module and can have a breaking change in any release.",
                "line": 3,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/PluginArea\",",
                "endLine": 3,
                "endColumn": 21
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// epi\r\n    \"epi/PluginArea\",\r\n    \"epi-ecf-ui/contentediting/_ViewConfigurationsMixin\"\r\n], function (\r\n// epi\r\n    PluginArea,\r\n    _ViewConfigurationsMixin\r\n) {\r\n\r\n    // summary:\r\n    //      A plugin area to plugin custom view filtering for the view button dropdown.\r\n    // tags:\r\n    //      internal\r\n\r\n    var pluginArea = new PluginArea(\"epi-cms/edit-view/filters[]\");\r\n    var filter = function () {\r\n        return function (viewConfigurations, contentData, currentContext) {\r\n            if (!contentData) {\r\n                return viewConfigurations;\r\n            }\r\n\r\n            viewConfigurations.availableViews = (new _ViewConfigurationsMixin()).getAuthorizedViews(viewConfigurations.availableViews, contentData.accessMask);\r\n\r\n            return viewConfigurations;\r\n        };\r\n    };\r\n\r\n    pluginArea.add(filter);\r\n\r\n    return pluginArea;\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\store\\Aggressive.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\store\\CompositeKey.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\_ConfirmDiscardChangesMixin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\_ContentSecurableList.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\_DiscountTreeNode.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\_FullHeightContentMixin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\_GridRowStatusMixin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\_HelpMixin.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\_MarketingItemTag.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\_MarketingListBase.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\_OverviewBase.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_ModelBindingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 17,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_ModelBindingMixin\",",
                "endLine": 17,
                "endColumn": 42
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/dom-construct\",\r\n    \"dojo/dom-geometry\",\r\n    \"dojo/dom-style\",\r\n    \"dojo/when\",\r\n\r\n// dijit\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n    \"dijit/layout/_LayoutWidget\",\r\n\r\n// epi\r\n    \"epi/dependency\",\r\n    \"epi/shell/TypeDescriptorManager\",\r\n    \"epi/shell/widget/_ModelBindingMixin\",\r\n\r\n// commerce\r\n    \"./BackToPreviousViewNotification\",\r\n    \"../contentediting/ModelSupport\"\r\n\r\n], function (\r\n// dojo\r\n    declare,\r\n    domConstruct,\r\n    domGeo,\r\n    domStyle,\r\n    when,\r\n\r\n// dijit\r\n    _TemplatedMixin,\r\n    _WidgetsInTemplateMixin,\r\n    _LayoutWidget,\r\n\r\n// epi\r\n    dependency,\r\n    TypeDescriptorManager,\r\n    _ModelBindingMixin,\r\n\r\n// commerce\r\n    BackToPreviousViewNotification,\r\n    ModelSupport\r\n) {\r\n\r\n    return declare([_LayoutWidget, _TemplatedMixin, _WidgetsInTemplateMixin, _ModelBindingMixin], {\r\n        // summary:\r\n        //    Base class for the PricingOverview and InventoryOverview widgets\r\n        // tags:\r\n        //    protected\r\n\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n\r\n            if (!this.model && this.modelClassName) {\r\n                var modelClass = declare(this.modelClassName);\r\n                this.set(\"model\", new modelClass());\r\n            }\r\n\r\n            if (!this._backToPreviousViewNotification) {\r\n                this._backToPreviousViewNotification = new BackToPreviousViewNotification();\r\n                this.own(\r\n                    this._backToPreviousViewNotification.watch(\"notification\", this._defaultNotificationWatchHandler.bind(this))\r\n                );\r\n            }\r\n        },\r\n\r\n        buildRendering: function () {\r\n            this.inherited(arguments);\r\n            if (!this.list) {\r\n                this.list = this.list || new this.listType();\r\n                this.own(this.list);\r\n                domConstruct.place(this.list.domNode, this.listNode);\r\n            }\r\n            if (!this.metadata) {\r\n                when(dependency.resolve(\"epi.shell.MetadataManager\").getMetadataForType(this.metadataTypeName), function (metadata) {\r\n                    this.metadata = metadata;\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        _setValueAttr: function (value) {\r\n            // summary:\r\n            //      Sets value for this widget.\r\n            // value: content data\r\n            //      Input content link to get data from.\r\n\r\n            this.list.set(\"value\", value.id);\r\n            this._showNewItemView(false);\r\n\r\n            //if the current content type has base type which is variation or package, then show add new item button\r\n            if (TypeDescriptorManager.isBaseTypeIdentifier(value.dataType, ModelSupport.contentTypeIdentifier.variationContent) ||\r\n                TypeDescriptorManager.isBaseTypeIdentifier(value.dataType, ModelSupport.contentTypeIdentifier.packageContent)) {\r\n                domStyle.set(this.addNewItem.domNode, \"display\", \"\");\r\n                this.model.set(\"value\", value.id);\r\n            }\r\n            else {\r\n                domStyle.set(this.addNewItem.domNode, \"display\", \"none\");\r\n            }\r\n        },\r\n\r\n        showNotification: function () {\r\n            // summary:\r\n            //      Displays notification bar\r\n            // tags:\r\n            //      public\r\n            this._backToPreviousViewNotification.showNotification();\r\n        },\r\n\r\n        _defaultNotificationWatchHandler: function (/*String*/name, /*Object*/oldValue, /*Object*/newValue) {\r\n            // summary:\r\n            //      Add/remove notification to/from notification bar\r\n            // tags:\r\n            //      private\r\n\r\n            if (oldValue) {\r\n                this.notificationBar.remove(oldValue);\r\n            }\r\n\r\n            if (newValue && newValue.content) {\r\n                this.notificationBar.add(newValue);\r\n            }\r\n\r\n            this.layout();\r\n        },\r\n\r\n        layout: function () {\r\n            // summary:\r\n            //      Layout the overview editor.\r\n            // tags:\r\n            //      protected\r\n\r\n            var headerSize = domGeo.getMarginBox(this.header);\r\n\r\n            var height = this._contentBox.h - headerSize.h,\r\n                width = this._contentBox.w;\r\n            this.list.resize({\r\n                h: height,\r\n                w: width\r\n            });\r\n        },\r\n\r\n        _onShowNewItem: function () {\r\n            // summary:\r\n            //      Add new item row to a variation/package.\r\n            var newItem = this.model.getDefaultItem();\r\n            this._showNewItemView(true);\r\n            this.newItemWidget.set(\"value\", newItem);\r\n        },\r\n\r\n        _onCancelNewItem: function () {\r\n            this._showNewItemView(false);\r\n        },\r\n\r\n        _showNewItemNotification: function () {\r\n            var notificationText = domConstruct.create(\"div\", {\r\n                innerHTML: this.resources.newitemnotification\r\n            });\r\n            this._backToPreviousViewNotification.set(\"notification\", {\r\n                content: notificationText,\r\n                commands: [this._backToPreviousViewNotification.command]\r\n            });\r\n        },\r\n\r\n        _createNewItemWidget: function () {\r\n            this.newItemWidget = new this.newItemWidgetType({\r\n                doLayout: false,\r\n                metadata: this.metadata\r\n            });\r\n            this.newItemWidget.startup();\r\n            this.own(this.newItemWidget);\r\n            domConstruct.place(this.newItemWidget.domNode, this.newItemFormNode);\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\_RelationViewBase.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\_SelectorBase.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/_HasChildDialogMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 17,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/_HasChildDialogMixin\",",
                "endLine": 17,
                "endColumn": 42
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/dom-construct\",\r\n// dijit\r\n    \"dijit/form/_FormValueMixin\",\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_Widget\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n    \"dijit/form/Button\",\r\n    \"dijit/Tooltip\",\r\n// epi\r\n    \"epi/epi\",\r\n    \"epi/shell/widget/dialog/Dialog\",\r\n// epi-cms\r\n    \"epi-cms/widget/_HasChildDialogMixin\",\r\n// epi-ecf-ui\r\n    \"./SelectorItemTag\",\r\n// resources\r\n    \"dojo/text!./templates/_SelectorBase.html\"\r\n],\r\n\r\nfunction (\r\n// dojo\r\n    array,\r\n    declare,\r\n    domConstruct,\r\n// dijit\r\n    _FormValueMixin,\r\n    _TemplatedMixin,\r\n    _Widget,\r\n    _WidgetsInTemplateMixin,\r\n    Button,\r\n    Tooltip,\r\n// epi\r\n    epi,\r\n    Dialog,\r\n// epi-cms\r\n    _HasChildDialogMixin,\r\n// epi-ecf-ui\r\n    SelectorItemTag,\r\n// resources\r\n    template\r\n) {\r\n\r\n    return declare([_Widget, _TemplatedMixin, _WidgetsInTemplateMixin, _FormValueMixin, _HasChildDialogMixin], {\r\n        // tags: A base class for widgets that select multiple items in a dialog.\r\n        //      internal\r\n\r\n        templateString: template,\r\n\r\n        // tags:\r\n        //    protected\r\n        dialogTitle: null,\r\n\r\n        // tags:\r\n        //    protected\r\n        placeholderText: null,\r\n\r\n        // tags:\r\n        //    protected\r\n        ownDialog: true,\r\n\r\n        // dialog: [public] epi/shell/widget/dialog/Dialog\r\n        //      Represent the dialog which contains the tree, and will be opened when selector button is clicked.\r\n        dialog: null,\r\n\r\n        // tags:\r\n        //    protected\r\n        value: null,\r\n\r\n        // _maxItemTagsDisplay: [protected] int\r\n        //      Display maximum 2 item tags (in one line), if there are more selected items then append an ellipsis.\r\n        _maxItemTagsDisplay: 2,\r\n\r\n        // tags:\r\n        //    protected\r\n        _itemTagType: null,\r\n\r\n        postCreate: function(){\r\n            this.inherited(arguments);\r\n            this._renderEmptyTextIfNeeded();\r\n            this._itemTagType = this._itemTagType || SelectorItemTag;\r\n            this.dialog = this.dialog || this._createDialog();\r\n        },\r\n\r\n        _setValueAttr: function (value) {\r\n            this._internalSet(value);\r\n        },\r\n\r\n        _internalSet: function(value){\r\n            // _handleOnChange will call this._set\r\n            this._handleOnChange(value);\r\n            this._updateTextNode(value);\r\n        },\r\n\r\n        compare: function (value1, value2) {\r\n            // summary:\r\n            //      Compare two values (as returned by get(\"value\") for this widget).\r\n            //      This is required by _FormValueMixin._handleOnChange.\r\n            // tags:\r\n            //      protected, override\r\n\r\n            return epi.areEqual(value1, value2) ? 0 : -1;\r\n        },\r\n\r\n        _updateTextNode: function (value) {\r\n            //summary:\r\n            //    update the text node.\r\n            //\r\n            // value: array of selected items.\r\n            //\r\n            // tags:\r\n            //    protected\r\n\r\n            this.textNode.innerHTML = '';\r\n\r\n            var count = 0;\r\n            var notDisplayedItems = [];\r\n            array.forEach(value, function (item) {\r\n                if (count < this._maxItemTagsDisplay) {\r\n                    this._renderItemTag(item);\r\n                    count++;\r\n                } else {\r\n                    notDisplayedItems.push(item);\r\n                }\r\n            }, this);\r\n            this._renderEllipsisIfNeeded(notDisplayedItems);\r\n            this._renderEmptyTextIfNeeded();\r\n        },\r\n\r\n        _renderItemTag: function (item) {\r\n            //summary:\r\n            //    Renders a tag element for the item\r\n            //\r\n            // item: The item to create the tag for\r\n            //\r\n            // tags:\r\n            //    protected, abstract\r\n\r\n            var itemTag = new this._itemTagType({\r\n                item: item\r\n            });\r\n\r\n            this.own(itemTag, itemTag.on(\"removeClick\", function (item) {\r\n                domConstruct.destroy(itemTag.id);\r\n                itemTag.destroy();\r\n                this._onRemoveClick(item);\r\n                if (typeof this.focus === 'function') {\r\n                    this.focus();\r\n                }\r\n            }.bind(this)));\r\n\r\n            domConstruct.place(itemTag.domNode, this.textNode);\r\n        },\r\n\r\n        _renderEllipsisIfNeeded: function (notDisplayedItems) {\r\n            if (notDisplayedItems.length === 0){\r\n                return;\r\n            }\r\n            var ellipsisNode = domConstruct.create(\"span\", { innerHTML: \"...\" });\r\n            new Tooltip({\r\n                connectId: ellipsisNode,\r\n                label: this._getEllipsisTooltipLabel(notDisplayedItems)\r\n            });\r\n            domConstruct.place(ellipsisNode, this.textNode);\r\n        },\r\n\r\n        _getEllipsisTooltipLabel: function(notDisplayedItems) {\r\n            //summary:\r\n            //    Gets the tooltip label for the ellipsis node.\r\n            //\r\n            // notDisplayedItems: All items not already shown.\r\n            //\r\n            // tags:\r\n            //    protected, abstract\r\n        },\r\n\r\n        _renderEmptyTextIfNeeded: function () {\r\n            if (!this.value || this.value.length === 0) {\r\n                domConstruct.create('div', {\r\n                    innerHTML: this.placeholderText,\r\n                    \"class\": \"epi-categoriesGroup__message\"\r\n                }, this.textNode, \"only\");\r\n            }\r\n        },\r\n\r\n        _createDialog: function() {\r\n            var dialog = new Dialog({\r\n                title: this.dialogTitle,\r\n                content: this._createDialogContent(),\r\n                dialogClass: \"epi-dialog-portrait\",\r\n                destroyOnHide: false\r\n            });\r\n\r\n            if (!!this.ownDialog) {\r\n                this.own(dialog);\r\n            }\r\n\r\n            return dialog;\r\n        },\r\n\r\n        _createDialogContent: function() {\r\n            // tags:\r\n            //    protected, abstract\r\n        },\r\n\r\n        _onDialogShow: function () {\r\n            // tags:\r\n            //    protected, abstract\r\n        },\r\n\r\n        _onDialogExecute: function () {\r\n            var dialogContentValue = this._getDialogValue();\r\n            this._internalSet(dialogContentValue);\r\n            this._destroyHandles();\r\n        },\r\n\r\n        _getDialogValue: function () {\r\n            // tags:\r\n            //    protected, abstract\r\n        },\r\n\r\n        _onDialogHide: function () {\r\n            this._destroyHandles();\r\n        },\r\n\r\n        _onButtonClick: function () {\r\n            //summary:\r\n            //    Handle the add button click\r\n            // tags:\r\n            //    private\r\n\r\n            if (this.dialog) {\r\n                this._onDialogExecuteHandle = this.connect(this.dialog, 'onExecute', '_onDialogExecute');\r\n                this._onDialogShowHandle = this.connect(this.dialog, 'onShow', '_onDialogShow');\r\n                this._onDialogHideHandle = this.connect(this.dialog, 'onHide', '_onDialogHide');\r\n                this.set(\"isShowingChildDialog\", true);\r\n                this.dialog.show(true);\r\n            }\r\n        },\r\n\r\n        _onRemoveClick: function (itemToRemove) {\r\n            // tags:\r\n            //    protected, abstract\r\n\r\n            var itemIndex = -1;\r\n            array.some(this.value, function (listEntry, index) {\r\n                if (this._isItemEqual(itemToRemove, listEntry)) {\r\n                    itemIndex = index;\r\n                    return true;\r\n                }\r\n            }.bind(this));\r\n\r\n            if (itemIndex === -1) {\r\n                return;\r\n            }\r\n\r\n            //Here we copy the array so that everyone that holds a reference to this.value\r\n            //will understand that this is a new value.\r\n            var newValue = this.value.concat();\r\n            newValue.splice(itemIndex, 1);\r\n            this._internalSet(newValue);\r\n        },\r\n\r\n        _isItemEqual: function (itemToRemove, listEntry) {\r\n            // tags:\r\n            //    protected, abstract\r\n\r\n            return itemToRemove === listEntry;\r\n        },\r\n\r\n        _destroyHandles: function () {\r\n            this.set(\"isShowingChildDialog\", false);\r\n            this._onDialogExecuteHandle && this._onDialogExecuteHandle.remove();\r\n            this._onDialogShowHandle && this._onDialogShowHandle.remove();\r\n            this._onDialogHideHandle && this._onDialogHideHandle.remove();\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\BackToPreviousViewNotification.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\BundleEdit.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_ModelBindingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 10,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_ModelBindingMixin\",",
                "endLine": 10,
                "endColumn": 42
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/Breadcrumb' is an internal Episerver module and can have a breaking change in any release.",
                "line": 14,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/Breadcrumb\",",
                "endLine": 14,
                "endColumn": 32
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/BreadcrumbCurrentItem' is an internal Episerver module and can have a breaking change in any release.",
                "line": 15,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/BreadcrumbCurrentItem\",",
                "endLine": 15,
                "endColumn": 43
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/NotificationBar' is an internal Episerver module and can have a breaking change in any release.",
                "line": 21,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/NotificationBar\",",
                "endLine": 21,
                "endColumn": 45
            }
        ],
        "errorCount": 4,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n\r\n// dijit\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n\r\n// EPi Framework\r\n    \"epi/shell/widget/_ModelBindingMixin\",\r\n    \"epi/shell/TypeDescriptorManager\",\r\n\r\n// cms\r\n    \"epi-cms/widget/Breadcrumb\",\r\n    \"epi-cms/widget/BreadcrumbCurrentItem\",\r\n// commerce\r\n    \"./_RelationViewBase\",\r\n// Resources\r\n    \"dojo/text!./templates/BundleEdit.html\",\r\n// Widgets in the template\r\n    \"epi-cms/contentediting/NotificationBar\",\r\n    \"epi-cms/contentediting/StandardToolbar\",\r\n\"../contentediting/editors/BundleEntryCollectionEditor\"\r\n], function (\r\n// dojo\r\n    declare,\r\n\r\n// dijit\r\n    _TemplatedMixin,\r\n    _WidgetsInTemplateMixin,\r\n\r\n// EPi Framework\r\n    _ModelBindingMixin,\r\n    TypeDescriptorManager,\r\n\r\n// CMS\r\n    Breadcrumb,\r\n    BreadcrumbCurrentItem,\r\n\r\n// commerce\r\n    _RelationViewBase,\r\n// Resources\r\n    template\r\n) {\r\n\r\n    return declare([_RelationViewBase, _TemplatedMixin, _WidgetsInTemplateMixin, _ModelBindingMixin], {\r\n        // summary:\r\n        //    Represents the widget to edit bundle entries\r\n        // tags:\r\n        //    public\r\n        templateString: template,\r\n\r\n        contentPane: this.contentPane,\r\n\r\n        updateView: function (data, context) {\r\n            // summary:\r\n            //      Updates the view, to reflect data changes.(when opening this view second time)\r\n            // tags:\r\n            //      protected\r\n\r\n            this.inherited(arguments);\r\n\r\n            this.set(\"value\", context.id);\r\n        },\r\n\r\n        _setValueAttr: function (value) {\r\n            // summary:\r\n            //      Sets value for this widget.\r\n            // value: ContentReference\r\n            //      Input content link to get data from.\r\n\r\n            this.collectionList.set(\"value\", value);\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\CampaignItemList.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/builder/ButtonBuilder' is an internal Episerver module and can have a breaking change in any release.",
                "line": 14,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/builder/ButtonBuilder\",",
                "endLine": 14,
                "endColumn": 46
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/event\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/dom-class\",\r\n    \"dojo/html\",\r\n    \"dojo/keys\",\r\n    \"dojo/query\",\r\n    \"dojo/when\",\r\n// epi\r\n    \"epi\",\r\n    \"epi/dependency\",\r\n    \"epi/shell/command/builder/ButtonBuilder\",\r\n// commerce\r\n    \"./viewmodel/CampaignItemListModel\",\r\n    \"../MarketingUtils\",\r\n    \"./_MarketingListBase\",\r\n// resources\r\n    \"epi/i18n!epi/nls/commerce.widget.marketingitemlist\"\r\n],\r\nfunction (\r\n// dojo\r\n    declare,\r\n    event,\r\n    lang,\r\n    domClass,\r\n    html,\r\n    keys,\r\n    query,\r\n    when,\r\n// epi\r\n    epi,\r\n    dependency,\r\n    ButtonBuilder,\r\n// commerce\r\n    CampaignItemListModel,\r\n    MarketingUtils,\r\n    _MarketingListBase,\r\n// resources\r\n    resources\r\n) {\r\n    return declare([_MarketingListBase], {\r\n        typeIdentifiers: [\r\n            MarketingUtils.contentTypeIdentifier.salesCampaign,\r\n            MarketingUtils.contentTypeIdentifier.promotionData\r\n        ],\r\n\r\n        withDeleteButton: false,\r\n\r\n        postMixInProperties: function () {\r\n            this._facetFiltersService = this._facetFiltersService || dependency.resolve(\"epi.commerce.FacetFiltersService\");\r\n            this.inherited(arguments);\r\n        },\r\n\r\n        buildRendering: function () {\r\n            // summary:\r\n            //\t\tConstruct the UI for this widget with this.domNode initialized as a dgrid.\r\n            // tags:\r\n            //\t\tprotected\r\n\r\n            this.inherited(arguments);\r\n\r\n            this._modifyStoreToHandleDgridTree();\r\n        },\r\n\r\n        postCreate: function () {\r\n            // tags:\r\n            //      extensions\r\n\r\n            this.inherited(arguments);\r\n\r\n            domClass.add(this.grid.domNode, \"epi-campaign-list\");\r\n        },\r\n\r\n        getQuery: function (parentId) {\r\n            return {\r\n                query: this.queryName,\r\n                referenceId: parentId,\r\n                typeIdentifiers: this.typeIdentifiers,\r\n                campaignFacets: this._facetFiltersService.getFiltersAsJson()\r\n            };\r\n        },\r\n\r\n        createModel: function () {\r\n            return new CampaignItemListModel({\r\n                store: this.store\r\n            });\r\n        },\r\n\r\n        getListSettings: function () {\r\n            var settings = this.inherited(arguments);\r\n            if (this.withDeleteButton) {\r\n                this._replaceContextMenuByDeleteButton(settings.columns);\r\n            }\r\n\r\n            var self = this;\r\n            return lang.mixin(this.defaultGridMixin, lang.mixin(settings, {\r\n                dndDisabled: true,\r\n                showHeader: false,\r\n                renderArray: function () {\r\n                    return when(this.inherited(arguments), function (results) {\r\n                        //After calling the inherited renderArray function we clear the noDataNode.\r\n                        //This forces the grid to create a new node every time a campaign does not have any promotion.\r\n                        self.grid.noDataNode = null;\r\n\r\n                        if (results.length > 0) {\r\n                            var contentLinks = [], shouldUpdateRedemptions = true;\r\n                            for (var i = 0, length = results.length; i < length; i++) {\r\n                                var itemData = self.grid.row(results[i]).data;\r\n                                contentLinks.push(itemData.contentLink);\r\n                                shouldUpdateRedemptions &= MarketingUtils.isPromotionData(itemData.typeIdentifier);\r\n                            }\r\n                            self._updateOrderCounts(contentLinks);\r\n                            if (shouldUpdateRedemptions) {\r\n                                self._updateRedemptions(contentLinks);\r\n                            }\r\n                        }\r\n\r\n                        return results;\r\n                    });\r\n                },\r\n                onContextMenuClick: function (e) {\r\n                    this.inherited(arguments);\r\n                    self.onContextMenuClick(e);\r\n                }\r\n            }));\r\n        },\r\n\r\n        _updateOrderCounts: function (contentLinks) {\r\n            // summary:\r\n            //      Updates order count statistic for each campaign.\r\n            // contentLinks: [Array]\r\n            //      Collection of campaign/promotion link.\r\n            // tags:\r\n            //      private\r\n\r\n            when(this.model.getOrderCounts(contentLinks), function (results) {\r\n                if (!(results instanceof Array) || results.length === 0) {\r\n                    return;\r\n                }\r\n\r\n                var gridId = this.grid.id;\r\n                for (var i = 0, length = results.length; i < length; i++) {\r\n                    var orderCountNode = query(\"#\" + gridId + \"-row-\" + results[i].contentLink + \" .field-ordertotal .epi-primaryText\")[0];\r\n                    orderCountNode && html.set(orderCountNode, results[i].orderCount.toString());\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        _updateRedemptions: function (promotionLinks) {\r\n            // summary:\r\n            //      Updates redemptions for each promotion.\r\n            // promotionLinks: [Array]\r\n            //      Collection of promotion link.\r\n            // tags:\r\n            //      private\r\n\r\n            when(this.model.getRedemptions(promotionLinks), function (results) {\r\n                if (!(results instanceof Array) || results.length === 0) {\r\n                    return;\r\n                }\r\n\r\n                var gridId = this.grid.id;\r\n                for (var i = 0, length = results.length; i < length; i++) {\r\n                    var redemptionNode = query(\"#\" + gridId + \"-row-\" + results[i].contentLink + \" .field-redemptions .epi-primaryText\")[0];\r\n                    redemptionNode && html.set(redemptionNode, results[i].totalRedemptions.toString());\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        setupEvents: function () {\r\n            this.inherited(arguments);\r\n            this.grid.addKeyHandler(keys.DELETE, function (e) {\r\n                var row = this.grid.row(e);\r\n                var deleteCommand = this.model.createDeleteCommand();\r\n                deleteCommand.set(\"model\", row.data);\r\n                deleteCommand.execute();\r\n            }.bind(this));\r\n            this._setupOnStoreItemDeleted();\r\n        },\r\n\r\n        _modifyStoreToHandleDgridTree: function () {\r\n            // summary:\r\n            //      getChildren and mayHaveChildren are needed on the store\r\n            //      for dgrids tree module to work.\r\n            // tags:\r\n            //      private\r\n            var self = this;\r\n            this.store = lang.mixin(this.store, {\r\n                getChildren: function (parent, options) {\r\n                    return this.query(self.getQuery(parent.contentLink), options);\r\n                },\r\n                mayHaveChildren: function (parent) {\r\n                    // only campaigns have children\r\n                    return MarketingUtils.isSalesCampaign(parent.typeIdentifier);\r\n                }\r\n            });\r\n        },\r\n\r\n        onContextMenuClick: function (e) {\r\n            this.inherited(arguments);\r\n            var row = this.grid.row(e);\r\n            this.model.updateCommandModel(row.data);\r\n        },\r\n\r\n        _replaceContextMenuByDeleteButton: function (columnSettings) {\r\n            columnSettings = lang.mixin(columnSettings, {\r\n                contextMenu: {\r\n                    renderHeaderCell: function () { }, // no header\r\n                    renderCell: function (object, value, node, options) {\r\n                        var deleteCommand = this.model.createDeleteCommand(false);\r\n                        var builder = new ButtonBuilder({\r\n                            settings: {\r\n                                showLabel: false,\r\n                                \"class\": \"epi-chromeless\",\r\n                                onKeyDown: function (e) {\r\n                                    if (e.keyCode === keys.ENTER) {\r\n                                        //when pressing ENTER on button\r\n                                        //we need to stop the grids key\r\n                                        //handler changing context.\r\n                                        event.stop(e);\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                        deleteCommand.set(\"model\", object);\r\n                        builder.create(deleteCommand, node);\r\n                    }.bind(this),\r\n                    className: \"epi-columnNarrow\",\r\n                    sortable: false\r\n                }\r\n            });\r\n        },\r\n\r\n        _setupOnStoreItemDeleted: function () {\r\n            if (epi.isEmpty(this.store) || typeof this.store.on !== \"function\") {\r\n                return;\r\n            }\r\n\r\n            this.own(\r\n                this.store.on(\"delete\", function (deletedItem) {\r\n                    var deleted = !!(deletedItem && deletedItem.id);\r\n                    deleted && this.grid && this.grid.refresh();\r\n                }.bind(this))\r\n            );\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\CatalogContentDetails.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/layout/SimpleContainer' is an internal Episerver module and can have a breaking change in any release.",
                "line": 21,
                "column": 9,
                "nodeType": "Literal",
                "source": "        \"epi/shell/layout/SimpleContainer\",",
                "endLine": 21,
                "endColumn": 43
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/ContentDetails' is an internal Episerver module and can have a breaking change in any release.",
                "line": 26,
                "column": 9,
                "nodeType": "Literal",
                "source": "        \"epi-cms/contentediting/ContentDetails\",",
                "endLine": 26,
                "endColumn": 48
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n        \"dojo\",\r\n        \"dojo/_base/array\",\r\n        \"dojo/_base/declare\",\r\n        \"dojo/_base/lang\",\r\n        \"dojo/_base/url\",\r\n        \"dojo/_base/window\",\r\n        \"dojo/aspect\",\r\n        \"dojo/dom-style\",\r\n        \"dojo/dom-construct\",\r\n        \"dojo/string\",\r\n        \"dojo/topic\",\r\n        \"dojo/when\",\r\n\r\n// dijit\r\n        \"dijit/form/Button\",\r\n\r\n// epi shell\r\n        \"epi/dependency\",\r\n        \"epi/shell/layout/SimpleContainer\",\r\n        \"epi/shell/TypeDescriptorManager\",\r\n        \"epi/Url\",\r\n\r\n// epi cms\r\n        \"epi-cms/contentediting/ContentDetails\",\r\n        \"epi-cms/core/PermanentLinkHelper\",\r\n\r\n// commerce\r\n        \"../contentediting/ModelSupport\",\r\n\r\n// resources\r\n        \"epi/i18n!epi/cms/nls/commerce.widget.catalogcontentdetails\",\r\n        \"dojo/text!./templates/CatalogContentDetails.html\"\r\n],\r\n    function (\r\n// dojo\r\n        dojo,\r\n        array,\r\n        declare,\r\n        lang,\r\n        url,\r\n        win,\r\n        aspect,\r\n        domStyle,\r\n        domConstruct,\r\n        dojoString,\r\n        topic,\r\n        when,\r\n\r\n// dijit\r\n        Button,\r\n\r\n// epi shell\r\n        dependency,\r\n        SimpleContainer,\r\n        TypeDescriptorManager,\r\n        Url,\r\n        ContentDetails,\r\n        PermanentLinkHelper,\r\n\r\n// commerce\r\n        ModelSupport,\r\n\r\n// resources\r\n        catalogContentDetailsResources,\r\n        template\r\n        ) {\r\n\r\n        return declare([ContentDetails], {\r\n            templateString: template,\r\n\r\n            _store: null,\r\n\r\n            // thumbnailToken: String\r\n            //      Represents the thumbnail token / thumbnail size to be displayed on header as content's asset preview.\r\n            //      This should match the LargeThumbnail property name of EPiServer.Commerce.SpecializedProperties.CommerceImage.\r\n            //      In order to modify the thumnail size, please update EPiServer.Commerce.SpecializedProperties.CommerceImage.LargeThumbnail's ImageDescriptor,\r\n            //      or create a new property, and set this thumbnailToken value to that property name.\r\n            thumbnailToken: \"LargeThumbnail\",\r\n\r\n            // thumbnailNode: DOM node\r\n            //      Represents the thumbnail node, which would be added to the header section, to display content's thumbnail.\r\n            thumbnailNode: null,\r\n\r\n            postMixInProperties: function () {\r\n                this.inherited(arguments);\r\n                this.resources = dojo.mixin(this.resources, catalogContentDetailsResources);\r\n\r\n                if (!this._store) {\r\n                    var registry = dependency.resolve(\"epi.storeregistry\");\r\n                    this._store = registry.get(\"epi.commerce.relation\");\r\n                }\r\n            },\r\n\r\n            buildRendering: function () {\r\n                this.inherited(arguments);\r\n\r\n                // Escaping is tricky in the data-dojo-props JSON notation, so setting tooltip here instead.\r\n                this.dropdownButton.set(\"tooltip\", this.resources.toolsbutton.tooltip);\r\n            },\r\n\r\n            _setModelAttr: function () {\r\n                this.inherited(arguments);\r\n\r\n                if (this.model) {\r\n                    this.own(this.model.watch(\"dataModel\", this._onDataModelChanged.bind(this)));\r\n                }\r\n            },\r\n\r\n            _onDataModelChanged: function () {\r\n                // summary:\r\n                //      On data model changed, listen for model's onPropertyEdited even, to update thumbnail image in the header.\r\n                // tags:\r\n                //      private\r\n\r\n                if (this.model && this.model.dataModel) {\r\n                    this.own(aspect.after(this.model.dataModel, \"onPropertyEdited\", function (propertyName, value) {\r\n                        if (propertyName !== \"commerceMediaCollection\") {\r\n                            return;\r\n                        }\r\n\r\n                        this._onMediaCollectionPropertyChanged(value);\r\n                    }.bind(this), true /*receiveArguments setting this as true in order to get corrected propertyName, value arguments (which are original arguments)*/));\r\n                    this._setDefaultAssetGroup();\r\n                    // we need to update thumbnail on first load too\r\n                    this._onMediaCollectionPropertyChanged(this.model.dataModel.contentModel && this.model.dataModel.contentModel[\"epi-commerceMediaCollection\"] || null);\r\n\r\n                    var isProductInformationVisible = this._setProductInformationVisibility(this.model.dataModel.contentData);\r\n                    if (isProductInformationVisible) {\r\n                        this._setProductInformation(this.model.dataModel.contentData);\r\n                    }\r\n                }\r\n            },\r\n\r\n            _onMediaCollectionPropertyChanged: function (value) {\r\n                // summary:\r\n                //      When commerceMediaCollection property value changed, get the first asset to set as content thumbnail.\r\n                // tags:\r\n                //      private\r\n\r\n                if (!value || value.length < 1) {\r\n                    this._renderThumbnail(\"\"); // if content's asset is empty, let's set thumbnail image's source as blank.\r\n                    return;\r\n                }\r\n\r\n                var firstAsset = null;\r\n                // looking for the first image in asset list\r\n                array.some(value, function (item) {\r\n                    if (item && TypeDescriptorManager.isBaseTypeIdentifier(item.assetType, \"episerver.core.icontentimage\")) {\r\n                        if (!firstAsset){\r\n                            firstAsset = item;\r\n                        }\r\n                        if (item.groupName === this.get(\"defaultGroupName\")){\r\n                            firstAsset = item;\r\n                            return item;\r\n                        }\r\n                    }\r\n                }, this);\r\n\r\n                if (!firstAsset) {\r\n                    this._renderThumbnail(\"\");\r\n                    return;\r\n                }\r\n\r\n                if (firstAsset.previewUrl) {\r\n                    this._renderThumbnail(firstAsset.previewUrl);\r\n                } else {\r\n                    // if firstAsset.previewUrl is not ready, we need to get its preview URL via PermanentLinkHelper\r\n                    when(PermanentLinkHelper.getContent(firstAsset.assetKey), function (content) {\r\n                        if (!content) { // content not found\r\n                            this._renderThumbnail(\"\");\r\n                        } else {\r\n                            this._renderThumbnail(content.previewUrl);\r\n                        }\r\n                    }.bind(this));\r\n                }\r\n            },\r\n\r\n            _setDefaultAssetGroup: function() {\r\n                if (!this.model || !this.model.dataModel || !this.model.dataModel.metadata || !this.model.dataModel.metadata.properties){\r\n                    //clear any previous value so we don't keep the default group from any other model.\r\n                    this.set(\"defaultGroupName\", undefined);\r\n                    return;\r\n                }\r\n                var defaultGroupName;\r\n                array.some(this.model.dataModel.metadata.properties, function(property){\r\n                    if (property.name  === \"CommerceMediaCollection\" && property.settings){\r\n                        defaultGroupName = property.settings.defaultAssetGroupName;\r\n                        return true;\r\n                    }\r\n                });\r\n                this.set(\"defaultGroupName\", defaultGroupName);\r\n            },\r\n\r\n            addChild: function (w) {\r\n                this.widgetContainer.addChild(w);\r\n            },\r\n\r\n            _renderThumbnail: function (imageUrl) {\r\n                // summary:\r\n                //      Injects the thumbnail image to the header section (if it was not added), and update its image URL.\r\n                // tags:\r\n                //      protected\r\n\r\n                var parentNode = this.domNode.parentNode;\r\n                if (!parentNode) {\r\n                    return;\r\n                }\r\n                \r\n                var imageSource = \"\";\r\n                if (imageUrl) {\r\n                    var url = new Url(imageUrl);\r\n                    url.path += \"/\" + this.thumbnailToken;\r\n                    lang.mixin(url.query, { time: new Date().getTime() }); // append time parameter to make sure image will be refresh all the time, to avoid cache issue.\r\n                    imageSource = url.toString();\r\n                }\r\n\r\n                if (!this.thumbnailNode) {\r\n                    this.thumbnailNode = domConstruct.create(\"img\", {\r\n                        src: imageSource,\r\n                        className: \"epi-heading-thumbnail\"\r\n                    });\r\n                    domConstruct.place(this.thumbnailNode, parentNode, \"first\");\r\n                } else {\r\n                    this.thumbnailNode.src = imageSource;\r\n                }\r\n\r\n                domStyle.set(this.thumbnailNode, \"display\", !!imageSource ? \"block\" : \"none\");\r\n            },\r\n\r\n            _setExistingLanguagesAttr: function (languages) {\r\n                this.languagesNode.innerHTML = \"\";\r\n\r\n                // Create text or link elements base on language information.\r\n                array.forEach(languages, function (item, idx) {\r\n                    var elm, isLast = idx === languages.length - 1;\r\n                    if (this.model.dataModel.currentContentLanguage === item.text) {\r\n                        elm = domConstruct.create(\"span\", {\r\n                            innerHTML: item.urlSegment\r\n                        });\r\n                    } else {\r\n                        var url = new dojo._Url(window.top.location.href);\r\n                        elm = domConstruct.create(\"a\", {\r\n                            innerHTML: item.urlSegment,\r\n                            href: [url.scheme, \"://\", url.authority, url.path, \"?language=\", item.text, \"#context=epi.cms.contentdata:///\", item.contentLink].join(\"\"),\r\n                            \"class\": \"epi-visibleLink\"\r\n                        });\r\n                    }\r\n                    domConstruct.place(elm, this.languagesNode);\r\n\r\n                    if (!isLast) {                        \r\n                        domConstruct.create(\"span\", { innerHTML: \", \" }, this.languagesNode);\r\n                    }\r\n                }, this);\r\n            },\r\n\r\n            _setProductInformation: function (contentData) {\r\n                if (!contentData) {\r\n                    return;\r\n                }\r\n\r\n                var query = {\r\n                    referenceId: contentData.contentLink,\r\n                    relationTypes: [ModelSupport.relationType.productVariation],\r\n                    requestMode: ModelSupport.relationRequestMode.byTarget\r\n                };\r\n\r\n                when(this._store.query(query)).then(function (products) {\r\n                    if (!products || products.length === 0) {\r\n                        this.productNode.innerHTML = catalogContentDetailsResources.none;\r\n                    } else if (products.length === 1) {\r\n                        this._createNavigationButton(products[0].name, products[0].source);\r\n                    } else {\r\n                        this.productNode.innerHTML = dojoString.substitute(\r\n                            catalogContentDetailsResources.products,\r\n                            { numberOfProducts: products.length });\r\n                    }\r\n                }.bind(this));\r\n            },\r\n\r\n            _createNavigationButton: function (label, contentLink) {\r\n                var linkButton = new Button({\r\n                    label: label,\r\n                    \"class\": \"epi-chromelessButton epi-chromeless--text-only epi-visibleLink\",\r\n                    onClick: function () {\r\n                        topic.publish(\"/epi/shell/context/request\", { uri: \"epi.cms.contentdata:///\" + contentLink }, { sender: this });\r\n                    }.bind(this)\r\n                }, this.productNode);\r\n\r\n                this.own(linkButton);\r\n            },\r\n\r\n            _setProductInformationVisibility: function (contentData) {\r\n                if (!contentData) {\r\n                    return;\r\n                }\r\n\r\n                if (TypeDescriptorManager.isBaseTypeIdentifier(contentData.typeIdentifier, ModelSupport.contentTypeIdentifier.variationContent)) {\r\n                    domStyle.set(this.productRow, \"display\", \"block\");\r\n                    return true;\r\n                } else {\r\n                    domStyle.set(this.productRow, \"display\", \"none\");\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n    });\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\CatalogContentList.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_FocusableMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 24,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_FocusableMixin\",",
                "endLine": 24,
                "endColumn": 39
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/NotificationBar' is an internal Episerver module and can have a breaking change in any release.",
                "line": 31,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/NotificationBar\",",
                "endLine": 31,
                "endColumn": 45
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // Dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/json\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/aspect\",\r\n    \"dojo/Deferred\",\r\n    \"dojo/dom-class\",\r\n    \"dojo/dom-construct\",\r\n    \"dojo/dom-style\",\r\n    \"dojo/keys\",\r\n    \"dojo/topic\",\r\n    \"dojo/when\",\r\n\r\n    //Dgrid\r\n    \"dgrid/selector\",\r\n    \"dgrid/tree\",\r\n\r\n    // Epi Shell\r\n    \"epi\",\r\n    \"epi/shell/dgrid/util/misc\",\r\n    \"epi/shell/TypeDescriptorManager\",\r\n    \"epi/shell/widget/_FocusableMixin\",\r\n    \"epi/shell/widget/dialog/Alert\",\r\n    \"epi/string\",\r\n\r\n    // Epi CMS\r\n    \"epi-cms/core/ContentReference\",\r\n    \"epi-cms/contentediting/ContentActionSupport\",\r\n    \"epi-cms/contentediting/NotificationBar\",\r\n    \"epi-cms/dgrid/formatters\",\r\n\r\n    // Epi Commerce\r\n    \"./_ContentSecurableList\",\r\n    \"./_FullHeightContentMixin\",\r\n    \"./viewmodel/CatalogContentListViewModel\",\r\n    \"./CommandToolbar\",\r\n    \"./CommandButton\",\r\n    \"./CommandToggleButton\",\r\n    \"./MarketSelector\",\r\n    \"./SimpleViewNotification\",\r\n    \"../contentediting/ModelSupport\",\r\n\r\n    // Resources\r\n    \"dojo/text!./templates/CatalogContentList.html\",\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.cataloglist\",\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.catalogcontentlist\"\r\n], function (\r\n    // Dojo\r\n    array,\r\n    declare,\r\n    json,\r\n    lang,\r\n    aspect,\r\n    Deferred,\r\n    domClass,\r\n    domConstruct,\r\n    domStyle,\r\n    keys,\r\n    topic,\r\n    when,\r\n\r\n    //Dgrid\r\n    selector,\r\n    tree,\r\n\r\n    // Epi Shell\r\n    epi,\r\n    misc,\r\n    TypeDescriptorManager,\r\n    _FocusableMixin,\r\n    Alert,\r\n    epiString,\r\n\r\n    // Epi CMS\r\n    ContentReference,\r\n    ContentActionSupport,\r\n    NotificationBar,\r\n    formatters,\r\n\r\n    // Epi Commerce\r\n    _ContentSecurableList,\r\n    _FullHeightContentMixin,\r\n    CatalogContentListViewModel,\r\n    CommandToolbar,\r\n    CommandButton,\r\n    CommandToggleButton,\r\n    MarketSelector,\r\n    SimpleViewNotification,\r\n    ModelSupport,\r\n\r\n    // Resources\r\n    template,\r\n    res,\r\n    catalogContentListResources) {\r\n\r\n        return declare([_ContentSecurableList, _FocusableMixin, _FullHeightContentMixin], {\r\n            // summary:\r\n            //    Lists the content of catalogs and categories.\r\n            // description:\r\n            //    This is the widget that lists the content of catalogs and categories.\r\n            // tags:\r\n            //    public\r\n            resources: catalogContentListResources,\r\n\r\n            gridOverlayClass: \"epi-grid-dnd-overlay\",\r\n\r\n            templateString: template,\r\n\r\n            _multipleSelectionClassName: \"epi-dgrid-multiselect--multiple-selection\",\r\n\r\n            storeKeyName: \"epi.cms.content.light\",\r\n\r\n            _noDataMessage: catalogContentListResources.nodatamessage,\r\n\r\n            _simpleViewNotification: null,\r\n\r\n            // contextChangeEvent: [public] String\r\n            //      Setup so that the context change events are not configured in the base class.\r\n            contextChangeEvent: \"\",\r\n\r\n            commandToolbar: null,\r\n\r\n            postCreate: function () {\r\n                this.inherited(arguments);\r\n\r\n                // Watching instead of binding since we need the old value as well.\r\n                this.own(\r\n                    this.model.watch(\"sortMode\", this._onSortModeChanged.bind(this)),\r\n                    this.model.clipboardManager.watch(\"data\", function (name, oldValues, newValues) {\r\n                        var isCopy = this.model.clipboardManager.isCopy(),\r\n                            grid = this.grid;\r\n\r\n                        var toggleCut = function (items, isCut) {\r\n                            array.forEach(items, function (clip) {\r\n                                var row;\r\n                                if (clip && clip.data && clip.data.rowId) {\r\n                                    var rowId = clip.data.rowId;\r\n                                    row = grid.row(rowId);\r\n                                    if (row && row.element) {\r\n                                        domClass.toggle(row.element, \"epi-opacity50\", isCut);\r\n                                    }\r\n                                }\r\n                            });\r\n                        };\r\n\r\n                        if (oldValues instanceof Array) {\r\n                            toggleCut(oldValues, false);\r\n                        }\r\n\r\n                        if (!isCopy && newValues instanceof Array) {\r\n                            toggleCut(newValues, true);\r\n                        }\r\n                    }.bind(this))\r\n                );\r\n\r\n                if (!this._simpleViewNotification) {\r\n                    this._simpleViewNotification = new SimpleViewNotification();\r\n\r\n                    this.own(\r\n                        this._simpleViewNotification.watch(\"notification\", this._defaultNotificationWatchHandler.bind(this))\r\n                    );\r\n                }\r\n            },\r\n\r\n            postMixInProperties: function () {\r\n                this.inherited(arguments);\r\n                this._modifyStoreToHandleDgridTree();\r\n\r\n                lang.mixin(this.defaultGridMixin.dndParams, {\r\n                    selfAccept: true,\r\n                    copyOnly: false,\r\n                    accept: [ModelSupport.contentTypeIdentifier.entryContentBase, ModelSupport.contentTypeIdentifier.nodeContent]\r\n                });\r\n            },\r\n\r\n            _defaultNotificationWatchHandler: function (/*String*/name, /*Object*/oldValue, /*Object*/newValue) {\r\n                // summary:\r\n                //      Add/remove notification to/from the notification bar.\r\n                // tags:\r\n                //      private\r\n\r\n                if (oldValue) {\r\n                    this.notificationBar.remove(oldValue);\r\n                }\r\n\r\n                if (newValue && newValue.content) {\r\n                    this.notificationBar.add(newValue);\r\n                }\r\n\r\n                this.layout();\r\n            },\r\n\r\n            _modifyStoreToHandleDgridTree: function () {\r\n                // summary:\r\n                //      getChildren and mayHaveChildren are needed on the store\r\n                //      for dgrids tree module to work.\r\n                // tags:\r\n                //      private\r\n\r\n                var self = this;\r\n                this.store = lang.mixin(this.store, {\r\n                    getChildren: function (parent, options) {\r\n                        var originalQuery = self.grid.get(\"query\");\r\n                        var queryOptions = self._getQueryOptions(parent.contentLink, false, false, originalQuery);\r\n                        return this.query(queryOptions.queryParameters, queryOptions.queryOptions);\r\n                    },\r\n                    mayHaveChildren: function (parent) {\r\n                        // This is only called by dgrids tree module and therefore we only want to do it on entries.\r\n                        return parent.hasChildren\r\n                            && TypeDescriptorManager.isBaseTypeIdentifier(parent.typeIdentifier, ModelSupport.contentTypeIdentifier.entryContentBase);\r\n                    }\r\n                });\r\n            },\r\n\r\n            startup: function () {\r\n                // summary:\r\n                //      Adds the breadcrumb widget to the top of the list widget.\r\n                // tags:\r\n                //      protected\r\n                this.inherited(arguments);\r\n\r\n                // Only the selection column should update selections.\r\n                this.grid.set(\"selectionMode\", \"none\");\r\n\r\n                var dndSource = this.grid.dndSource;\r\n\r\n                //override function so that nothing is appended to the dom after a mouseup event is completed.\r\n                dndSource.insertNodes = function () { };\r\n\r\n                // Making the dragsource handle multiple selects\r\n                dndSource.singular = false;\r\n                // We need to allow nested selections to be able to dnd expanded items.\r\n                dndSource.allowNested = true;\r\n\r\n                this.own(\r\n                    topic.subscribe(\"relationChanged\", function () {\r\n                        this.grid.refresh();\r\n                    }.bind(this)),\r\n                    topic.subscribe(\"catalogItemsMoved\", function () {\r\n                        // Clear the selection, clipboard and refresh the grid when a catalog item has been moved.\r\n                        this.grid.clearSelection();\r\n                        this.updateSelection();\r\n                    }.bind(this)),\r\n                    topic.subscribe(\"catalogContentDeleted\", function (deletedItems) {\r\n\r\n                        var isDeletedItemInGrid = array.some(deletedItems, function (item) {\r\n                            var row = this.grid.row(item);\r\n\r\n                            // We know that the item exists in the grid if the row has a contextId.\r\n                            return row && row.data && row.data.contextId;\r\n                        }.bind(this));\r\n\r\n                        if (isDeletedItemInGrid) {\r\n                            this.grid.clearSelection();\r\n                            this.updateSelection();\r\n                            this.grid.refresh();\r\n                        }\r\n                    }.bind(this)),\r\n                    topic.subscribe(\"itemsPasted\", function () {\r\n                        this.grid.refresh();\r\n                    }.bind(this)),\r\n                    aspect.after(dndSource, \"onDndStart\", function (source, nodes) {\r\n                        var accepted = dndSource.accept && dndSource.checkAcceptance(source, nodes);\r\n                        domClass[accepted ? \"add\" : \"remove\"](this.overlayDnd, this.gridOverlayClass);\r\n                    }.bind(this), true),\r\n                    this.model.on(\"onMoveUp\", this._sortItemUpwards.bind(this)),\r\n                    this.model.on(\"onMoveDown\", this._sortItemDownwards.bind(this)),\r\n                    aspect.after(this.grid.dndSource, \"onDropData\", this._onDndDrop.bind(this), true)\r\n                );\r\n\r\n                // Grid can handle these, no need to \"own\" them.\r\n                this.grid.on(\"dgrid-rowcopy\", this._onRowCopy.bind(this));\r\n                this.grid.on(\"dgrid-rowcut\", this._onRowCut.bind(this));\r\n                this.grid.on(\"dgrid-rowpaste\", this._onRowPaste.bind(this));\r\n                this.grid.addKeyHandler(keys.ENTER, this._onChangeContext.bind(this));\r\n                this.grid.addKeyHandler(keys.SPACE, function (evt) {\r\n                    var row = this.grid.row(evt);\r\n                    if (this.grid.isSelected(row)) {\r\n                        this.grid.deselect(row);\r\n                    } else {\r\n                        this.grid.select(row);\r\n                    }\r\n                }.bind(this));\r\n            },\r\n\r\n            _onRowCopy: function () {\r\n                this.model.getCommand(\"copy\").execute();\r\n            },\r\n\r\n            _onRowCut: function () {\r\n                this.model.getCommand(\"cut\").execute();\r\n            },\r\n\r\n            _onRowPaste: function () {\r\n                this.model.getCommand(\"pasteOnContext\").execute();\r\n            },\r\n\r\n            toggleThumbnails: function () {\r\n                this.model._commandRegistry.toggleThumbnails.command.execute();\r\n                var showThumbnails = this.model.get(\"showThumbnails\");\r\n\r\n                this.thumbnail.set(\"checked\", showThumbnails);\r\n                this.listview.set(\"checked\", !showThumbnails);\r\n\r\n                domClass.toggle(this.grid.columns.thumbnail, \"dgrid-header-hidden\");\r\n                domClass.toggle(this.grid.columns.thumbnail.headerNode, \"dgrid-header-hidden\");\r\n\r\n                this._refreshView();\r\n            },\r\n\r\n            buildRendering: function () {\r\n                this.inherited(arguments);\r\n\r\n                var commands = this.model.getSelectionCommands();\r\n                this.commandToolbar = new CommandToolbar(commands);\r\n                this.own(this.commandToolbar);\r\n                domConstruct.place(this.commandToolbar.domNode, this.leadingNode);\r\n\r\n                // listen for command toolbar's layout changed, to resize children (grid)\r\n                this.own(aspect.after(this.commandToolbar, \"layout\", function () {\r\n                    this.resize();\r\n                }.bind(this)));\r\n            },\r\n\r\n            resize: function () {\r\n                // summary:\r\n                //\t\tResize this widget to the given dimensions.\r\n                // tags:\r\n                //\t\tprotected\r\n\r\n                this.inherited(arguments);\r\n\r\n                if (this.grid) {\r\n                    this.grid.resize();\r\n                    // make the content 100% height its container\r\n                    this._setHeight(this.grid.domNode);\r\n                }\r\n            },\r\n\r\n            _onRowClick: function (e) {\r\n                this._onChangeContext(e);\r\n            },\r\n\r\n            _toggleColumnHeaderClickable: function () {\r\n                // summary:\r\n                //      Sets CSS \"pointer-events\" property for each column header dom node in order to disable click on it when sort mode is TRUE.\r\n                //      Otherwise, remove this CSS property to restore original click feature.\r\n                //      For more information, please refer: https://developer.mozilla.org/en/docs/Web/CSS/pointer-events?v=example\r\n                // tags:\r\n                //      private\r\n\r\n                domClass.toggle(this.grid.domNode, \"epi-dgrid--sort-mode\", this.model.get(\"sortMode\"));\r\n            },\r\n\r\n            setupEvents: function () {\r\n                this.inherited(arguments);\r\n                this.own(this.grid.on(\"dgrid-deselect\", this.updateSelection.bind(this)));\r\n                this.own(this.grid.on(\".epi-iconContextMenu:click\", this.onContextMenuClick.bind(this)));\r\n\r\n                for (var columnName in this.getColumnSettings()) {\r\n                    if (columnName === \"checkbox\" || columnName === \"expando\") {\r\n                        continue;\r\n                    }\r\n                    this.own(this.grid.on(\".dgrid-cell.dgrid-column-\" + columnName + \":click\", this._onRowClick.bind(this)));\r\n                }\r\n\r\n                var self = this;\r\n                this.own(\r\n                    aspect.around(this.grid.dndSource, \"checkAcceptance\", function (originalMethod) {\r\n                        return function (source, nodes) {\r\n                            if (source !== self.grid.dndSource || !self.model.sortMode) {\r\n                                return false;\r\n                            }\r\n\r\n                            return originalMethod.call(self.grid.dndSource, arguments);\r\n                        };\r\n                    })\r\n                );\r\n            },\r\n\r\n            updateSelection: function () {\r\n                var selection = [];\r\n                for (var id in this.grid.selection) {\r\n                    var row = this.grid.row(id);\r\n                    lang.mixin(row.data, { rowId: id });\r\n                    selection.push(row.data);\r\n                }\r\n\r\n                this.model.updateSelection(selection);\r\n                this._removeContextMenuWhenRowIsSelected();\r\n            },\r\n\r\n            getListSettings: function () {\r\n                // summary:\r\n                //      Override to specify the settings used to create the list.\r\n                // tags:\r\n                //      protected\r\n\r\n                var settings = this.inherited(arguments);\r\n\r\n                return lang.mixin(settings, { cellNavigation: false, noDataMessage: this._noDataMessage });\r\n            },\r\n\r\n            _onSelect: function (e) {\r\n                // summary:\r\n                //\t\tExtends _onSelect to remove context menu when multiple rows are selected\r\n                //      and expands rows that can be expanded.\r\n                // tags:\r\n                //\t\tprotected override\r\n\r\n                this.inherited(arguments);\r\n\r\n                this.updateSelection();\r\n            },\r\n\r\n            _removeContextMenuWhenRowIsSelected: function () {\r\n                // summary:\r\n                //\t\tRemoves context menu when multiple rows are selected. If a single row is selected the context menu is not removed.\r\n                // tags:\r\n                //\t\tprotected\r\n\r\n                if (this.model.numSelectedRows > 1) {\r\n                    domClass.add(this.grid.contentNode, this._multipleSelectionClassName);\r\n                } else {\r\n                    domClass.remove(this.grid.contentNode, this._multipleSelectionClassName);\r\n                }\r\n            },\r\n\r\n            onContextMenuClick: function (e) {\r\n                // we have to update the commands even though we're technically not selecting this row.\r\n                // Selection should only be done in the checkboxes column.\r\n                var row = this.grid.row(e);\r\n                var data = lang.mixin(row.data, { rowId: row.id });\r\n                this.model.set(\"model\", { data: [data] });\r\n\r\n                // Display arrow for menu item whenever have sub menu in context menu\r\n                array.forEach(this.grid.contextMenu.getChildren(), function (menu, i) {\r\n                    if (menu.arrowWrapper && menu.popup) {\r\n                        domStyle.set(menu.arrowWrapper, \"visibility\", \"\");\r\n                    }\r\n                });\r\n\r\n                this.grid.clearSelection();\r\n                this.grid.select(row);\r\n\r\n                var parameter = this._createCommandAvailabilityParameter(row);\r\n\r\n                this.model.setCommandAvailability(parameter);\r\n            },\r\n\r\n            _createCommandAvailabilityParameter: function (row) {\r\n                // summary:\r\n                //      Creates a parameter object used for determining a Command's\r\n                //      CanExecute and Availability values.\r\n                // tags:\r\n                //      private\r\n                var previousSibling = this.grid.row(row.element[\"previousSibling\"]);\r\n                var nextSibling = this.grid.row(row.element[\"nextSibling\"]);\r\n                var parameter = {\r\n                    isFirstItem: !previousSibling,\r\n                    isLastItem: !nextSibling\r\n                };\r\n\r\n                return parameter;\r\n            },\r\n\r\n            createModel: function () {\r\n                return new CatalogContentListViewModel();\r\n            },\r\n\r\n            updateView: function (data, context) {\r\n                // summary:\r\n                //      This is called when the context has changed.\r\n                // tags:\r\n                //      public override\r\n\r\n                this._simpleViewNotification.updateNotification(context);\r\n                when(this.store.get(context.id), function (contentData) {\r\n                    this.toolbar.update({\r\n                        currentContext: context,\r\n                        viewConfigurations: {\r\n                            availableViews: data.availableViews,\r\n                            viewName: data.viewName\r\n                        },\r\n                        contentData: contentData\r\n                    });\r\n\r\n                    this.fetchData(context);\r\n                }.bind(this));\r\n            },\r\n\r\n            fetchData: function (context) {\r\n                // summary:\r\n                //\t\tFetches data by setting a query on the grid. A getrelations query will be performed on the store.\r\n                // tags:\r\n                //\t\tprotected\r\n\r\n                this._setGridQuery(context);\r\n\r\n                // Disable sort mode when the context is catalog content\r\n                var sortModeCommand = this.model.getCommand(\"toggleSortMode\");\r\n                if (sortModeCommand) {\r\n                    var isCatalogContext = TypeDescriptorManager.isBaseTypeIdentifier(context.dataType, ModelSupport.contentTypeIdentifier.catalogContent);\r\n                    sortModeCommand.set(\"canExecute\", !isCatalogContext);\r\n\r\n                    // Reset all commands visibility if the sort mode is enabled\r\n                    if (isCatalogContext && this.model.get(\"sortMode\")) {\r\n                        this.model.set(\"sortMode\", false);\r\n                    }\r\n                }\r\n\r\n                // Navigate content tree use content without work id. So should set selection data with context id in unspecific version reference.\r\n                var contextLink = new ContentReference(context.id).createVersionUnspecificReference().toString();\r\n\r\n                when(this.store.get(contextLink), function (contentData) {\r\n                    this.updateSelection();\r\n\r\n                    var pasteOnContextCommand = this.model.getCommand(\"pasteOnContext\");\r\n                    pasteOnContextCommand.selection.set(\"data\", [{ type: \"epi.cms.contentdata\", data: contentData }]);\r\n                }.bind(this));\r\n            },\r\n\r\n            _setGridQuery: function (context) {\r\n                if (!context) {\r\n                    return;\r\n                }\r\n                var supportSort = !!context.capabilities && !!context.capabilities.sortChildren;\r\n                var simplified = !supportSort;\r\n                var onlyTopLevel = supportSort;\r\n                var queryOptions = this._getQueryOptions(context.id, simplified, onlyTopLevel);\r\n\r\n                this.grid.set(\"query\", queryOptions.queryParameters, queryOptions.queryOptions);\r\n            },\r\n\r\n            _getQueryOptions: function (id, simplified, onlyTopLevelChildren, originalQuery) {\r\n                var currentCategory = id;\r\n                if (originalQuery) {\r\n                    currentCategory = originalQuery.currentCategory;\r\n                }\r\n                return {\r\n                    queryOptions: { ignore: [\"query\"], parentId: id, sort: (!simplified && !!onlyTopLevelChildren) ? [{ attribute: \"typeSortIndex\" }] : null },\r\n                    queryParameters: {\r\n                        referenceId: id,\r\n                        query: \"getchildren\",\r\n                        market: this.marketSelector ? this.marketSelector.value : null,\r\n                        includeProperties: true,\r\n                        allLanguages: true,\r\n                        toplevel: onlyTopLevelChildren,\r\n                        currentCategory: currentCategory,\r\n                        simplified: simplified,\r\n                        sortMode: this.model.get(\"sortMode\")\r\n                    }\r\n                };\r\n            },\r\n\r\n            getColumnSettings: function () {\r\n                // summary:\r\n                //\t\tReturns an object with the settings for the columns of the grid.\r\n                // tags:\r\n                //\t\tprivate\r\n\r\n                var columnSettings = this.inherited(arguments) || {};\r\n\r\n                return lang.mixin({\r\n                    expando: tree({\r\n                        label: \"\",\r\n                        sortable: false,\r\n                        allowDuplicates: true,\r\n                        renderExpando: function (level, hasChildren, expanded, object) {\r\n                            // summary:\r\n                            //      We override the default expando rendering to get rid of the\r\n                            //      default indentation.\r\n\r\n                            var node = domConstruct.create(\"div\");\r\n                            if (this.model.get(\"sortMode\")) {\r\n                                domClass.add(node, \"dijitInline epi-iconDnD\");\r\n                            }\r\n                            else {\r\n                                //\"dgrid-expando-icon\" is needed for click events\r\n                                domClass.add(node, \"dgrid-expando-icon\");\r\n                                if (hasChildren) {\r\n                                    domClass.add(node, \"dgrid-expando-arrow\");\r\n                                }\r\n                            }\r\n                            node.innerHTML = \"&nbsp;\";\r\n                            return node;\r\n                        }.bind(this)\r\n                    }),\r\n                    checkbox: selector({\r\n                        label: \"\",\r\n                        selectorType: \"checkbox\"\r\n                    }),\r\n                    thumbnail: {\r\n                        renderHeaderCell: function (node) { },\r\n                        get: function (object) {\r\n                            return this.model.showThumbnails ? object.properties.thumbnail : null;\r\n                        }.bind(this),\r\n                        formatter: formatters.thumbnail,\r\n                        sortable: false\r\n                    },\r\n                    /* Name of column used in sorting - use typeSortIndex property, not typeIdentifier */\r\n                    typeSortIndex: {\r\n                        label: \"\",\r\n                        get: function (object) {\r\n                            return object.typeIdentifier;\r\n                        },\r\n                        formatter: function (typeIdentifier, additionalClass) {\r\n                            return formatters.contentIcon(typeIdentifier, additionalClass);\r\n                        }\r\n                    },\r\n                    name: {\r\n                        label: epi.resources.header.name,\r\n                        className: \"epi-columnWide\"\r\n                    },\r\n                    code: {\r\n                        get: function (object) {\r\n                            return object.properties.code;\r\n                        },\r\n                        label: res.code\r\n                    },\r\n                    price: {\r\n                        get: function (object) {\r\n                            return object.properties.price;\r\n                        },\r\n                        label: res.price,\r\n                        sortable: false\r\n                    },\r\n                    stock: {\r\n                        get: function (object) {\r\n                            return { count: object.properties.inStockQuantity, status: object.properties.inStockStatus };\r\n                        },\r\n                        label: res.stock,\r\n                        formatter: this._getStockElement,\r\n                        sortable: false\r\n                    },\r\n                    isPendingPublish: {\r\n                        get: function (object) {\r\n                            return object.status === ContentActionSupport.versionStatus.Published;\r\n                        },\r\n                        label: res.active,\r\n                        formatter: formatters.friendlyBoolean\r\n                    },\r\n                    startPublish: {\r\n                        get: function (object) {\r\n                            return object.properties.startPublish;\r\n                        },\r\n                        label: res.availablefrom,\r\n                        formatter: this._localizedDateAndSecondaryText\r\n                    },\r\n                    stopPublish: {\r\n                        get: function (object) {\r\n                            return object.properties.stopPublish;\r\n                        },\r\n                        label: epi.resources.header.expires,\r\n                        formatter: this._localizedDateAndSecondaryText\r\n                    },\r\n                    metaClassName: {\r\n                        get: function (object) {\r\n                            return object.properties.metaClassName;\r\n                        },\r\n                        label: res.producttype,\r\n                        formatter: formatters.secondaryText\r\n                    }\r\n                }, columnSettings);\r\n            },\r\n\r\n            _getStockElement: function (stock) {\r\n                if (stock.count === undefined || stock.count === null) {\r\n                    return \"\";\r\n                }\r\n\r\n                var stateCssClass = \"epi-stock-\" + stock.status;\r\n\r\n                return '<span class=\"epi-stock ' + stateCssClass + '\">' + stock.count + misc.icon('epi-iconBoxes') + '</span>';\r\n            },\r\n\r\n            _localizedDateAndSecondaryText: function (value) {\r\n                return formatters.secondaryText(formatters.localizedDate(value), true);\r\n            },\r\n\r\n            _onMarketChanged: function () {\r\n                if (!this.grid) return;\r\n\r\n                when(this.getCurrentContext()).then(function (context) {\r\n                    this._setGridQuery(context);\r\n                }.bind(this));\r\n            },\r\n\r\n            _onSortModeChanged: function (name, oldValue, newValue) {\r\n                this._updateMarketSelector(newValue);\r\n                this._toggleColumnHeaderClickable();\r\n                when(this.getCurrentContext()).then(function (context) {\r\n                    this._setGridQuery(context);\r\n                }.bind(this));\r\n            },\r\n\r\n            _updateMarketSelector: function (sortModeActive) {\r\n                var currentSelection = this.marketSelector.get(\"value\");\r\n                var originalSelection = this.model.get(\"originalMarketSelection\");\r\n\r\n                this.marketSelector.set(\"readOnly\", sortModeActive);\r\n\r\n                if ((currentSelection === \"ALL\" && sortModeActive) ||   // We are entering sort mode and the selection is already \"ALL\", no need to do anything.\r\n                    (originalSelection === \"ALL\" && !sortModeActive)) { // We are leaving sort mode and the original selection is \"ALL\", no need to reset anything.\r\n                    return;\r\n                }\r\n\r\n                if (sortModeActive) {\r\n                    this.model.set(\"originalMarketSelection\", currentSelection);\r\n                    this.marketSelector.set(\"value\", \"ALL\");\r\n                } else {\r\n                    this.marketSelector.set(\"value\", originalSelection);\r\n                }\r\n            },\r\n\r\n            _sortItemUpwards: function () {\r\n                // summary:\r\n                //      Moves the grid's currently selected row one step up.\r\n                // tags:\r\n                //      Private\r\n                this._moveSelectedItem(true);\r\n            },\r\n\r\n            _sortItemDownwards: function () {\r\n                // summary:\r\n                //      Moves the grid's currently selected row one step down.\r\n                // tags:\r\n                //      private\r\n                this._moveSelectedItem(false);\r\n            },\r\n\r\n            _moveSelectedItem: function (isUpward) {\r\n                // summary:\r\n                //      Moves the grid's currently selected row either one step down or one step up.\r\n                // tags:\r\n                //      private\r\n                var currentRow = this.grid.row(this.selection[0].rowId);\r\n                var nextSibling = currentRow.element[isUpward ? \"previousSibling\" : \"nextSibling\"];\r\n\r\n                if (!nextSibling) {\r\n                    return;\r\n                }\r\n\r\n                var targetItem = this.grid.row(nextSibling).data;\r\n\r\n                return when(this.model.moveItem(\r\n                    { contentLink: this.selection[0].contentLink },\r\n                    targetItem, isUpward\r\n                )).then(this._refreshView.bind(this), this._errorCallback.bind(this));\r\n            },\r\n\r\n            _errorCallback: function (error) {\r\n                var parseRepsonseText = function (responseData) {\r\n                    if (typeof responseData === \"string\") {\r\n                        return json.fromJson(responseData);\r\n                    }\r\n\r\n                    return \"\";\r\n                };\r\n\r\n                var alertDialog = new Alert({\r\n                    heading: catalogContentListResources.sorting.error,\r\n                    description: parseRepsonseText(error.responseText) || epiString.toHTML(error.message),\r\n                    destroyOnHide: true\r\n                });\r\n\r\n                alertDialog.show();\r\n\r\n                this.grid.refresh();\r\n            },\r\n\r\n            _onDndDrop: function (dndData, source, nodes, copy) {\r\n                var moveItem = function (itemData, targetItemData, moveBefore) {\r\n                    return this.model.moveItem(\r\n                        itemData,\r\n                        targetItemData,\r\n                        moveBefore);\r\n                };\r\n\r\n                // Internal move, don't sort when dropping from outside the grid.\r\n                if (this.grid.dndSource === source) {\r\n\r\n                    var promiseChain = new Deferred();\r\n                    promiseChain.resolve(); // This is needed to to initiate the chain of move operations.\r\n\r\n                    var targetItemData = this.grid.dndSource.current && this.grid.dndSource.getItem(this.grid.dndSource.current.id).data;\r\n                    var moveBefore = this.grid.dndSource.before;\r\n\r\n                    if (!moveBefore) {\r\n                        nodes = nodes.reverse();\r\n                    }\r\n\r\n                    for (var i = 0; i < nodes.length; i++) {\r\n                        var itemData = this.grid.dndSource.getItem(nodes[i].id).data;\r\n\r\n                        if (!itemData.properties.isLinkedToCurrentCategory) {\r\n                            continue;\r\n                        }\r\n\r\n                        promiseChain = promiseChain.then(lang.partial(moveItem.bind(this), itemData, targetItemData, moveBefore));\r\n                    }\r\n\r\n                    promiseChain.then(this._refreshView.bind(this), this._errorCallback.bind(this));\r\n                }\r\n            },\r\n\r\n            _refreshView: function () {\r\n                // summary:\r\n                //      Refreshes the current view and its data.\r\n                // tags:\r\n                //      private\r\n                this.grid.refresh();\r\n            }\r\n        });\r\n    });"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\CatalogList.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_FocusableMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 15,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_FocusableMixin\",",
                "endLine": 15,
                "endColumn": 39
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// Dojo\r\n    \"dojo\",\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/html\",\r\n    \"dojo/topic\",\r\n    \"dojo/dom-class\",\r\n    \"dojo/dom-style\",\r\n\r\n// EPi Shell\r\n    \"epi\",\r\n    \"epi/dependency\",\r\n    \"epi/shell/widget/_FocusableMixin\",\r\n\r\n// EPi CMS\r\n    \"epi-cms/dgrid/formatters\",\r\n    \"epi-cms/contentediting/ContentActionSupport\",\r\n//commerce\r\n    \"./_ContentSecurableList\",\r\n    \"./viewmodel/CatalogListViewModel\",\r\n\r\n// Resources\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.cataloglist\"\r\n], function (\r\n// Dojo\r\n    dojo,\r\n    array,\r\n    declare,\r\n    lang,\r\n    html,\r\n    topic,\r\n    domClass,\r\n    domStyle,\r\n\r\n// EPi Shell\r\n    epi,\r\n    dependency,\r\n    _FocusableMixin,\r\n\r\n// EPi CMS\r\n    formatters,\r\n    ContentActionSupport,\r\n//commerce\r\n    _ContentSecurableList,\r\n    CatalogListViewModel,\r\n// Resources\r\n    res) {\r\n\r\n    return declare([_ContentSecurableList, _FocusableMixin], {\r\n        // summary:\r\n        //    Lists the content of the catalog root.\r\n        // description:\r\n        //    This is the widget that lists the content of the catalog root.\r\n        // tags:\r\n        //    public\r\n\r\n        // contextChangeEvent: [public] String\r\n        //      Setup so that the context change events are not configured in the base class.\r\n        contextChangeEvent: \"\",\r\n\r\n        startup: function () {\r\n            // summary:\r\n            //      Adds the breadcrumb widget to the top of the list widget.\r\n            // tags:\r\n            //      protected\r\n            this.inherited(arguments);\r\n\r\n            this.own(\r\n                topic.subscribe(\"relationChanged\", this.grid.refresh.bind(this.grid)),\r\n                topic.subscribe(\"catalogContentDeleted\", this.grid.refresh.bind(this.grid))\r\n            );\r\n        },\r\n\r\n        getListSettings: function(){\r\n            var baseSettings = this.inherited(arguments);\r\n            return lang.mixin(baseSettings, {\r\n                className: \"epi-plain-grid epi-plain-grid--small-header-font\"\r\n            });\r\n        },\r\n\r\n        fetchData: function (context) {\r\n            // summary:\r\n            //\t\tFetches data by setting a query on the grid. A getrelations query will be performed on the store.\r\n            // tags:\r\n            //\t\tprotected\r\n\r\n            var queryOptions = { ignore: [\"query\"], parentId: context.id, sort: [{ attribute: \"name\" }] };\r\n\r\n            var queryParameters = {\r\n                referenceId: context.id,\r\n                query: \"getchildren\",\r\n                includeProperties: true,\r\n                allLanguages: true\r\n            };\r\n\r\n            this.grid.set(\"query\", queryParameters, queryOptions);\r\n        },\r\n\r\n        createModel: function () {\r\n            // summary:\r\n            //      Overriden to contruct the default model for the catalog list\r\n            return new CatalogListViewModel();\r\n        },\r\n\r\n        getColumnSettings: function () {\r\n            // summary:\r\n            //\t\tReturns an object with the settings for the columns of the grid\r\n            // tags:\r\n            //\t\tprivate\r\n\r\n            var columnSettings = this.inherited(arguments) || {};\r\n\r\n            return lang.mixin({\r\n                /* Name of column used in sorting - use typeSortIndex property, not typeIdentifier */\r\n                typeSortIndex: {\r\n                    renderHeaderCell: function (node) {\r\n                        domClass.add(node, \"epi-columnPadding--left\");\r\n                    },\r\n                    get: function (object) {\r\n                        return object.typeIdentifier;\r\n                    },\r\n                    formatter: function (typeIdentifier, additionalClass) {\r\n                        return formatters.contentIcon(typeIdentifier, additionalClass);\r\n                    },\r\n                    className: \"epi-columnIcon16x16\",\r\n                    sortable: false,\r\n                    renderCell: function (object, value, node, options) {\r\n                        domClass.add(node, \"epi-columnPadding--left\");\r\n                        node.innerHTML = formatters.contentIcon(value);\r\n                    }\r\n                },\r\n                name: {\r\n                    label: epi.resources.header.name,\r\n                    className: \"epi-columnWide\"\r\n                },\r\n                language: {\r\n                    get: function (object) {\r\n                        return object.properties.defaultLanguage;\r\n                    },\r\n                    label: epi.resources.header.language,\r\n                    sortable: false\r\n                },\r\n                currency: {\r\n                    get: function (object) {\r\n                        return object.properties.defaultCurrency;\r\n                    },\r\n                    label: epi.resources.header.currency,\r\n                    sortable: false\r\n                },\r\n                baseWeight: {\r\n                    get: function (object) {\r\n                        return object.properties.weightBase;\r\n                    },\r\n                    label: res.baseweight,\r\n                    sortable: false\r\n                },\r\n                baseLength: {\r\n                    get: function (object) {\r\n                        return object.properties.lengthBase;\r\n                    },\r\n                    label: res.baselength,\r\n                    sortable: false\r\n                },\r\n                isPendingPublish: {\r\n                    get: function (object) {\r\n                        return object.status === ContentActionSupport.versionStatus.Published;\r\n                    },\r\n                    label: res.active,\r\n                    formatter: formatters.friendlyBoolean,\r\n                    className: \"epi-columnNarrow\"\r\n                },\r\n                startPublish: {\r\n                    get: function (object) {\r\n                        return object.properties.startPublish;\r\n                    },\r\n                    label: res.availablefrom,\r\n                    formatter: this._localizedDateAndSecondaryText\r\n                },\r\n                stopPublish: {\r\n                    get: function (object) {\r\n                        return object.properties.stopPublish;\r\n                    },\r\n                    label: epi.resources.header.expires,\r\n                    formatter: this._localizedDateAndSecondaryText\r\n                },\r\n                owner: {\r\n                    get: function (object) {\r\n                        return object.properties.owner;\r\n                    },\r\n                    label: epi.resources.header.owner,\r\n                    formatter: formatters.secondaryText,\r\n                    sortable: false\r\n                }\r\n            }, columnSettings);\r\n        },\r\n\r\n        setupEvents: function () {\r\n            this.inherited(arguments);\r\n            for (var columnName in this.getColumnSettings()) {\r\n                this.own(this.grid.on(\".dgrid-cell.dgrid-column-\" + columnName + \":click\", this._onChangeContext.bind(this)));\r\n            }\r\n        },\r\n\r\n        _localizedDateAndSecondaryText: function (value) {\r\n            return formatters.secondaryText(formatters.localizedDate(value), true);\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\CatalogPasteItemDialog.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-deprecated-episerver-apis",
                "severity": 1,
                "message": "'epi/shell/widget/_ActionProviderWidget' is a deprecated Episerver module and will be removed in a future major version.",
                "line": 11,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_ActionProviderWidget\",",
                "endLine": 11,
                "endColumn": 45
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/dialog/_DialogContentMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 12,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/dialog/_DialogContentMixin\",",
                "endLine": 12,
                "endColumn": 50
            }
        ],
        "errorCount": 1,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/dom-construct\",\r\n\r\n// dijit\r\n    \"dijit/_Widget\",\r\n\r\n// epi\r\n    \"epi\",\r\n    \"epi/shell/widget/_ActionProviderWidget\",\r\n    \"epi/shell/widget/dialog/_DialogContentMixin\",\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.pasteitemdialog\"\r\n\r\n], function (\r\n// dojo\r\n    declare,\r\n    domConstruct,\r\n\r\n// dijit\r\n    _Widget,\r\n\r\n// epi\r\n    epi,\r\n    _ActionProviderWidget,\r\n    _DialogContentMixin,\r\n    resources\r\n){\r\n    return declare([_Widget, _ActionProviderWidget, _DialogContentMixin], {\r\n\r\n        hideDuplicateOption: false,\r\n\r\n        hideMoveOption: false,\r\n        \r\n        hideLinkOption: false,\r\n\r\n        title: resources.title,\r\n\r\n        buildRendering: function () {\r\n            this.inherited(arguments);\r\n\r\n            domConstruct.create(\"span\", { innerHTML: resources.message }, this.domNode);\r\n        },\r\n\r\n        getActions: function () {\r\n            // summary:\r\n            //      Overridden from _ActionProvider\r\n\r\n            this._actions = [];\r\n            \r\n            if (!this.hideDuplicateOption) {\r\n                this._actions.push({\r\n                    name: \"duplicate\",\r\n                    label: resources.duplicate,\r\n                    settings: { type: \"button\" },\r\n                    action: function() {\r\n                        this.executeDialog('duplicate');\r\n                    }.bind(this)\r\n                });\r\n            }\r\n            \r\n            if (!this.hideLinkOption) {\r\n                this._actions.push({\r\n                    name: \"link\",\r\n                    label: resources.link,\r\n                    settings: { type: \"button\" },\r\n                    action: function() {\r\n                        this.executeDialog('link');\r\n                    }.bind(this)\r\n                });\r\n            }\r\n            \r\n            if (!this.hideMoveOption) {\r\n                this._actions.push({\r\n                    name: \"move\",\r\n                    label: resources.move,\r\n                    settings: { type: \"button\" },\r\n                    action: function() {\r\n                        this.executeDialog('move');\r\n                    }.bind(this)\r\n                });\r\n            }\r\n            \r\n            this._actions.push({\r\n                name: \"cancel\",\r\n                label: epi.resources.action.cancel,\r\n                settings: { type: \"button\" },\r\n                action: function () {\r\n                    this.cancelDialog();\r\n                }.bind(this)\r\n            });\r\n            \r\n            return this._actions;\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\CollapsibleContainer.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\CommandButton.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/_CommandModelBindingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 4,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/_CommandModelBindingMixin\"",
                "endLine": 4,
                "endColumn": 50
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "define([\r\n    \"dojo/_base/declare\",\r\n    \"dijit/form/Button\",\r\n    \"epi/shell/command/_CommandModelBindingMixin\"\r\n], function (declare, Button, _CommandModelBindingMixin) {\r\n\r\n    return declare([Button, _CommandModelBindingMixin]);\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\CommandToggleButton.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/_CommandModelBindingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 4,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/_CommandModelBindingMixin\"",
                "endLine": 4,
                "endColumn": 50
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "define([\r\n    \"dojo/_base/declare\",\r\n    \"dijit/form/ToggleButton\",\r\n    \"epi/shell/command/_CommandModelBindingMixin\"\r\n], function (declare, ToggleButton, _CommandModelBindingMixin) {\r\n    return declare([ToggleButton, _CommandModelBindingMixin]);\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\CommandToolbar.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_AddByDefinition' is an internal Episerver module and can have a breaking change in any release.",
                "line": 12,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_AddByDefinition\"",
                "endLine": 12,
                "endColumn": 40
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "define([\r\n    // dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/when\",\r\n\r\n    // dijit\r\n    \"dijit/Toolbar\",\r\n    \"dijit/layout/_LayoutWidget\",\r\n\r\n    // epi\r\n    \"epi/shell/widget/_AddByDefinition\"\r\n\r\n], function (\r\n    // dojo\r\n    array,\r\n    declare,\r\n    when,\r\n\r\n    // dijit\r\n    Toolbar,\r\n    _LayoutWidget,\r\n\r\n    // epi\r\n    _AddByDefinition\r\n) {\r\n        // Important: Mix in _LayoutWidget before Toolbar to get correct CSS classes from Toolbar\r\n        return declare([_LayoutWidget, Toolbar, _AddByDefinition], {\r\n\r\n            _commands: null,\r\n\r\n            constructor: function (commands) {\r\n                this._commands = commands;\r\n            },\r\n\r\n            buildRendering: function () {\r\n                // summary:\r\n                //      Constructs the toolbar container and starts the children setup process.\r\n                // tags:\r\n                //      protected\r\n\r\n                this.inherited(arguments);\r\n\r\n                // Setup the children items in the toolbar.\r\n                when(this.setupChildren(), function () {\r\n                    this.resize();\r\n                }.bind(this));\r\n            },\r\n\r\n            setupChildren: function () {\r\n                // summary:\r\n                //      Setup the items in the toolbar. Inheriting classes should extend this to add more items to the toolbar.\r\n                // tags:\r\n                //      protected\r\n\r\n                var toolbarItems = [ \r\n                    this._createToolbarGroup(\"clipboard\"),\r\n                    this._createToolbarGroup(\"misc\"),\r\n                    this._createToolbarGroup(\"sorting\", { \"class\" : \"dijitInline\"})\r\n                ];\r\n\r\n                toolbarItems = toolbarItems.concat(array.map(this._commands, function (command, index) {\r\n                    return {\r\n                        name: \"command\" + index,\r\n                        widgetType: command.buttonType || \"epi-ecf-ui/widget/CommandButton\",\r\n                        parent: command.toolbarGroup,\r\n                        settings: { model: command, \"class\": \"epi-flat epi-chromeless dijitButton\" },\r\n                        title: command.label\r\n                    };\r\n                }));\r\n\r\n                return this.add(toolbarItems);\r\n            },\r\n\r\n            _createToolbarGroup: function (groupName, groupSettings) {\r\n                return {\r\n                    name: groupName,\r\n                    type: \"toolbargroup\",\r\n                    parent: \"leading\",\r\n                    settings: groupSettings || { \"class\": \"epi-groupedButtonContainer dijitInline\" }\r\n                };\r\n            }\r\n        });\r\n    }\r\n);"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\DeleteCampaignItemDialog.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\DictionaryAdministration.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\DiscountList.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\DiscountSelector.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\DiscountSelectorDialog.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/SearchBox' is an internal Episerver module and can have a breaking change in any release.",
                "line": 11,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/SearchBox\",",
                "endLine": 11,
                "endColumn": 33
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/dom-style\",\r\n    \"dojo/keys\",\r\n// dijit\r\n    \"dijit/layout/_LayoutWidget\",\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n// epi\r\n    \"epi/shell/widget/SearchBox\",\r\n    \"epi/string\",\r\n// epi-ecf-ui\r\n    \"./DiscountTree\",\r\n// resources\r\n    \"dojo/text!./templates/_SelectorDialog.html\",\r\n    \"epi/i18n!epi/nls/commerce.widget.discountselector\",\r\n    \"epi/i18n!epi/cms/nls/episerver.cms.widget.hierachicallist\"\r\n],\r\n\r\nfunction (\r\n// dojo\r\n    declare,\r\n    domStyle,\r\n    keys,\r\n// dijit\r\n    _LayoutWidget,\r\n    _TemplatedMixin,\r\n    _WidgetsInTemplateMixin,\r\n// epi\r\n    SearchBox,\r\n    epiString,\r\n// epi-ecf-ui\r\n    DiscountTree,\r\n// resources\r\n    templates,\r\n    resources,\r\n    noDataMessageResources\r\n) {\r\n    return declare([_LayoutWidget, _TemplatedMixin, _WidgetsInTemplateMixin], {\r\n        // summary:\r\n        //      Represents the widget which contains the discount tree.\r\n        // tags:\r\n        //    internal product\r\n\r\n        // templateString: [protected] String\r\n        //      Widget's template string.\r\n        templateString: templates,\r\n\r\n        resources: resources,\r\n\r\n        noDataMessageResources: noDataMessageResources,\r\n\r\n        _tree: null,\r\n\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n            this._tree = this._tree || new DiscountTree({\r\n               root: this.root,\r\n               store: this.store\r\n            }, this.listContainer);\r\n\r\n            this.own(this._tree,\r\n                    this._tree.on(\"filter\", this._styleSelector.bind(this)),\r\n                    this.searchBox.on(\"keyup\", this._onSearchBoxKeyUp.bind(this)),\r\n                    this.on(\"show\", this.searchBox.clearValue.bind(this.searchBox))\r\n            );\r\n        },\r\n\r\n        _setExcludedLinkAttr: function (value) {\r\n            this._tree.model.set(\"excludedLink\", value);\r\n        },\r\n\r\n        _setCheckedItemsAttr: function (value) {\r\n            this._tree.set(\"checkedItems\", value);\r\n        },\r\n\r\n        _getCheckedItemsAttr: function (value) {\r\n            return this._tree.get(\"checkedItems\");\r\n        },\r\n\r\n        _onSearchBoxChange: function (queryText) {\r\n            // summary:\r\n            //      handle searchBoxChange event.\r\n            // queryText: [string]\r\n            //      the query text to filter promotion data.\r\n            // tags:\r\n            //      Private\r\n\r\n            this._tree.set(\"searchText\", queryText);\r\n        },\r\n\r\n        _onSearchBoxKeyUp: function (evt) {\r\n            // summary:\r\n            //      pressing a key when searching promotions.\r\n            // tags:\r\n            //      private\r\n\r\n            if (evt.keyCode === keys.ENTER) {\r\n                if(epiString.isNullOrEmpty(this.searchBox.get(\"value\"))) {\r\n                    return;\r\n                }\r\n\r\n                var node = this._tree.get(\"firstPromotionNode\");\r\n                if (!node.item.hidden && !node.item.disable) {\r\n                    node.set(\"checked\", !node.get(\"checked\"));\r\n                    node.onNodeClicked();\r\n                    return true;\r\n                }\r\n            }\r\n        },\r\n\r\n        _styleSelector: function (evt) {\r\n            // summary:\r\n            //      style items after filtering promotion data.\r\n            // evt: object\r\n            //      The event arguments.\r\n            // tags:\r\n            //      Private\r\n\r\n            domStyle.set(this.noDataMessage, \"display\", evt.searchFound ? \"none\" : \"\");\r\n            domStyle.set(this._tree.domNode, \"display\", evt.searchFound ? \"\" : \"none\");\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\DiscountTree.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\FacetGroup.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/dgrid/Focusable' is an internal Episerver module and can have a breaking change in any release.",
                "line": 27,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/dgrid/Focusable\",",
                "endLine": 27,
                "endColumn": 32
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/dgrid/Responsive' is an internal Episerver module and can have a breaking change in any release.",
                "line": 29,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/dgrid/Responsive\",",
                "endLine": 29,
                "endColumn": 33
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_ModelBindingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 31,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_ModelBindingMixin\",",
                "endLine": 31,
                "endColumn": 42
            }
        ],
        "errorCount": 3,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n\r\n    \"dojo/aspect\",\r\n\r\n    \"dojo/dom-class\",\r\n    \"dojo/dom-geometry\",\r\n\r\n    \"dojo/Evented\",\r\n    \"dojo/html\",\r\n    \"dojo/query\",\r\n    \"dojo/string\",\r\n    \"dojo/when\",\r\n// dojox\r\n    \"dojox/html/entities\",\r\n// dijit\r\n    \"dijit/form/ToggleButton\",\r\n    \"dijit/layout/_LayoutWidget\",\r\n// dgrid\r\n    \"dgrid/Keyboard\",\r\n    \"dgrid/OnDemandList\",\r\n    \"dgrid/Selection\",\r\n// epi\r\n    \"epi\",\r\n\r\n    \"epi/shell/dgrid/Focusable\",\r\n    \"epi/shell/dgrid/Formatter\",\r\n    \"epi/shell/dgrid/Responsive\",\r\n\r\n    \"epi/shell/widget/_ModelBindingMixin\",\r\n// epi-ecf-ui\r\n    \"./CollapsibleContainer\",\r\n// resources\r\n    \"dojo/text!./templates/_FacetGroupItem.html\",\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.facets\"\r\n], function (\r\n// dojo\r\n    declare,\r\n\r\n    aspect,\r\n\r\n    domClass,\r\n    domGeometry,\r\n\r\n    Evented,\r\n    html,\r\n    query,\r\n    string,\r\n    when,\r\n// dojox\r\n    entities,\r\n// dijit\r\n    ToggleButton,\r\n    _LayoutWidget,\r\n// dgrid\r\n    Keyboard,\r\n    OnDemandList,\r\n    Selection,\r\n// epi\r\n    epi,\r\n\r\n    Focusable,\r\n    Formatter,\r\n    Responsive,\r\n\r\n    _ModelBindingMixin,\r\n// epi-ecf-ui\r\n    CollapsibleContainer,\r\n// resources\r\n    facetItemTemplate,\r\n    resources\r\n) {\r\n\r\n    return declare([_LayoutWidget, _ModelBindingMixin, CollapsibleContainer, Evented], {\r\n        // summary:\r\n        //      Represents the widget to filter group in the facet.\r\n        // tags:\r\n        //      public\r\n\r\n        modelBindingMap: {\r\n            name: [\"title\"],// Set in CollapsibleContainer widget.\r\n            collapsible: [\"collapsible\"],// Set in CollapsibleContainer widget.\r\n            showMatchingItems: [\"showMatchingItems\"],\r\n            selectionType: [\"selectionType\"],\r\n            selection: [\"selection\"],\r\n            listStore: [\"listStore\"],\r\n            recalculatedItems: [\"recalculatedItems\"]\r\n        },\r\n\r\n        _setShowMatchingItemsAttr: function (showMatchingItems) {\r\n            domClass.toggle(this.domNode, \"epi-facet-group--count-item-invisible\", !showMatchingItems);\r\n        },\r\n\r\n        _setSelectionTypeAttr: function (selectionType) {\r\n            this._set(\"selectionType\", selectionType);\r\n\r\n            this._list && this._list.set(\"selectionMode\", selectionType === 0 ? \"single\" : \"multiple\");\r\n        },\r\n\r\n        _setSelectionAttr: function (items) {\r\n            // summary:\r\n            //      Sets the selection in the list and emit selection-changed with the given facet items\r\n            // tags:\r\n            //      protected\r\n\r\n            this._list.clearSelection();\r\n\r\n            if (items instanceof Array) {\r\n                var singleSelectionMode = this.get(\"selectionType\") === 0;\r\n                if (items.length === 0 && singleSelectionMode) {\r\n                    // Set selected for default item of single selection group.\r\n                    this._list.select(\"\");\r\n                    return;\r\n                }\r\n\r\n                var listStore = this.model.get(\"listStore\"),\r\n                    validItems = items.filter(function (item) {\r\n                        return when(listStore.get(item), function (validItem) {\r\n                            return !!validItem;\r\n                        });\r\n                    });\r\n\r\n                // If has an invalid item then emit selection-changed with only valid items to remove invalid item.\r\n                if (validItems.length !== items.length) {\r\n                    this.emit(\"selection-changed\", { \"id\": this.model.get(\"id\"), items: validItems });\r\n                    return;\r\n                }\r\n\r\n                validItems.forEach(this._list.select, this._list);\r\n            }\r\n\r\n            this._toggleClearButton();\r\n        },\r\n\r\n        _setListStoreAttr: function (listStore) {\r\n            this._list && this._list.set(\"store\", listStore);\r\n            this.layout();\r\n        },\r\n\r\n        _setRecalculatedItemsAttr: function (items) {\r\n            if (epi.isEmpty(items)) {\r\n                return;\r\n            }\r\n\r\n            var listId = this._list.get(\"id\");\r\n            items.forEach(function (item) {\r\n                var matchingNumberNode = query(\"#\" + listId + \"-row-\" + item.id + \" .epi-facet-group-item__matching-number\")[0];\r\n                matchingNumberNode && html.set(matchingNumberNode, item.count.toString());\r\n            }, this);\r\n        },\r\n\r\n        baseClass: \"epi-facet-group\",\r\n\r\n        layout: function () {\r\n            // summary:\r\n            //      Resizes the facet group.\r\n            // tags:\r\n            //      public\r\n\r\n            domGeometry.setMarginBox(this.containerNode, { l: 0, t: 0 });\r\n            this._list.resize();\r\n        },\r\n\r\n        buildRendering: function () {\r\n            // summary:\r\n            //      Constructs the UI for this widget.\r\n            // tags:\r\n            //      protected\r\n\r\n            this.inherited(arguments);\r\n\r\n            this._setupItemList();\r\n            this._setupClearButton();\r\n        },\r\n\r\n        _setupClearButton: function () {\r\n            // summary:\r\n            //      Creates clear button and then add it to the collapsible container.\r\n            // tags:\r\n            //      private\r\n\r\n            var settings = {\r\n                \"class\": \"epi-chromelessButton\",\r\n                label: resources.clear,\r\n                onClick: this._onClearButtonClicked.bind(this)\r\n            };\r\n            this.own(this._clearButton = new ToggleButton(settings));\r\n            this.addButton(this._clearButton, { region: \"header\" });\r\n            this._toggleClearButton();\r\n        },\r\n\r\n        _setupShowMoreButton: function () {\r\n            // summary:\r\n            //      Creates show more button and then add it to the collapsible container.\r\n            // tags:\r\n            //      private\r\n\r\n            var settings = {\r\n                \"class\": \"epi-chromelessButton\",\r\n                iconClass: \"epi-showMoreIcon\",\r\n                onClick: this._onShowMoreButtonClicked.bind(this)\r\n            };\r\n            this.own(this._showMoreButton = new ToggleButton(settings));\r\n            this.addButton(this._showMoreButton, { region: \"footer\" });\r\n        },\r\n\r\n        _setupItemList: function () {\r\n            // summary:\r\n            //      Renderes facet item list inside the created collapsible container.\r\n            // tags:\r\n            //      private\r\n\r\n            var listClass = declare([OnDemandList, Formatter, Selection, Keyboard, Focusable, Responsive]),\r\n                settings = {\r\n                    formatters: this._getFacetItemFormatters(),\r\n                    cleanEmptyObservers: false,\r\n                    commandCategory: \"itemContext\",\r\n                    deselectOnRefresh: false,\r\n                    farOffRemoval: Infinity,\r\n                    refocusOnRefresh: true,\r\n                    responsiveMap: { \"epi-card-list--narrow\": 570 }\r\n                };\r\n\r\n            this._list = new listClass(settings);\r\n            domClass.add(this._list.domNode, \"epi-grid-height--auto epi-card-list\");\r\n            this.addChild(this._list);\r\n\r\n            this.own(\r\n                this._list,\r\n                aspect.before(this._list, \"select\", this._onBeforeItemClicked.bind(this), true),\r\n                aspect.before(this._list, \"renderArray\", this._onBeforeRenderArray.bind(this)),\r\n                aspect.around(this._list, \"insertRow\", this._aroundInsertRow.bind(this)),\r\n                this._list.on(\"dgrid-cellfocusin\", this._onItemClicked.bind(this))\r\n            );\r\n        },\r\n\r\n        _aroundInsertRow: function (original) {\r\n            // summary:\r\n            //      Called 'around' the insertRow method to limit the number of rows rendered.\r\n            // tags:\r\n            //      private\r\n\r\n            return function (object, parent, beforeNode, i, options) {\r\n                if (this._showMoreButton && this._showMoreButton.get(\"checked\")) {\r\n                    return original.apply(this._list, arguments);\r\n                }\r\n\r\n                var itemsToShow = this.model.get(\"itemsToShow\");\r\n                if (itemsToShow > 0 && itemsToShow < i + 1) {\r\n                    return {};\r\n                }\r\n\r\n                return original.apply(this._list, arguments);\r\n            }.bind(this);\r\n        },\r\n\r\n        _onBeforeRenderArray: function (results, beforeNode, options) {\r\n            // summary:\r\n            //      Adds show more button when the total items are greater than limited number.\r\n            // tags:\r\n            //      private\r\n\r\n            var itemsToShow = this.model.get(\"itemsToShow\");\r\n            if (!this._showMoreButton && itemsToShow > 0) {\r\n                var checkResult = function (length) {\r\n                    if (itemsToShow < length) {\r\n                        this._setupShowMoreButton();\r\n                    }\r\n                }.bind(this);\r\n                if (results.observe) {\r\n                    results.then(function (results) {\r\n                        checkResult(results.length);\r\n                    }.bind(this));\r\n                }\r\n                else {\r\n                    checkResult(results.length);\r\n                }\r\n            }\r\n        },\r\n\r\n        _onClearButtonClicked: function (evt) {\r\n            // summary:\r\n            //      Clears all selection.\r\n            //      Fired when Clear button on this widget clicked.\r\n            //      Emits selection changed event to its container.\r\n            // evt: [Event]\r\n            //      Click event.\r\n            // tags:\r\n            //      private\r\n\r\n            this._list.clearSelection();\r\n            this._toggleClearButton();\r\n\r\n            this.emit(\"selection-changed\", { \"id\": this.model.get(\"id\"), items: [] });\r\n        },\r\n\r\n        _onShowMoreButtonClicked: function (evt) {\r\n            // summary:\r\n            //      Toggles showMore/showLess state and refresh the list.\r\n            // evt: [Event]\r\n            //      Click event.\r\n            // tags:\r\n            //      private\r\n\r\n            this._showMoreButton.set(\"iconClass\", this._showMoreButton.get(\"checked\") ? \"epi-showLessIcon\" : \"epi-showMoreIcon\");\r\n            this._list.refresh();\r\n        },\r\n\r\n        _onItemClicked: function (evt) {\r\n            // summary:\r\n            //      Fired when clicking on an item in the widget.\r\n            //      Emits selection changed event to its container.\r\n            // evt: [Event]\r\n            //      dgrid-cellfocusin event.\r\n            // tags:\r\n            //      private\r\n\r\n            this.defer(function () {\r\n                if (this.get(\"selectionType\") && this._currentItemSelected) {\r\n                    this._list.deselect(evt.row, null);\r\n                }\r\n\r\n                this._toggleClearButton();\r\n                this.emit(\"selection-changed\", { \"id\": this.model.get(\"id\"), items: this._getSelectedItems() });\r\n            }.bind(this), 200);\r\n        },\r\n\r\n        _onBeforeItemClicked: function (row, toRow, value) {\r\n            // summary:\r\n            //      Stores state of the current row is selected or not.\r\n            // tags:\r\n            //      private\r\n\r\n            if (typeof row !== \"string\") {\r\n                this._currentItemSelected = domClass.contains(row, \"dgrid-selected\");\r\n            }\r\n        },\r\n\r\n        _toggleClearButton: function () {\r\n            // summary:\r\n            //      Shows/hides the \"Clear\" button.\r\n            // tags:\r\n            //      private\r\n\r\n            this._clearButton.set(\"showLabel\", this.get(\"selectionType\") && !epi.isEmpty(this._list.selection));\r\n        },\r\n\r\n        _getSelectedItems: function () {\r\n            // summary:\r\n            //      Gets all selected item data.\r\n            // tags:\r\n            //      private\r\n\r\n            var items = [];\r\n            Object.keys(this._list.selection).forEach(function (key) {\r\n                if (this._list.selection[key]) {\r\n                    items.push(key);\r\n                }\r\n            }, this);\r\n\r\n            return items;\r\n        },\r\n\r\n        _getFacetItemFormatters: function () {\r\n            // summary:\r\n            //      Formatters for items in the facet group\r\n            // tags:\r\n            //      private\r\n\r\n            var getIconClasses = this.model.getIconClasses.bind(this.model);\r\n            return [\r\n                function formatter(value, object, node, options) {\r\n                    var map = {\r\n                        iconClasses: getIconClasses(value),\r\n                        name: entities.encode(value.name, entities.html),\r\n                        count: value.count\r\n                    };\r\n\r\n                    return string.substitute(facetItemTemplate, map);\r\n                }\r\n            ];\r\n        }\r\n\r\n    });\r\n\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\FacetGroupList.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_ModelBindingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 12,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_ModelBindingMixin\",",
                "endLine": 12,
                "endColumn": 42
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n\r\n    \"dojo/topic\",\r\n// dijit\r\n    \"dijit/layout/_LayoutWidget\",\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n// epi\r\n    \"epi\",\r\n    \"epi/shell/widget/_ModelBindingMixin\",\r\n\r\n    \"./FacetGroup\",\r\n// resources\r\n    \"dojo/text!./templates/FacetGroupList.html\"\r\n], function (\r\n// dojo\r\n    declare,\r\n\r\n    topic,\r\n// dijit\r\n    _LayoutWidget,\r\n    _TemplatedMixin,\r\n    _WidgetsInTemplateMixin,\r\n// epi\r\n    epi,\r\n    _ModelBindingMixin,\r\n\r\n    FacetGroup,\r\n// resources\r\n    template\r\n) {\r\n\r\n    return declare([_LayoutWidget, _TemplatedMixin, _WidgetsInTemplateMixin, _ModelBindingMixin], {\r\n        // summary:\r\n        //      Represents the widget to filter list of campaigns.\r\n        // tags:\r\n        //      public\r\n\r\n        modelBindingMap: {\r\n            facetGroups: [\"facetGroups\"],\r\n            facetGroupsItems: [\"facetGroupsItems\"]\r\n        },\r\n\r\n        _setFacetGroupsAttr: function (facetGroups) {\r\n            // summary:\r\n            //      Renders facet groups.\r\n            // facetGroups: [Array]\r\n            //      Collection of facet group.\r\n            // tags:\r\n            //      protected\r\n\r\n            facetGroups.forEach(function (facetGroup) {\r\n                var facetGroupWidget = this._createFacetGroupWidget(facetGroup);\r\n                this.addChild(facetGroupWidget);\r\n\r\n                this.own(\r\n                    facetGroupWidget,\r\n                    facetGroupWidget.on(\"selection-changed\", this._onSelectionChanged.bind(this))\r\n                );\r\n            }, this);\r\n\r\n            this._updateFacetGroupWidgets();\r\n        },\r\n\r\n        _setFacetGroupsItemsAttr: function (facetGroupsItems) {\r\n            // summary:\r\n            //      Renders facet group's lists.\r\n            // facetGroupsItems: [Object]\r\n            //      Collection of facet group's items.\r\n            // tags:\r\n            //      protected\r\n\r\n            this.getChildren().forEach(function (facetGroupWidget) {\r\n                var facetGroupItems = facetGroupsItems[facetGroupWidget.model.get(\"id\")];\r\n                if (epi.isEmpty(facetGroupItems)) {\r\n                    return;\r\n                }\r\n\r\n                facetGroupWidget.model.set(\"recalculatedItems\", facetGroupItems);\r\n            }, this);\r\n        },\r\n\r\n        // itemViewModelClass: [public] string\r\n        //      Facet group view model class.\r\n        itemViewModelClass: null,\r\n\r\n        // listViewModelClass: [public] string\r\n        //      Facet group list view model class.\r\n        listViewModelClass: null,\r\n\r\n        // templateString: [public] string\r\n        //      Used by _TemplatedMixin.\r\n        templateString: template,\r\n\r\n        postMixInProperties: function () {\r\n            // tags:\r\n            //      protected, extensions\r\n\r\n            this.inherited(arguments);\r\n            // Gets or create a new instance of view model class.\r\n            this.model = this.model || new this.listViewModelClass();\r\n        },\r\n\r\n        postCreate: function () {\r\n            // tags:\r\n            //      protected, extensions\r\n\r\n            this.inherited(arguments);\r\n\r\n            // Fetches facet groups data in order to render the list of facet group.\r\n            this.model.fetchData();\r\n\r\n            // Each time turned back to main view, refresh this widget.\r\n            this.own(\r\n                topic.subscribe(\"/dojo/hashchange\", this._onHashChanged.bind(this)),\r\n                topic.subscribe(\"/epi/shell/action/viewchanged\", this._onViewChanged.bind(this)),\r\n                this.watch(\"currentView\", this._onCurrentViewChanged.bind(this))\r\n            );\r\n        },\r\n\r\n        _createFacetGroupWidget: function (facetGroup) {\r\n            // summary:\r\n            //      Creates facet group widget based on the given settings.\r\n            // facetGroup: [Object]\r\n            //      Facet group settings.\r\n            // returns: [Object]\r\n            //      An instance of \"epi-ecf-ui/widget/FacetGroup\" widget.\r\n            // tags:\r\n            //      private\r\n\r\n            return new FacetGroup({\r\n                model: new this.itemViewModelClass({\r\n                    name: facetGroup.name,\r\n                    id: facetGroup.id,\r\n                    listStore: facetGroup.items,\r\n                    showMatchingItems: facetGroup.settings.showMatchingItems,\r\n                    collapsible: facetGroup.settings.collapsible,\r\n                    itemsToShow: facetGroup.settings.itemsToShow,\r\n                    selectionType: facetGroup.settings.selectionType,\r\n                    hasIcons: facetGroup.settings.hasIcons\r\n                })\r\n            });\r\n        },\r\n\r\n        _updateFacetGroupWidgets: function () {\r\n            var hashFacetFilters = this.model.get(\"hashFacetFilters\");\r\n            this.model.set(\"facetFilters\", hashFacetFilters);\r\n\r\n            this.getChildren().forEach(function (groupWidget) {\r\n                var facetFilter = hashFacetFilters.filter(function (item) {\r\n                    return item.id === groupWidget.model.get(\"id\");\r\n                })[0];\r\n\r\n                groupWidget.set(\"selection\", facetFilter ? facetFilter.values : []);\r\n            }, this);\r\n        },\r\n\r\n        _onHashChanged: function (newHash) {\r\n            this.model.fetchRecalculatedData();\r\n            this._updateFacetGroupWidgets();\r\n        },\r\n\r\n        _onViewChanged: function (type, args, data) {\r\n            var currentView = data.viewName;\r\n            if (!this.get(\"mainView\")) {\r\n                this._set(\"mainView\", currentView);\r\n            }\r\n\r\n            this._set(\"currentView\", currentView);\r\n        },\r\n\r\n        _onCurrentViewChanged: function (name, oldValue, value) {\r\n            if (oldValue && this.get(\"mainView\") === value) {\r\n                this.model.fetchRecalculatedData();\r\n            }\r\n        },\r\n\r\n        _onSelectionChanged: function (evt) {\r\n            this.model.updateFacetFilter(evt.id, evt.items);\r\n            this.model.refreshHashFacetFilters();\r\n        }\r\n\r\n    });\r\n\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\GridFormView.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/_FormEditingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 23,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/_FormEditingMixin\",",
                "endLine": 23,
                "endColumn": 47
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/ContentViewModel' is an internal Episerver module and can have a breaking change in any release.",
                "line": 24,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/ContentViewModel\",",
                "endLine": 24,
                "endColumn": 46
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/CreateContent' is an internal Episerver module and can have a breaking change in any release.",
                "line": 25,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/CreateContent\",",
                "endLine": 25,
                "endColumn": 43
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/MappingManager' is an internal Episerver module and can have a breaking change in any release.",
                "line": 26,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/MappingManager\",",
                "endLine": 26,
                "endColumn": 44
            }
        ],
        "errorCount": 4,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/event\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/aspect\",\r\n    \"dojo/dom-class\",\r\n    \"dojo/dom-geometry\",\r\n    \"dojo/keys\",\r\n    \"dojo/on\",\r\n    \"dojo/topic\",\r\n    \"dojo/when\",\r\n// dijit\r\n    \"dijit/layout/_LayoutWidget\",\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n// epi\r\n    \"epi/dependency\",\r\n    \"epi/shell/_ContextMixin\",\r\n    \"epi/shell/ViewSettings\",\r\n// epi-cms\r\n    \"epi-cms/contentediting/_FormEditingMixin\",\r\n    \"epi-cms/contentediting/ContentViewModel\",\r\n    \"epi-cms/contentediting/CreateContent\",\r\n    \"epi-cms/contentediting/MappingManager\",\r\n    \"epi-cms/command/BackCommand\",\r\n    \"epi-cms/command/NewContent\",\r\n    \"epi-cms/core/ContentReference\",\r\n// epi-ecf-ui\r\n    \"./CampaignItemList\",\r\n    \"../MarketingUtils\",\r\n    \"./CommandButton\",\r\n    \"./MarketingToolbar\",\r\n    \"./_ConfirmDiscardChangesMixin\",\r\n    \"../contentediting/GridFormContainer\",\r\n// resources\r\n    \"dojo/text!./templates/GridFormView.html\",\r\n    \"epi/i18n!epi/nls/episerver.shared\",\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.gridformview\"\r\n], function (\r\n// dojo\r\n    array,\r\n    declare,\r\n    event,\r\n    lang,\r\n    aspect,\r\n    domClass,\r\n    domGeometry,\r\n    keys,\r\n    on,\r\n    topic,\r\n    when,\r\n// dijit\r\n    _LayoutWidget,\r\n    _TemplatedMixin,\r\n    _WidgetsInTemplateMixin,\r\n// epi\r\n    dependency,\r\n    _ContextMixin,\r\n    ViewSettings,\r\n// epi-cms\r\n    _FormEditingMixin,\r\n    ContentViewModel,\r\n    CreateContent,\r\n    MappingManager,\r\n    BackCommand,\r\n    NewContent,\r\n    ContentReference,\r\n// epi-ecf-ui\r\n    CampaignItemList,\r\n    MarketingUtils,\r\n    CommandButton,\r\n    MarketingToolbar,\r\n    _ConfirmDiscardChangesMixin,\r\n    GridFormContainer,\r\n// resources\r\n    template,\r\n    sharedResources,\r\n    resources\r\n) {\r\n    return declare([_LayoutWidget, _TemplatedMixin, _WidgetsInTemplateMixin, _ContextMixin, _FormEditingMixin, _ConfirmDiscardChangesMixin], {\r\n        // tags:\r\n        //      internal\r\n\r\n        templateString: template,\r\n\r\n        editLayoutContainer: {}, /* required object for _FormEditingMixin */\r\n\r\n        // _isCreatingContent: bool\r\n        //      Flag to indicate whether this screen is opened when creating a content\r\n        //      or when editing.\r\n        _isCreatingContent: false,\r\n\r\n        _contentLightStore: null,\r\n\r\n        _wrapperAspectHandlers: [],\r\n\r\n        _invalidProperties: {},\r\n\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n            this._setupToolbar();\r\n            this.formSettings = {\r\n                baseClass: \"epi-grid-form\"\r\n            };\r\n            this._mappingManager = new MappingManager();\r\n            this._contentLightStore = this._contentLightStore || dependency.resolve(\"epi.storeregistry\").get(\"epi.cms.content.light\");\r\n        },\r\n\r\n        destroy: function () {\r\n            this.inherited(arguments);\r\n\r\n            if (this.viewModel) {\r\n                this.viewModel.destroy();\r\n                delete this.viewModel;\r\n            }\r\n\r\n            if (this._mappingManager) {\r\n                this._mappingManager.clear();\r\n                delete this._mappingManager;\r\n            }\r\n\r\n            this._removeEditorWrapperHandlers();\r\n        },\r\n\r\n        _setViewModelAttr: function (viewModel) {\r\n            if (viewModel === this.viewModel) {\r\n                return;\r\n            }\r\n\r\n            this._set(\"viewModel\", viewModel);\r\n\r\n            this.viewModel.own(\r\n                topic.subscribe(\"/dnd/start\", lang.hitch(this.viewModel, \"beginOperation\")),\r\n                topic.subscribe(\"/dnd/stop\", lang.hitch(this.viewModel, \"endOperation\")),\r\n                this.viewModel.watch(\"hasPendingChanges\", function (property, oldValue, newValue) {\r\n                        if (Object.keys(this._invalidProperties).length === 0) {\r\n                            this.toolbar.updateActionButtonStatus(this.toolbar.buttonNames.saveButton, newValue);\r\n                        }\r\n                }.bind(this))\r\n            );\r\n        },\r\n\r\n        _setupToolbar: function () {\r\n            var actionButtons = this.toolbar.getActionButtons();\r\n            actionButtons.save.action = this._onSave.bind(this);\r\n            actionButtons.close.action = this._onCancel.bind(this);\r\n\r\n            this.toolbar.add([actionButtons.save, actionButtons.close]);\r\n        },\r\n\r\n        _onSave: function () {\r\n            if (this.viewModel && !this.changesSaved()) {\r\n                this.viewModel.save().then(function () {\r\n                    this._publishUpdatedContent(this.viewModel);\r\n                    \r\n                    if(this._isEditingCampaign()) {\r\n                        when(this._getChildPromotions()).then(function (promotions) {\r\n                            promotions.forEach(function (item) {\r\n                                this._contentLightStore.updateDependentStores(item);\r\n                            }, this);\r\n                        }.bind(this));\r\n                    }                        \r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        _getChildPromotions: function () {\r\n            var queryOptions = this._getQueryOptions();\r\n            var query = { \r\n                referenceId: this.viewModel.contentLink, \r\n                query: \"getchildren\" \r\n            };\r\n            return this._contentLightStore.query(query, queryOptions);\r\n        },\r\n\r\n        _publishUpdatedContent: function (content) {\r\n            topic.publish(\"/epi/cms/contentdata/updated\", { contentLink: content.contentLink });\r\n        },\r\n\r\n        _getQueryOptions: function () {\r\n            return {\r\n                ignore: [\"query\"],\r\n                comparers: {\r\n                    \"referenceId\": function (queryValue, instance) {\r\n                        return ContentReference.compareIgnoreVersion(queryValue, instance.parentLink);\r\n                    }\r\n                }\r\n            };\r\n        },\r\n\r\n        _onCancel: function () {\r\n            if (this._isEditingCampaign()) { // editing campaign, regarless creating or editing an existing\r\n                // Go back to the campaign overview list\r\n                this._openCampaignOverviewList();\r\n                return;\r\n            }\r\n\r\n            if (this._isCreatingContent) { // creating discount\r\n                // navigate to discount priority view in case of creating new discount\r\n                this._openDiscountPriorityView();\r\n                return;\r\n            }\r\n\r\n            // editing existing discount\r\n            var backCommand = this._createBackCommand();\r\n            if (backCommand.get(\"canExecute\")) {\r\n                backCommand.execute();\r\n                return;\r\n            }\r\n\r\n            this._openCampaignOverviewList();\r\n        },\r\n\r\n        _openCampaignOverviewList: function () {\r\n            topic.publish(\"/epi/shell/context/request\", { uri: ViewSettings.settings.defaultContext }, { sender: this });\r\n        },\r\n\r\n        _openDiscountPriorityView: function () {\r\n            var data = {\r\n                sender: this, \r\n                backLink: { uri: \"epi.cms.contentdata:///\" + this.viewModel.contentData.parentLink }\r\n            };\r\n            topic.publish(\"/epi/shell/action/changeview\", \"discountpriorityview\", {}, data);\r\n        },\r\n\r\n        _createBackCommand: function() {\r\n            var backCommand = new BackCommand();\r\n            backCommand.set(\"model\", {});\r\n            return backCommand;\r\n        },\r\n\r\n        changesSaved: function () {\r\n            // summary:\r\n            //      Indicates those changes are saved.\r\n            // return:\r\n            //      boolean\r\n            // tags:\r\n            //      protected\r\n            return !this.viewModel.get(\"hasPendingChanges\");\r\n        },\r\n\r\n        discardChanges: function () {\r\n            // summary:\r\n            //      Discard any changes.\r\n            // tags:\r\n            //      public\r\n\r\n            //we need to reset the hasPendingChanges value here regardless of what it was before\r\n            //otherwise the confirmbox will always appear\r\n            this.viewModel.set(\"hasPendingChanges\", false);\r\n\r\n            //we are moving away from this view. We need to remove the handler for ctrl+s on\r\n            //the body element\r\n            if (this._keyboardSaveHandle) {\r\n                this._keyboardSaveHandle.remove();\r\n                this._keyboardSaveHandle = null;\r\n            }\r\n        },\r\n\r\n        contextUpdated: function (ctx, callerData) {\r\n            // summary:\r\n            //    Called when the currently loaded view is updated.\r\n            // tags:\r\n            //    protected\r\n\r\n            this._updateToolbarContext(ctx);\r\n        },\r\n\r\n        updateView: function (data, context) {\r\n            // summary:\r\n            //      Updates the view, to reflect data changes.(when opening this view second time)\r\n            // tags:\r\n            //      protected\r\n\r\n            this._isCreatingContent = !!(data && data.sender && data.sender instanceof CreateContent);\r\n\r\n            this._updateToolbarContext(context);\r\n\r\n            if (this.viewModel){\r\n                this.viewModel.validator.clearErrorsBySource(this.viewModel.validator.validationSource.client);\r\n                this.viewModel.validator.clearErrorsBySource(this.viewModel.validator.validationSource.server);\r\n                this.viewModel.destroy();\r\n            }\r\n            this.set(\"viewModel\", this._createViewModel(context.id));\r\n            this.own(this.viewModel);\r\n            //we set our keydown handler on entire body element to be able to capture \"ctrl+s\" even\r\n            //when users has moved focus on something other than our form like a widget on a sidebar.\r\n            this._keyboardSaveHandle = on(document.body, \"keydown\", this._onKeyDown.bind(this));\r\n\r\n            this._removeEditorWrapperHandlers();\r\n\r\n            return this._reloadViewModel();\r\n        },\r\n\r\n        _createViewModel: function(contentLink){\r\n            return new ContentViewModel({\r\n                contentLink: contentLink,\r\n                local: true,\r\n                contextTypeName: \"epi.cms.contentdata\",\r\n                enableAutoSave: false\r\n            });\r\n        },\r\n\r\n        _onKeyDown: function(e){\r\n            if ((e.ctrlKey || e.metaKey) && String.fromCharCode(e.keyCode) === \"S\"){\r\n                event.stop(e);\r\n                this._onSave();\r\n            }\r\n        },\r\n\r\n        _reloadViewModel: function() {\r\n            // we refresh before loading the viewModel because we want to make sure that we dont get cached data here\r\n            return this.viewModel.contentDataStore.refresh(this.viewModel.contentLink)\r\n                .then(function() {\r\n                    this.viewModel.reload().then(function(){\r\n                        this.onReadySetupEditMode();\r\n                    }.bind(this));\r\n                }.bind(this));\r\n        },\r\n\r\n        placeForm: function(form){\r\n            form.placeAt(this.formContainer);\r\n            this.layout();\r\n        },\r\n\r\n        removeForm: function(form){\r\n            return true;\r\n        },\r\n\r\n        _onWrapperValueChange: function (wrapper, value, oldValue) {\r\n            var mapping = this._mappingManager.findOne(\"wrapper\", wrapper),\r\n                propertyName = mapping.propertyName;\r\n\r\n            // Since we are saving a new value for the property, remove any marker for invalid value, since the old value is obsolete\r\n            if (this._invalidProperties[propertyName]) {\r\n                delete this._invalidProperties[propertyName];\r\n            }\r\n\r\n            this.viewModel.setProperty(propertyName, value, oldValue);\r\n        },\r\n\r\n        _onWrapperStopEdit: function (wrapper, value, oldValue, implicitExit) {\r\n            // _FormEditingMixin required property\r\n        },\r\n\r\n        _onWrapperCancel: function (wrapper, implicitExit) {\r\n            // _FormEditingMixin required property\r\n        },\r\n\r\n        onSetupEditModeComplete: function(){\r\n            // _FormEditingMixin required property\r\n            if (this._isEditingCampaign()) {\r\n                this._form.containerLayout.set(\"header\", resources.campaignformheading);\r\n\r\n                var layout = new GridFormContainer({\r\n                    name: \"\",\r\n                    title: resources.campaigndiscountsheading,\r\n                    hasOwnRow: true\r\n                });\r\n\r\n                layout.addChild(this._createDiscountButton());\r\n                layout.addChild(this._createDiscountList());\r\n\r\n                this._form.containerLayout.addChild(layout);\r\n                this.own(layout);\r\n            } else {\r\n                this._form.containerLayout.set(\"header\", resources.discountformheading);\r\n            }\r\n            this._currentGroup = null;\r\n\r\n            this._addEditorWrapperHandlers();\r\n        },\r\n\r\n        _createDiscountButton: function () {\r\n\r\n            var createDiscountCommand = new NewContent({\r\n                contentType: MarketingUtils.contentTypeIdentifier.promotionData,\r\n                label: resources.newdiscountlabel\r\n            });\r\n\r\n            var commandModel = lang.mixin({\r\n                //default to true to make button executable (the canExecute of createDiscountCommand should return true)\r\n                hasTranslationAccess: true,\r\n                isPreferredLanguageAvailable: true\r\n            }, this.viewModel.contentData);\r\n\r\n            createDiscountCommand.set(\"model\", commandModel);\r\n\r\n            var button = new CommandButton({\r\n                model: createDiscountCommand\r\n            });\r\n\r\n            button.set(\"iconClass\", \"epi-iconPlus\");\r\n            this.own(button);\r\n\r\n            return button;\r\n        },\r\n\r\n        _createDiscountList: function () {\r\n            var campaignItemList = new CampaignItemList({ withDeleteButton: true });\r\n            domClass.add(campaignItemList.grid.domNode, \"epi-grid--with-border epi-grid-height--auto epi-dgrid__promotionlist--with-no-redemptions\");\r\n            this.own(campaignItemList);\r\n            return campaignItemList;\r\n        },\r\n\r\n        onGroupCreated: function(groupName, widget, parentGroupWidget) {\r\n            this.inherited(arguments);\r\n            this._currentGroup = widget;\r\n        },\r\n\r\n        onFieldCreated: function(fieldName, widget) {\r\n            this.inherited(arguments);\r\n            this._resizeNameField(fieldName, widget);\r\n            this._resizeWidget(widget);\r\n        },\r\n\r\n        _resizeNameField: function (fieldName, widget) {\r\n            // summary:\r\n            //      Add the css class epi-input--full-width to the name field\r\n            //      in order to make it as wide as a long string property\r\n            // tags:\r\n            //      internal\r\n\r\n            if (fieldName === \"icontent_name\") {\r\n                domClass.add(widget.domNode, \"epi-input--full-width\");\r\n            }\r\n        },\r\n\r\n        _resizeWidget: function(widget){\r\n            // summary:\r\n            //      This makes sure that some editors that define width\r\n            //      in code (XHtml and Longstring properties) does not\r\n            //      become to wide\r\n            // tags:\r\n            //      internal\r\n\r\n            var fullWidthParent = this._currentGroup ? this._currentGroup.hasOwnRow : true;\r\n            if (fullWidthParent){\r\n                return;\r\n            }\r\n            /*  this will fix widgets that sets a width property.\r\n                IE TinyMCEEditors for xhtml strings */\r\n            if (widget.width > 470){\r\n                widget.set(\"width\", 470);\r\n            }\r\n            /*  this is a special case for PropertyLongstring\r\n                that is needed because it hardcodes it's style\r\n                to be width:582px; to match xhtml strings :'(\r\n                see: https://stash.ep.se/projects/SH/repos/episerver-ui/browse/EPiServer.Cms.Shell.UI/UI/ObjectEditing/EditorDescriptors/LongStringEditorDescriptor.cs?until=1df13a6315b120175b5755814ae2f280ec519d38#24\r\n            */\r\n            if (widget.style === \"width:582px;\"){\r\n                widget.set(\"style\", \"width:472px;\");\r\n            }\r\n        },\r\n\r\n        layout: function () {\r\n            // summary:\r\n            //      Layout the children widgets.\r\n            // tags:\r\n            //      protected\r\n\r\n            if (this._form){\r\n                var toolbarSize = domGeometry.getMarginBox(this.toolbar.domNode);\r\n\r\n                // Set the size of the form to be the content height minus the toolbar height.\r\n                this._form.resize({\r\n                    h: this._contentBox.h - toolbarSize.h,\r\n                    w: this._contentBox.w\r\n                });\r\n            }\r\n        },\r\n\r\n        _isEditingCampaign: function(){\r\n            return MarketingUtils.isSalesCampaign(this.viewModel.contentData.typeIdentifier);\r\n        },\r\n\r\n        _updateToolbarContext: function (context) {\r\n            this.toolbar.update({\r\n                currentContext: context\r\n            });\r\n        },\r\n\r\n        _removeEditorWrapperHandlers: function () {\r\n            if (this._wrapperAspectHandlers && this._wrapperAspectHandlers.length > 0) {\r\n                this._wrapperAspectHandlers.forEach(function (handler) {\r\n                    handler.remove();\r\n                });\r\n                this._wrapperAspectHandlers = [];\r\n            }\r\n\r\n            this._invalidProperties = {};\r\n        },\r\n\r\n        _addEditorWrapperHandlers: function () {\r\n            this._mappingManager.find().forEach(function (mapping) {\r\n                var propertyName = mapping.propertyName;\r\n                this._wrapperAspectHandlers.push(aspect.after(mapping.wrapper, \"_onTryToStopWithInvalidValue\", function () {\r\n                    // This is called whenever an editor is invalid. So disable the save button and keep a marker that the property is invalid.\r\n                    this.toolbar.updateActionButtonStatus(this.toolbar.buttonNames.saveButton, false);\r\n                    this._invalidProperties[propertyName] = true;\r\n                }.bind(this)));\r\n            }, this);\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\InventoryOverview.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/NotificationBar' is an internal Episerver module and can have a breaking change in any release.",
                "line": 17,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/NotificationBar\", // used in template",
                "endLine": 17,
                "endColumn": 45
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/dom\",\r\n    \"dojo/dom-construct\",\r\n    \"dojo/dom-geometry\",\r\n    \"dojo/dom-style\",\r\n\r\n// dijit\r\n    \"dijit/form/Select\",\r\n\r\n// dojox\r\n    \"dojox/html/entities\",\r\n\r\n// EPi CMS\r\n    \"epi-cms/contentediting/NotificationBar\", // used in template\r\n\r\n// commerce\r\n    \"./_OverviewBase\",\r\n    \"./NewInventory\",\r\n    \"../contentediting/editors/InventoryOverviewEditor\",\r\n    \"./viewmodel/InventoryOverviewModel\",\r\n\r\n// Resources\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.inventoryoverview\",\r\n    \"epi/i18n!epi/nls/episerver.shared\",\r\n    \"dojo/text!./templates/InventoryOverview.html\"\r\n\r\n], function (\r\n// dojo\r\n    array,\r\n    declare,\r\n    dom,\r\n    domConstruct,\r\n    domGeo,\r\n    domStyle,\r\n\r\n// dijit\r\n    Select,\r\n\r\n// dojox\r\n    entities,\r\n\r\n// EPi CMS\r\n    NotificationBar,\r\n\r\n// commerce\r\n    _OverviewBase,\r\n    NewInventory,\r\n    InventoryOverviewEditor,\r\n    InventoryOverviewModel,\r\n\r\n// Resources\r\n    resources,\r\n    sharedResources,\r\n    template\r\n) {\r\n\r\n    return declare([_OverviewBase], {\r\n        // summary:\r\n        //    Represents the widget to preview inventory for entries.\r\n        // tags:\r\n        //    public\r\n        resources: resources,\r\n\r\n        sharedResources: sharedResources,\r\n\r\n        templateString: template,\r\n\r\n        modelClassName: InventoryOverviewModel,\r\n\r\n        metadata: null,\r\n\r\n        listType: InventoryOverviewEditor,\r\n\r\n        metadataTypeName: \"EPiServer.Commerce.Shell.ObjectEditing.InternalMetadata.InventoryRecordModel\",\r\n\r\n        _backToPreviousViewNotification: null,\r\n\r\n        newItemWidgetType: NewInventory,\r\n\r\n        _validationMessage: null,\r\n\r\n        layout: function () {\r\n            // summary:\r\n            //      Layout the inventory overview editor.\r\n            // tags:\r\n            //      protected\r\n\r\n            this.inherited(arguments);\r\n\r\n            var headerSize = domGeo.getMarginBox(this.header);\r\n            var height = this._contentBox.h - headerSize.h,\r\n                width = this._contentBox.w;\r\n\r\n            domStyle.set(this.addInventoryNode, \"width\", width + \"px\");\r\n            domStyle.set(this.addInventoryNode, \"height\", height + \"px\");\r\n        },\r\n\r\n        _showNewItemView: function (show) {\r\n            this.heading.innerHTML = show ? this.resources.buttons.addinventory : this.resources.heading;\r\n            domStyle.set(this.addInventoryNode, \"display\", show ? \"\" : \"none\");\r\n            domStyle.set(this.addNewItem.domNode, \"display\", show ? \"none\" : \"\");\r\n            domStyle.set(this.listNode, \"display\", show ? \"none\" : \"\");\r\n            if (this.newItemWidget) {\r\n                this.newItemWidget.destroy();\r\n                this.newItemWidget = null;\r\n            }\r\n            if (show) {\r\n                this._createNewItemWidget();\r\n                this._showNewItemNotification();\r\n            } else {\r\n                this._backToPreviousViewNotification.showNotification();\r\n            }\r\n        },\r\n\r\n        _onAddNewInventory: function() {\r\n            if (this.newItemWidget.isValid()) {\r\n                var newInventory = this.newItemWidget.get(\"value\");\r\n                newInventory.contentLink = this.list.get(\"value\");\r\n\r\n                this.list.model.getAllItems(newInventory.contentLink).then(function (items) {\r\n                    for (var i = 0; i < items.length; i++) {\r\n                        if (items[i].warehouseCode === newInventory.warehouseCode) {\r\n                            this._addLocationValidationNotification(newInventory.warehouseCode);\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    this._removeLocationValidationNotification();\r\n                    this.list.model.addItem(newInventory);\r\n                    this._showNewItemView(false);\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        _onCancelNewItem: function () {\r\n            this._removeLocationValidationNotification();\r\n            this.inherited(arguments);\r\n        },\r\n\r\n        _addLocationValidationNotification: function (location) {\r\n            this._removeLocationValidationNotification();\r\n\r\n            this._validationMessage = {\r\n                content: resources.existinglocationvalidation + \" \" + location\r\n            };\r\n\r\n            this.notificationBar.add(this._validationMessage);\r\n        },\r\n\r\n        _removeLocationValidationNotification: function () {\r\n            if (this._validationMessage) {\r\n                this.notificationBar.remove(this._validationMessage);\r\n            }\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\LinkEdit.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_ModelBindingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 10,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_ModelBindingMixin\",",
                "endLine": 10,
                "endColumn": 42
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/Breadcrumb' is an internal Episerver module and can have a breaking change in any release.",
                "line": 14,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/Breadcrumb\",",
                "endLine": 14,
                "endColumn": 32
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/BreadcrumbCurrentItem' is an internal Episerver module and can have a breaking change in any release.",
                "line": 15,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/BreadcrumbCurrentItem\",",
                "endLine": 15,
                "endColumn": 43
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/NotificationBar' is an internal Episerver module and can have a breaking change in any release.",
                "line": 24,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/NotificationBar\",",
                "endLine": 24,
                "endColumn": 45
            }
        ],
        "errorCount": 4,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n\r\n// dijit\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n\r\n// EPi Framework\r\n    \"epi/shell/widget/_ModelBindingMixin\",\r\n    \"epi/shell/TypeDescriptorManager\",\r\n\r\n// cms\r\n    \"epi-cms/widget/Breadcrumb\",\r\n    \"epi-cms/widget/BreadcrumbCurrentItem\",\r\n\r\n// commerce\r\n    \"../contentediting/editors/CategoryCollectionEditor\",\r\n    \"../contentediting/ModelSupport\",\r\n    \"./_RelationViewBase\",\r\n// Resources\r\n    \"dojo/text!./templates/LinkEdit.html\",\r\n// Widgets in the template\r\n    \"epi-cms/contentediting/NotificationBar\",\r\n    \"epi-cms/contentediting/StandardToolbar\"\r\n], function (\r\n// dojo\r\n    declare,\r\n\r\n// dijit\r\n    _TemplatedMixin,\r\n    _WidgetsInTemplateMixin,\r\n\r\n// EPi Framework\r\n    _ModelBindingMixin,\r\n    TypeDescriptorManager,\r\n\r\n// CMS\r\n    Breadcrumb,\r\n    BreadcrumbCurrentItem,\r\n\r\n// commerce\r\n    CategoryCollectionEditor,\r\n    ModelSupport,\r\n    _RelationViewBase,\r\n// Resources\r\n    template\r\n) {\r\n\r\n    return declare([_RelationViewBase, _TemplatedMixin, _WidgetsInTemplateMixin, _ModelBindingMixin], {\r\n        // summary:\r\n        //    Represents the widget to edit relations and associations.\r\n        // tags:\r\n        //    public\r\n        templateString: template,\r\n\r\n        contentPane: this.contentPane,\r\n\r\n        typeDescriptorManager: TypeDescriptorManager,\r\n\r\n        updateView: function (data, context) {\r\n            // summary:\r\n            //\t\tUpdates the view, to reflect data changes.(when opening this view second time)\r\n            // tags:\r\n            //\t\tprotected\r\n\r\n            this.inherited(arguments);\r\n            this.set(\"value\", context.id);\r\n            this.resize();\r\n        },\r\n\r\n\r\n        _setValueAttr: function (value) {\r\n            // summary:\r\n            //      Sets value for this widget.\r\n            // value: ContentReference\r\n            //      Input content link to get data from.\r\n\r\n            this.categoryList.set(\"value\", value);\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\MarketingToolbar.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/layout/ToolbarContainer' is an internal Episerver module and can have a breaking change in any release.",
                "line": 7,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/layout/ToolbarContainer\",",
                "endLine": 7,
                "endColumn": 40
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/ToolbarLabel' is an internal Episerver module and can have a breaking change in any release.",
                "line": 8,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/ToolbarLabel\",",
                "endLine": 8,
                "endColumn": 36
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/ToolbarSet' is an internal Episerver module and can have a breaking change in any release.",
                "line": 9,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/ToolbarSet\",",
                "endLine": 9,
                "endColumn": 34
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/NotificationStatusBar' is an internal Episerver module and can have a breaking change in any release.",
                "line": 10,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/NotificationStatusBar\",",
                "endLine": 10,
                "endColumn": 43
            }
        ],
        "errorCount": 4,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "define([\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/promise/all\",\r\n    \"dojo/topic\",\r\n    \"dojo/when\",\r\n    \"epi/shell/layout/ToolbarContainer\",\r\n    \"epi/shell/widget/ToolbarLabel\",\r\n    \"epi/shell/widget/ToolbarSet\",\r\n    \"epi-cms/widget/NotificationStatusBar\",\r\n    \"epi/i18n!epi/nls/commerce.widget.marketingtoolbar\",\r\n    \"epi/i18n!epi/nls/episerver.shared\"\r\n], function (declare,\r\n    lang,\r\n    all,\r\n    topic,\r\n    when,\r\n    ToolbarContainer,\r\n    ToolbarLabel,\r\n    ToolbarSet,\r\n    NotificationStatusBar,\r\n    resources,\r\n    sharedResource\r\n) {\r\n\r\n    return declare([ToolbarSet], {\r\n        // tags:\r\n        //      public\r\n\r\n        // currentContext: [public] Object\r\n        //      An object with the current context information.\r\n        currentContext: null,\r\n\r\n        resources: resources,\r\n\r\n        // _setupPromise: [private] String\r\n        //      The setup children promise.\r\n        _setupPromise: null,\r\n\r\n        groupNames: {\r\n            leading: \"leading\",\r\n            center: \"center\",\r\n            trailing: \"trailing\"\r\n        },\r\n\r\n        buttonNames: {\r\n            saveButton: \"saveButton\",\r\n            closeButton: \"closeButton\"\r\n        },\r\n\r\n        buildRendering: function() {\r\n            // summary:\r\n            //      Constructs the toolbar container and starts the children setup process.\r\n            // tags:\r\n            //      protected\r\n\r\n            this.inherited(arguments);\r\n\r\n            // Setup the children items in the toolbar.\r\n            // Update the toolbar items with the current model.\r\n            when(this._setupPromise = this.setupChildren(), this.updateChildren.bind(this));\r\n        },\r\n\r\n        isSetup: function () {\r\n            // summary:\r\n            //      Wait for setup to finish.\r\n            // tags:\r\n            //      protected\r\n\r\n            return this._setupPromise;\r\n        },\r\n\r\n        setupChildren: function() {\r\n            // summary:\r\n            //      Setup the items in the toolbar. Inheriting classes should extend this to add more items to the toolbar.\r\n            // tags:\r\n            //      protected\r\n\r\n            var toolbarGroups = [\r\n            {\r\n                name: this.groupNames.leading,\r\n                type: \"toolbargroup\",\r\n                settings: { region: \"leading\" }\r\n            },\r\n            {\r\n                name: this.groupNames.center,\r\n                type: \"toolbargroup\",\r\n                settings: { region: \"center\" }\r\n            },\r\n            {\r\n                name: this.groupNames.trailing,\r\n                type: \"toolbargroup\",\r\n                settings: { region: \"trailing\" }\r\n            }];\r\n\r\n            var toolbarItems = [{\r\n                parent: this.groupNames.leading,\r\n                name: \"breadcrumbs\",\r\n                widgetType: \"epi-cms/widget/Breadcrumb\",\r\n                settings: {\r\n                    displayAsText: false,\r\n                    showCurrentNode: false\r\n                }\r\n            },\r\n            {\r\n                parent: this.groupNames.leading,\r\n                name: \"currentcontent\",\r\n                widgetType: \"epi-cms/widget/BreadcrumbCurrentItem\"\r\n            },\r\n            {\r\n                parent: this.groupNames.center,\r\n                name: \"notifications\",\r\n                widgetType: \"epi-cms/widget/NotificationStatusBar\"\r\n            },\r\n            {\r\n                parent: this.groupNames.trailing,\r\n                name: \"viewselect\",\r\n                title: this.resources.discountpriorityview.title,\r\n                widgetType: \"dijit/form/Button\",\r\n                iconClass: \"epi-iconForms\",\r\n                settings: {\r\n                    showLabel: false,                    \r\n                    \"class\": \"epi-mediumButton epi-modeButton\"\r\n                },\r\n\r\n                action: function () {\r\n                    setTimeout(function () {\r\n                        topic.publish(\"/epi/shell/action/changeview\", \"discountpriorityview\", {}, { sender: this });\r\n                    }.bind(this), 0);\r\n                }\r\n            }];\r\n\r\n            return this.add(toolbarGroups).then(function () {\r\n                this.add(toolbarItems);\r\n                this.setItemVisibility(\"viewselect\", false);\r\n                return;\r\n            }.bind(this));\r\n        },\r\n\r\n        updateChildren: function() {\r\n            // summary:\r\n            //      Update the toolbar items. This method is called on startup and whenever the current context is set.\r\n            // tags:\r\n            //      protected\r\n\r\n            var context = this.currentContext,\r\n                contentLink = context && context.id;\r\n\r\n            this.setItemProperty(\"breadcrumbs\", \"contentLink\", contentLink);\r\n            this.setItemProperty(\"viewselect\", \"viewConfigurations\", this.viewConfigurations);\r\n            this.setItemProperty(\r\n                \"notifications\",\r\n                \"notificationContext\",\r\n                { contextTypeName: \"epi.cms.contentdata\", contextId: contentLink });\r\n\r\n            if (context) {\r\n                this.setItemProperty(\"currentcontent\", \"currentItemInfo\", {\r\n                    name: context.name,\r\n                    dataType: context.dataType\r\n                });\r\n            }\r\n        },\r\n\r\n        update: function(data) {\r\n            // summary:\r\n            //      Update the toolbar with new data.\r\n            // data:\r\n            //      Toolbar data model. Expected properties are: currentContext\r\n            // tags:\r\n            //      public\r\n\r\n            if (!data) {\r\n                return;\r\n            }\r\n\r\n            this.currentContext = data.currentContext;\r\n            this.viewConfigurations = data.viewConfigurations;\r\n\r\n            when(this.isSetup(), this.updateChildren.bind(this));\r\n        },\r\n\r\n        setViewSelectorVisible: function (visible) {\r\n            this.setItemVisibility(\"viewselect\", visible);\r\n        },\r\n\r\n        getActionButtons: function () {\r\n            // summary:\r\n            //      Gets the action buttons definition.\r\n            // tags:\r\n            //      public\r\n\r\n            var buttonDefinition = {\r\n                parent: this.groupNames.trailing,\r\n                type: \"button\"\r\n            };\r\n\r\n            return {\r\n                save: lang.mixin({\r\n                    name: this.buttonNames.saveButton,\r\n                    label: sharedResource.action.save,\r\n                    settings: { disabled: true, \"class\": \"epi-button--bold\" }\r\n                }, buttonDefinition),\r\n                close: lang.mixin({\r\n                    name: this.buttonNames.closeButton,\r\n                    label: sharedResource.action.close,\r\n                    settings: { \"class\": \"epi-button--bold\" }\r\n                }, buttonDefinition)\r\n            };\r\n        },\r\n\r\n        updateActionButtonStatus: function (buttonName, enabled) {\r\n            // summary:\r\n            //      Update state of action button\r\n            // tags:\r\n            //      Public\r\n            this.setItemProperty(buttonName, \"class\", \"epi-button--bold\" + (enabled ? \" epi-primary\" : \"\"));\r\n            this.setItemProperty(buttonName, \"disabled\", !enabled);\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\MarketSelector.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\NewInventory.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\NewPrice.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\overlay\\CommerceMediaCollection.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/overlay/ItemCollection' is an internal Episerver module and can have a breaking change in any release.",
                "line": 7,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/overlay/ItemCollection\",",
                "endLine": 7,
                "endColumn": 44
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// Dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/when\",\r\n\r\n// EPi CMS\r\n    \"epi-cms/widget/overlay/ItemCollection\",\r\n\r\n// EPi Commerce\r\n    \"../../component/CommerceMediaItemModel\"\r\n], function (\r\n// Dojo\r\n    declare,\r\n    when,\r\n\r\n// EPi CMS\r\n    ItemCollectionOverlay,\r\n\r\n// EPi Commerce\r\n    CommerceMediaItemModel\r\n) {\r\n    return declare([ItemCollectionOverlay], {\r\n        // summary:\r\n        //      The new overlay item for commerce media collection.\r\n        // module:\r\n        //      \"epi-ecf-ui/widget/overlay/CommerceMediaCollection\"\r\n        // description:\r\n        //      Drag and drop media to create new asset item (at the very top)\r\n        // tags:\r\n        //    public\r\n\r\n        // modelType: [public] String\r\n        //      Used to inject model for this.\r\n        modelType: \"epi-ecf-ui/contentediting/editors/model/CommerceMediaCollectionEditorModel\",\r\n\r\n        onDrop: function (target, value) {\r\n            // summary:\r\n            //      Handles onDrop and add new value to model then raise onValueChange event to save this.\r\n            // target: [Object]\r\n            //      The dnd target.\r\n            // value: [Object || Array]\r\n            //      The dnd data.\r\n            // tags:\r\n            //      private\r\n\r\n            // insert new item at the very top\r\n            var topItem = null,\r\n                modelData = this.model.get(\"items\");\r\n            if (modelData) {\r\n                topItem = modelData[0];\r\n            }\r\n            when(this.model.addItem(value, topItem, true), function () {\r\n                var items = this.model.get(\"data\");\r\n                this.onValueChange({\r\n                    propertyName: this.name,\r\n                    value: items\r\n                });\r\n            }.bind(this));\r\n        },\r\n\r\n        _setupModel: function (/*Object*/data) {\r\n            // summary:\r\n            //      setup the viewmodel with latest value\r\n            // tag:\r\n            //      public override\r\n\r\n            require([this.modelType], function (modelClass) {\r\n                var modelData = { };\r\n                // set itemModel as Commerce media item model\r\n                modelData.itemModelType = CommerceMediaItemModel;\r\n                // set itemType as Commerce media\r\n                modelData.itemType = \"EPiServer.Commerce.Shell.ObjectEditing.InternalMetadata.CommerceMediaModel\";\r\n                this.model = new modelClass(modelData, this.modelParams);\r\n                this.model.set(\"data\", data); // set model data\r\n            }.bind(this));\r\n        },\r\n\r\n        _setupAllowedTypes: function () {\r\n            // summary:\r\n            //      Setup the allowed types for drag and drop\r\n            // tags:\r\n            //      Protected override\r\n\r\n            var converterKey = this.modelParams.itemConverterKey,\r\n                customTypeIdentifier = this.modelParams.customTypeIdentifier;\r\n\r\n            this.allowedDndTypes = this.allowedDndTypes || [];\r\n\r\n            if (converterKey) {\r\n                customTypeIdentifier = customTypeIdentifier + \".\" + converterKey;\r\n            }\r\n\r\n            if (customTypeIdentifier) {\r\n                // add this commerce media type to the list of allowed DnD type\r\n                this.allowedDndTypes.unshift(customTypeIdentifier);\r\n            }\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\PackageEdit.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_ModelBindingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 10,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_ModelBindingMixin\",",
                "endLine": 10,
                "endColumn": 42
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/Breadcrumb' is an internal Episerver module and can have a breaking change in any release.",
                "line": 14,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/Breadcrumb\",",
                "endLine": 14,
                "endColumn": 32
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/BreadcrumbCurrentItem' is an internal Episerver module and can have a breaking change in any release.",
                "line": 15,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/BreadcrumbCurrentItem\",",
                "endLine": 15,
                "endColumn": 43
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/NotificationBar' is an internal Episerver module and can have a breaking change in any release.",
                "line": 22,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/NotificationBar\",",
                "endLine": 22,
                "endColumn": 45
            }
        ],
        "errorCount": 4,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n\r\n// dijit\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n\r\n// EPi Framework\r\n    \"epi/shell/widget/_ModelBindingMixin\",\r\n    \"epi/shell/TypeDescriptorManager\",\r\n\r\n// cms\r\n    \"epi-cms/widget/Breadcrumb\",\r\n    \"epi-cms/widget/BreadcrumbCurrentItem\",\r\n\r\n// commerce\r\n    \"./_RelationViewBase\",\r\n// Resources\r\n    \"dojo/text!./templates/PackageEdit.html\",\r\n// Widgets in the template\r\n    \"epi-cms/contentediting/NotificationBar\",\r\n    \"epi-cms/contentediting/StandardToolbar\",\r\n    \"../contentediting/editors/PackageEntryCollectionEditor\"\r\n], function (\r\n// dojo\r\n    declare,\r\n\r\n// dijit\r\n    _TemplatedMixin,\r\n    _WidgetsInTemplateMixin,\r\n\r\n// EPi Framework\r\n    _ModelBindingMixin,\r\n    TypeDescriptorManager,\r\n\r\n// CMS\r\n    Breadcrumb,\r\n    BreadcrumbCurrentItem,\r\n\r\n// commerce\r\n    _RelationViewBase,\r\n// Resources\r\n    template\r\n) {\r\n\r\n    return declare([_RelationViewBase, _TemplatedMixin, _WidgetsInTemplateMixin, _ModelBindingMixin], {\r\n        // summary:\r\n        //    Represents the widget to edit package entries\r\n        // tags:\r\n        //    public\r\n        templateString: template,\r\n\r\n        contentPane: this.contentPane,\r\n\r\n        updateView: function (data, context) {\r\n            // summary:\r\n            //      Updates the view, to reflect data changes.(when opening this view second time)\r\n            // tags:\r\n            //      protected\r\n\r\n            this.inherited(arguments);\r\n\r\n            this.set(\"value\", context.id);\r\n        },\r\n\r\n        _setValueAttr: function (value) {\r\n            // summary:\r\n            //      Sets value for this widget.\r\n            // value: ContentReference\r\n            //      Input content link to get data from.\r\n\r\n            this.collectionList.set(\"value\", value);\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\PriceEditorButtons.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\PricingOverview.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/NotificationBar' is an internal Episerver module and can have a breaking change in any release.",
                "line": 14,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/NotificationBar\", // used in template",
                "endLine": 14,
                "endColumn": 45
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/array\",\r\n    \"dojo/dom\",\r\n    \"dojo/dom-construct\",\r\n    \"dojo/dom-geometry\",\r\n    \"dojo/dom-style\",\r\n// dijit\r\n    \"dijit/form/Select\",\r\n// dojox\r\n    \"dojox/html/entities\",\r\n// EPi CMS\r\n    \"epi-cms/contentediting/NotificationBar\", // used in template\r\n// commerce\r\n    \"../contentediting/editors/PricingOverviewEditor\",\r\n    \"./_OverviewBase\",\r\n    \"./MarketSelector\",\r\n    \"./NewPrice\",\r\n    \"./viewmodel/PricingOverviewModel\",\r\n// Resources\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.pricingoverview\",\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.market\",\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.customergroup\",\r\n    \"epi/i18n!epi/nls/episerver.shared\",\r\n    \"dojo/text!./templates/PricingOverview.html\"\r\n], function (\r\n// dojo\r\n    declare,\r\n    array,\r\n    dom,\r\n    domConstruct,\r\n    domGeo,\r\n    domStyle,\r\n// dijit\r\n    Select,\r\n// dojox\r\n    entities,\r\n// EPi CMS\r\n    NotificationBar,\r\n// commerce\r\n    PricingOverviewEditor,\r\n    _OverviewBase,\r\n    MarketSelector,\r\n    NewPrice,\r\n    PricingOverviewModel,\r\n// Resources\r\n    resources,\r\n    resDefaultMarket,\r\n    resDefaultCustomerGroup,\r\n    sharedResources,\r\n    template\r\n) {\r\n\r\n    return declare([_OverviewBase], {\r\n        // summary:\r\n        //    Represents the widget to preview price for entries.\r\n        // tags:\r\n        //    public\r\n        resources: resources,\r\n\r\n        sharedResources: sharedResources,\r\n\r\n        templateString: template,\r\n\r\n        modelClassName: PricingOverviewModel,\r\n\r\n        defaultCGItem: { id: \"ALL\", name: resDefaultCustomerGroup.defaultitem },\r\n\r\n        metadata: null,\r\n\r\n        listType: PricingOverviewEditor,\r\n\r\n        metadataTypeName: \"EPiServer.Commerce.Shell.ObjectEditing.InternalMetadata.PriceModel\",\r\n\r\n        _backToPreviousViewNotification: null,\r\n\r\n        newItemWidgetType: NewPrice,\r\n\r\n        // Map property name in view model to a list of properties in this widget\r\n        modelBindingMap: {\r\n            \"markets\": [\"markets\"],\r\n            \"customerGroups\": [\"customerGroups\"]\r\n        },\r\n\r\n        postCreate: function () {\r\n            this.inherited(arguments);\r\n            this.model.populateData(); // load market list and customer groups.\r\n        },\r\n\r\n        layout: function () {\r\n            // summary:\r\n            //      Layout the pricing overview editor.\r\n            // tags:\r\n            //      protected\r\n\r\n            this.inherited(arguments);\r\n\r\n            var headerSize = domGeo.getMarginBox(this.header);\r\n            var height = this._contentBox.h - headerSize.h,\r\n                width = this._contentBox.w;\r\n\r\n            domStyle.set(this.addPriceNode, \"width\", width + \"px\");\r\n            domStyle.set(this.addPriceNode, \"height\", height + \"px\");\r\n        },\r\n\r\n        _setCustomerGroupsAttr: function (customerGroupList) {\r\n            // summary:\r\n            //      Sets customer group list. Let's bind this list to customer groups selector.\r\n            // tags:\r\n            //      private\r\n\r\n            // Turn off change notifications while we make all these changes\r\n            this.customerGroupSelector._onChangeActive = false;\r\n            this.customerGroupSelector.removeOption(this.customerGroupSelector.options);\r\n\r\n            if (customerGroupList) {\r\n                customerGroupList.unshift(this.defaultCGItem);\r\n\r\n                array.forEach(customerGroupList, function (customerGroup) {\r\n                    this.customerGroupSelector.addOption({ label: entities.encode(customerGroup.name), value: entities.encode(customerGroup.id) });\r\n                }, this);\r\n            }\r\n\r\n            // Turn on change notifications when we made all these changes\r\n            this.customerGroupSelector._onChangeActive = true;\r\n        },\r\n\r\n        _onMarketChanged: function () {\r\n            // summary:\r\n            //      Filter the price list by selected market.\r\n            var val = this.marketSelector.value;\r\n\r\n            // Show market column when market seletor is ALL, otherwise hide it.\r\n            if (this.list.grid) {\r\n                if (val === \"ALL\") {\r\n                    this.list.grid.styleColumn(\"marketId\", \"display: table-cell;\");\r\n                } else {\r\n                    this.list.grid.styleColumn(\"marketId\", \"display: none;\");\r\n                }\r\n            }\r\n\r\n            this.list.set(\"marketId\", val);\r\n        },\r\n\r\n        _onAddNewPrice: function(){\r\n            if (this.newItemWidget.isValid()) {\r\n                var newPrice = this.newItemWidget.get(\"value\");\r\n                newPrice.contentLink = this.model.content.contentLink;\r\n                this.list.addPrice(newPrice);\r\n                this._showNewItemView(false);\r\n            }\r\n        },\r\n\r\n        _showNewItemView: function(show){\r\n            this.heading.innerHTML = show ? this.resources.buttons.addprice : this.resources.heading;\r\n            domStyle.set(this.addPriceNode, \"display\", show ? \"\" : \"none\");\r\n            domStyle.set(this.listNode, \"display\", show ? \"none\" : \"\");\r\n            domStyle.set(this.filterNode, \"display\", show ? \"none\" : \"\");\r\n            if (this.newItemWidget) {\r\n                this.newItemWidget.destroy();\r\n                this.newItemWidget = null;\r\n            }\r\n            if (show){\r\n                this._createNewItemWidget();\r\n                this._showNewItemNotification();\r\n            } else {\r\n                this._backToPreviousViewNotification.showNotification();\r\n            }\r\n        },\r\n\r\n        _onCustomerGroupChanged: function (){\r\n            // summary:\r\n            //      Filter the price list by selected customer group.\r\n            var val = this.customerGroupSelector.value;\r\n\r\n            // Show price type & price code column when customer group seletor is ALL, otherwise hide them.\r\n            if (val === \"ALL\") {\r\n                this.list.grid.styleColumn(\"priceCode\", \"display: table-cell;\");\r\n                this.list.grid.styleColumn(\"priceType\", \"display: table-cell;\");\r\n            } else {\r\n                this.list.grid.styleColumn(\"priceCode\", \"display: none;\");\r\n                this.list.grid.styleColumn(\"priceType\", \"display: none;\");\r\n            }\r\n\r\n            this.list.set(\"priceCode\", val);\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\RelatedEntriesEdit.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_ModelBindingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 10,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_ModelBindingMixin\",",
                "endLine": 10,
                "endColumn": 42
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/Breadcrumb' is an internal Episerver module and can have a breaking change in any release.",
                "line": 14,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/Breadcrumb\",",
                "endLine": 14,
                "endColumn": 32
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/BreadcrumbCurrentItem' is an internal Episerver module and can have a breaking change in any release.",
                "line": 15,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/BreadcrumbCurrentItem\",",
                "endLine": 15,
                "endColumn": 43
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/NotificationBar' is an internal Episerver module and can have a breaking change in any release.",
                "line": 24,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/NotificationBar\",",
                "endLine": 24,
                "endColumn": 45
            }
        ],
        "errorCount": 4,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n\r\n// dijit\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n\r\n// EPi Framework\r\n    \"epi/shell/widget/_ModelBindingMixin\",\r\n    \"epi/shell/TypeDescriptorManager\",\r\n\r\n// cms\r\n    \"epi-cms/widget/Breadcrumb\",\r\n    \"epi-cms/widget/BreadcrumbCurrentItem\",\r\n\r\n// commerce\r\n    \"../contentediting/editors/AssociationCollectionEditor\",\r\n    \"../contentediting/ModelSupport\",\r\n    \"./_RelationViewBase\",\r\n// Resources\r\n    \"dojo/text!./templates/RelatedEntriesEdit.html\",\r\n// Widgets in the template\r\n    \"epi-cms/contentediting/NotificationBar\",\r\n    \"epi-cms/contentediting/StandardToolbar\"\r\n], function (\r\n// dojo\r\n    declare,\r\n\r\n// dijit\r\n    _TemplatedMixin,\r\n    _WidgetsInTemplateMixin,\r\n\r\n// EPi Framework\r\n    _ModelBindingMixin,\r\n    TypeDescriptorManager,\r\n\r\n// CMS\r\n    Breadcrumb,\r\n    BreadcrumbCurrentItem,\r\n\r\n// commerce\r\n    AssociationCollectionEditor,\r\n    ModelSupport,\r\n    _RelationViewBase,\r\n// Resources\r\n    template\r\n) {\r\n\r\n    return declare([_RelationViewBase, _TemplatedMixin, _WidgetsInTemplateMixin, _ModelBindingMixin], {\r\n        // summary:\r\n        //    Represents the widget to edit relations and associations.\r\n        // tags:\r\n        //    public\r\n        templateString: template,\r\n\r\n        contentPane: this.contentPane,\r\n\r\n        associationList: null,\r\n\r\n        associationListType: AssociationCollectionEditor,\r\n\r\n        typeDescriptorManager: TypeDescriptorManager,\r\n\r\n        updateView: function (data, context) {\r\n            // summary:\r\n            //\t\tUpdates the view, to reflect data changes.(when opening this view second time)\r\n            // tags:\r\n            //\t\tprotected\r\n\r\n            this.inherited(arguments);\r\n            this._setupAssociationsList(context);\r\n            this.set(\"value\", context.id);\r\n            this.resize();\r\n        },\r\n\r\n        _setupAssociationsList: function(context){\r\n            if (this.typeDescriptorManager.isBaseTypeIdentifier(context.dataType, ModelSupport.contentTypeIdentifier.entryContentBase)) {\r\n                if (!this.associationList){\r\n                    this.associationList = new this.associationListType();\r\n                    this.own(this.associationList);\r\n                    this.associationList.placeAt(this.associationListNode);\r\n                }\r\n            } else {\r\n                if (this.associationList) {\r\n                    this.associationList.destroy();\r\n                    delete this.associationList;\r\n                }\r\n            }\r\n        },\r\n\r\n        _setValueAttr: function (value) {\r\n            // summary:\r\n            //      Sets value for this widget.\r\n            // value: ContentReference\r\n            //      Input content link to get data from.\r\n\r\n            if (this.associationList){\r\n                this.associationList.set(\"value\", value);\r\n            }\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\SelectorItemTag.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\Settings.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\SimpleViewNotification.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\VariantEdit.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/widget/_ModelBindingMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 11,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/widget/_ModelBindingMixin\",",
                "endLine": 11,
                "endColumn": 42
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/dnd/Target' is an internal Episerver module and can have a breaking change in any release.",
                "line": 12,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/dnd/Target\",",
                "endLine": 12,
                "endColumn": 27
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/Breadcrumb' is an internal Episerver module and can have a breaking change in any release.",
                "line": 15,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/Breadcrumb\",",
                "endLine": 15,
                "endColumn": 32
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/BreadcrumbCurrentItem' is an internal Episerver module and can have a breaking change in any release.",
                "line": 16,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/BreadcrumbCurrentItem\",",
                "endLine": 16,
                "endColumn": 43
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/contentediting/NotificationBar' is an internal Episerver module and can have a breaking change in any release.",
                "line": 26,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/contentediting/NotificationBar\",",
                "endLine": 26,
                "endColumn": 45
            }
        ],
        "errorCount": 5,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/declare\",\r\n    \"dojo/topic\",\r\n\r\n// dijit\r\n    \"dijit/_TemplatedMixin\",\r\n    \"dijit/_WidgetsInTemplateMixin\",\r\n\r\n// EPi Framework\r\n    \"epi/shell/widget/_ModelBindingMixin\",\r\n    \"epi/shell/dnd/Target\",\r\n\r\n// cms\r\n    \"epi-cms/widget/Breadcrumb\",\r\n    \"epi-cms/widget/BreadcrumbCurrentItem\",\r\n\r\n// commerce\r\n    \"../contentediting/editors/VariantCollectionEditor\",\r\n    \"./_RelationViewBase\",\r\n\r\n// Resources\r\n    \"dojo/text!./templates/VariantEdit.html\",\r\n    \"epi/i18n!epi/cms/nls/commerce.contentediting.editors.variantcollectioneditor\",\r\n// Widgets in the template\r\n    \"epi-cms/contentediting/NotificationBar\",\r\n    \"epi-cms/contentediting/StandardToolbar\"\r\n], function (\r\n// dojo\r\n    declare,\r\n    topic,\r\n\r\n// dijit\r\n    _TemplatedMixin,\r\n    _WidgetsInTemplateMixin,\r\n\r\n// EPi Framework\r\n    _ModelBindingMixin,\r\n    Target,\r\n\r\n// CMS\r\n    Breadcrumb,\r\n    BreadcrumbCurrentItem,\r\n\r\n// commerce\r\n    VariantCollectionEditor,\r\n    _RelationViewBase,\r\n\r\n// Resources\r\n    template,\r\n    resources\r\n) {\r\n\r\n    return declare([_RelationViewBase, _TemplatedMixin, _WidgetsInTemplateMixin, _ModelBindingMixin], {\r\n        // summary:\r\n        //    Represents the widget to edit variants.\r\n        // tags:\r\n        //    public\r\n        templateString: template,\r\n\r\n        resources: resources,\r\n\r\n        contentPane: this.contentPane,\r\n\r\n        postCreate: function() {\r\n            this.inherited(arguments);\r\n            this.own(this.collectionList.on(\"list-error\", function(event){\r\n                this.notificationBar.add({content: event.errorText});\r\n            }.bind(this)));\r\n        },\r\n\r\n        updateView: function (data, context) {\r\n            // summary:\r\n            //\t\tUpdates the view, to reflect data changes.(when opening this view second time)\r\n            // tags:\r\n            //\t\tprotected\r\n\r\n            this.notificationBar.clear();\r\n            this.inherited(arguments);\r\n            this.set(\"value\", context.id);\r\n        },\r\n\r\n        _setValueAttr: function (value) {\r\n            this.collectionList.set(\"value\", value);\r\n        }\r\n    });\r\n});\r\n"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\viewmodel\\_MarketingListBaseModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\viewmodel\\CampaignItemListModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\viewmodel\\CatalogContentListViewModel.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/selection' is an internal Episerver module and can have a breaking change in any release.",
                "line": 10,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/selection\",",
                "endLine": 10,
                "endColumn": 26
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/withConfirmation' is an internal Episerver module and can have a breaking change in any release.",
                "line": 11,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/withConfirmation\",",
                "endLine": 11,
                "endColumn": 41
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/DelegateCommand' is an internal Episerver module and can have a breaking change in any release.",
                "line": 12,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/DelegateCommand\",",
                "endLine": 12,
                "endColumn": 40
            }
        ],
        "errorCount": 3,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n    // dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/Evented\",\r\n    \"dojo/when\",\r\n\r\n    // epi\r\n    \"epi/shell/selection\",\r\n    \"epi/shell/command/withConfirmation\",\r\n    \"epi/shell/command/DelegateCommand\",\r\n    \"epi/shell/command/ToggleCommand\",\r\n\r\n    // epi-cms\r\n    \"epi-cms/component/command/ChangeContext\",\r\n    \"epi-cms/command/NewContent\",\r\n    \"epi-cms/command/CopyContent\",\r\n    \"epi-cms/command/CutContent\",\r\n    \"epi-cms/command/DeleteContent\",\r\n    \"epi-cms/core/ContentReference\",\r\n\r\n    // commerce\r\n    \"../../command/DetachFromCategory\",\r\n    \"../../command/PasteCatalogContent\",\r\n    \"../../component/DeleteCatalogContentHandler\",\r\n    \"../../contentediting/ModelSupport\",\r\n    \"epi-ecf-ui/widget/viewmodel/CatalogListViewModel\",\r\n\r\n    // resources\r\n    \"epi/i18n!epi/cms/nls/commerce.widget.catalogcontentlist\",\r\n    \"epi/i18n!epi/nls/episerver.shared\"\r\n], function (\r\n    // dojo\r\n    array,\r\n    declare,\r\n    lang,\r\n    Evented,\r\n    when,\r\n\r\n    // epi\r\n    Selection,\r\n    withConfirmation,\r\n    DelegateCommand,\r\n    ToggleCommand,\r\n\r\n    // epi-cms\r\n    ChangeContextCommand,\r\n    NewContent,\r\n    CopyCommand,\r\n    CutCommand,\r\n    DeleteCommand,\r\n    ContentReference,\r\n\r\n    // commerce\r\n    DetachFromCategory,\r\n    PasteCatalogContent,\r\n    DeleteCatalogContentHandler,\r\n    ModelSupport,\r\n    CatalogListViewModel,\r\n\r\n    // resources\r\n    resources,\r\n    sharedresources\r\n) {\r\n        return declare([CatalogListViewModel, Evented], {\r\n\r\n            res: resources,\r\n\r\n            sortMode: false,\r\n\r\n            showThumbnails: true,\r\n\r\n            getSelectionCommands: function () {\r\n                return [\r\n                    this._commandRegistry.cut.command,\r\n                    this._commandRegistry.copy.command,\r\n                    this._commandRegistry.pasteOnContext.command,\r\n                    this._commandRegistry.detach.command,\r\n                    this._commandRegistry.remove.command,\r\n                    this._commandRegistry.toggleSortMode.command\r\n                ];\r\n            },\r\n\r\n            getCommand: function (commandName) {\r\n                // summary:\r\n                //      Gets a command by command name.\r\n                // tags:\r\n                //      public\r\n\r\n                return this._commandRegistry[commandName] ? this._commandRegistry[commandName].command : null;\r\n            },\r\n\r\n            setCommandAvailability: function (parameter) {\r\n                var commandRegistry = this._commandRegistry;\r\n                var isDefaultMode = !this.sortMode;\r\n                var isFirstItem = (parameter != null && parameter.isFirstItem);\r\n                var isLastItem = (parameter != null && parameter.isLastItem);\r\n\r\n                commandRegistry.moveup.command.set(\"isAvailable\", !isDefaultMode);\r\n                commandRegistry.movedown.command.set(\"isAvailable\", !isDefaultMode);\r\n\r\n                this._setCanExecute(commandRegistry.moveup.command, !isDefaultMode && !isFirstItem);\r\n                this._setCanExecute(commandRegistry.movedown.command, !isDefaultMode && !isLastItem);\r\n                this._setAvailability(commandRegistry.edit.command, isDefaultMode);\r\n                this._setAvailability(commandRegistry.popupCommand.command, isDefaultMode);\r\n                this._setAvailability(commandRegistry.paste.command, isDefaultMode);\r\n                this._setAvailability(commandRegistry.copy.command, isDefaultMode);\r\n                this._setAvailability(commandRegistry.cut.command, isDefaultMode);\r\n                this._setAvailability(commandRegistry.pasteOnContext.command, isDefaultMode);\r\n                this._setAvailability(commandRegistry.detach.command, isDefaultMode);\r\n                this._setAvailability(commandRegistry.remove.command, isDefaultMode);\r\n            },\r\n\r\n            _setCanExecute: function (command, validCondition) {\r\n                command.set(\"canExecute\", validCondition);\r\n            },\r\n\r\n            _setAvailability: function (command, validCondition) {\r\n                command.set(\"isAvailable\", validCondition);\r\n            },\r\n\r\n            moveItem: function (sourceContent, targetContent, moveBefore) {\r\n\r\n                var query = {\r\n                    referenceId: this.model.contextId,\r\n                    requestMode: ModelSupport.relationRequestMode.byTarget\r\n                };\r\n\r\n                return when(this.treeStoreModel.relationStore.query(query)).then(function (relations) {\r\n                    var sourceRelation;\r\n                    var targetRelation;\r\n\r\n                    array.forEach(relations, function (relation) {\r\n                        if (ContentReference.compareIgnoreVersion(sourceContent.contentLink, relation.source)) {\r\n                            sourceRelation = relation;\r\n                        }\r\n\r\n                        if (!targetContent) { // No target content happens when an item is dropped after the list. In that case we want to use the last item in the list as target.\r\n                            targetRelation = relation;\r\n                        } else if (ContentReference.compareIgnoreVersion(targetContent.contentLink, relation.source)) {\r\n                            targetRelation = relation;\r\n                        }\r\n                    }.bind(this));\r\n\r\n                    if (moveBefore) {\r\n                        sourceRelation.sortOrder = targetRelation.sortOrder;\r\n                    } else {\r\n                        sourceRelation.sortOrder = targetRelation.sortOrder + 1;\r\n                    }\r\n\r\n                    return this.treeStoreModel.relationStore.put(sourceRelation);\r\n\r\n                }.bind(this));\r\n            },\r\n\r\n            _setupCommands: function () {\r\n\r\n                var commandSettings = {\r\n                    category: \"context\",\r\n                    clipboard: this.clipboardManager,\r\n                    selection: this.selection,\r\n                    model: this.treeStoreModel\r\n                };\r\n\r\n                var toolbarGroupSettings = lang.mixin({ toolbarGroup: \"clipboard\" }, commandSettings);\r\n                var deleteCommand = new DeleteCommand(lang.mixin({ model: this.treeStoreModel, toolbarGroup: \"misc\" }, commandSettings));\r\n\r\n                lang.mixin(this._commandRegistry, this.getCreateCommands());\r\n                lang.mixin(this._commandRegistry, {\r\n                    edit: {\r\n                        command: new ChangeContextCommand({\r\n                            category: \"context\",\r\n                            forceContextChange: true,\r\n                            viewName: \"formedit\"\r\n                        }),\r\n                        order: -1\r\n                    },\r\n                    cut: {\r\n                        command: new CutCommand(toolbarGroupSettings),\r\n                        order: 101\r\n                    },\r\n                    copy: {\r\n                        command: new CopyCommand(toolbarGroupSettings),\r\n                        order: 102\r\n                    },\r\n                    paste: {\r\n                        command: new PasteCatalogContent(commandSettings),\r\n                        order: 103\r\n                    },\r\n                    pasteOnContext: {\r\n                        command: new PasteCatalogContent(lang.mixin(toolbarGroupSettings, { selection: new Selection() }))\r\n                    },\r\n                    detach: {\r\n                        command: withConfirmation(new DetachFromCategory(lang.mixin(commandSettings, { toolbarGroup: \"misc\" })), null, {\r\n                            title: this.res.detachconfirmation.title,\r\n                            description: this.res.detachconfirmation.description\r\n                        }),\r\n                        order: 104\r\n                    },\r\n                    remove: {\r\n                        command: withConfirmation(deleteCommand, DeleteCatalogContentHandler, {\r\n                            title: this.res.deleteconfirmation.title,\r\n                            description: this.res.deleteconfirmation.description,\r\n                            confirmActionText: sharedresources.action.deletelabel,\r\n                            cancelActionText: sharedresources.action.cancel\r\n                        }),\r\n                        order: 105\r\n                    },\r\n                    toggleSortMode: {\r\n                        command: new ToggleCommand({\r\n                            model: this,\r\n                            toolbarGroup: \"sorting\",\r\n                            property: \"sortMode\",\r\n                            iconClass: \"epi-iconSort\",\r\n                            label: this.res.sorting.sortmode\r\n                        }),\r\n                        order: 106\r\n                    },\r\n                    toggleThumbnails: {\r\n                        command: new ToggleCommand({\r\n                            model: this,\r\n                            property: \"showThumbnails\"\r\n                        }),\r\n                        order: 107\r\n                    },\r\n                    moveup: {\r\n                        command: new DelegateCommand(lang.mixin({\r\n                            name: \"moveup\",\r\n                            isAvailable: false,\r\n                            canExecute: true,\r\n                            label: this.res.sorting.contextmenu.moveup,\r\n                            iconClass: \"epi-iconUp\",\r\n                            delegate: function (cmd) {\r\n                                this.emit(\"onMoveUp\");\r\n                            }.bind(this)\r\n                        }, commandSettings)),\r\n                        order: 108\r\n                    },\r\n                    movedown: {\r\n                        command: new DelegateCommand(lang.mixin({\r\n                            name: \"movedown\",\r\n                            isAvailable: false,\r\n                            canExecute: true,\r\n                            label: this.res.sorting.contextmenu.movedown,\r\n                            iconClass: \"epi-iconDown\",\r\n                            delegate: function (cmd) {\r\n                                this.emit(\"onMoveDown\");\r\n                            }.bind(this)\r\n                        }, commandSettings)),\r\n                        order: 109\r\n                    }\r\n                });\r\n                this.set(\"commands\", this._commandRegistry.toArray());\r\n            },\r\n\r\n            _sortModeSetter: function (value) {\r\n                this.sortMode = value;\r\n\r\n                this.setCommandAvailability();\r\n            }\r\n        });\r\n    });"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\viewmodel\\CatalogListViewModel.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/selection' is an internal Episerver module and can have a breaking change in any release.",
                "line": 11,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/selection\",",
                "endLine": 11,
                "endColumn": 26
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/command/withConfirmation' is an internal Episerver module and can have a breaking change in any release.",
                "line": 13,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/command/withConfirmation\",",
                "endLine": 13,
                "endColumn": 41
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/component/ContentContextMenuCommandProvider' is an internal Episerver module and can have a breaking change in any release.",
                "line": 18,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/component/ContentContextMenuCommandProvider\",",
                "endLine": 18,
                "endColumn": 58
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/CreateCommandsMixin' is an internal Episerver module and can have a breaking change in any release.",
                "line": 20,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/CreateCommandsMixin\",",
                "endLine": 20,
                "endColumn": 41
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/ContentTreeModelConfirmation' is an internal Episerver module and can have a breaking change in any release.",
                "line": 21,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/ContentTreeModelConfirmation\",",
                "endLine": 21,
                "endColumn": 50
            }
        ],
        "errorCount": 5,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/string\",\r\n// dojox\r\n    \"dojox/html/entities\",\r\n// epi\r\n    \"epi/dependency\",\r\n    \"epi/shell/selection\",\r\n    \"epi/shell/command/_CommandProviderMixin\",\r\n    \"epi/shell/command/withConfirmation\",\r\n// epi cms\r\n    \"epi-cms/core/ContentReference\",\r\n    \"epi-cms/command/NewContent\",\r\n    \"epi-cms/command/DeleteContent\",\r\n    \"epi-cms/component/ContentContextMenuCommandProvider\",\r\n    \"epi-cms/component/command/ChangeContext\",\r\n    \"epi-cms/widget/CreateCommandsMixin\",\r\n    \"epi-cms/widget/ContentTreeModelConfirmation\",\r\n// Commerce\r\n    \"epi-ecf-ui/widget/viewmodel/CatalogTreeStoreModel\",\r\n    \"epi-ecf-ui/component/DeleteCatalogContentHandler\",\r\n    \"epi-ecf-ui/command/PasteCatalogContent\",\r\n// Resources\r\n    \"epi/i18n!epi/cms/nls/commerce.components.catalogs.commands\",\r\n    \"epi/i18n!epi/nls/episerver.shared\"\r\n],\r\n\r\nfunction (\r\n// dojo\r\n    array,\r\n    declare,\r\n    lang,\r\n    dojoString,\r\n// dojox\r\n    htmlEntities,\r\n//epi\r\n    dependency,\r\n    Selection,\r\n    _CommandProviderMixin,\r\n    withConfirmation,\r\n// epi cms\r\n    ContentReference,\r\n    NewContent,\r\n    DeleteContent,\r\n    ContextMenuCommandProvider,\r\n    ChangeContextCommand,\r\n    CreateCommandsMixin,\r\n    ContentTreeModelConfirmation,\r\n// Commerce\r\n    CatalogTreeStoreModel,\r\n    DeleteCatalogContentHandler,\r\n    PasteCatalogContent,\r\n// Resources\r\n    res,\r\n    sharedResources\r\n) {\r\n    // module:\r\n    //      epi-ecf-ui.widget.viewmodel.CatalogListViewModel\r\n\r\n    return declare([_CommandProviderMixin, CreateCommandsMixin], {\r\n\r\n        // summary:\r\n        //    Represents the catalog list overview widget's model.\r\n        // model:\r\n        //    \"epi-ecf-ui/widget/viewmodel/CatalogListViewModel\"\r\n        // tags:\r\n        //    public\r\n\r\n        model: null,\r\n\r\n        treeStoreModel: null,\r\n\r\n        clipboardManager: null,\r\n\r\n        selection: null,\r\n\r\n        numSelectedRows: null,\r\n\r\n        _commandRegistry: null,\r\n\r\n        postscript: function () {\r\n            // make sure clipboard is shared across widgets\r\n            this.clipboardManager = this.clipboardManager || dependency.resolve(\"epi.commerce.global\").get(\"epi.commerce.global.clipboard\");\r\n\r\n            this.selection = this.selection || new Selection();\r\n            this.repositoryKey = \"catalog\";\r\n\r\n            this.inherited(arguments);\r\n\r\n            this.treeStoreModel = new CatalogTreeStoreModel();\r\n            this.treeStoreModel.roots = this.roots;\r\n\r\n            this._commandRegistry = this._commandRegistry || {\r\n                sort: function () {\r\n                    var commands = [];\r\n                    for (var key in this) {\r\n                        if (key !== \"toArray\" && key !== \"sort\" && this.hasOwnProperty(key) && key !== \"pasteOnContext\") {\r\n                            var index = this[key].order;\r\n                            if (!index) {\r\n                                index = 100;\r\n                            }\r\n                            commands.push([index, this[key].command]);\r\n                        }\r\n                    }\r\n\r\n                    commands.sort(function (a, b) {\r\n                        return a[0] - b[0];\r\n                    });\r\n\r\n                    return commands;\r\n                },\r\n                toArray: function () {\r\n                    var sortedCommand = this.sort();\r\n                    var commands = [];\r\n                    array.forEach(sortedCommand, function (key) {\r\n                        commands.push(key[1]);\r\n                    });\r\n\r\n                    return commands;\r\n                }\r\n            };\r\n\r\n            this._setupCommands();\r\n        },\r\n\r\n        _setupCommands: function () {\r\n\r\n            var commandSettings = {\r\n                category: \"context\",\r\n                clipboard: this.clipboardManager,\r\n                selection: this.selection,\r\n                model: this.treeStoreModel\r\n            };\r\n\r\n            lang.mixin(this._commandRegistry, this.getCreateCommands());\r\n            lang.mixin(this._commandRegistry, {\r\n                edit: {\r\n                    command: new ChangeContextCommand({\r\n                        category: \"context\",\r\n                        forceContextChange: true,\r\n                        viewName: \"formedit\"\r\n                    }),\r\n                    order: -1\r\n                },\r\n                paste: {\r\n                    command: new PasteCatalogContent(commandSettings),\r\n                    order: 103\r\n                },\r\n                deleteCatalog: {\r\n                    command: new DeleteContent(commandSettings),\r\n                    order: 104\r\n                }\r\n            });\r\n            this.set(\"commands\", this._commandRegistry.toArray());\r\n        },\r\n\r\n        _modelSetter: function (model) {\r\n            this.model = model;\r\n            if (!model) {\r\n                return;\r\n            }\r\n\r\n            var modelData = model.data || model;\r\n            this._commandRegistry.edit.command.set(\"model\", modelData);\r\n\r\n            if (this._commandRegistry.deleteCatalog) {\r\n                // add confirmation dialog for delete content command\r\n                this._updateDeleteCommand(this._commandRegistry.deleteCatalog.command, modelData[0]);\r\n            }\r\n\r\n            // set model for create commands, to update command's canExecute\r\n            for (var cmd in this._commandRegistry) {\r\n                var command = this._commandRegistry[cmd].command || {};\r\n                if (command instanceof NewContent || command.popup) {\r\n                    command.set(\"model\", modelData);\r\n                }\r\n            }\r\n            this.updateSelection(modelData);\r\n        },\r\n\r\n        updateSelection: function (selectionData) {\r\n            var selection = [];\r\n            if (selectionData) {\r\n                this.numSelectedRows = selectionData.length;\r\n                selection = array.map(selectionData, function (item) {\r\n                    // Navigate content tree use content without work id. So should set selection data with context id in unspecific version reference.\r\n                    var contextIdWithoutVersion = this.model ? new ContentReference(this.model.contextId).createVersionUnspecificReference().toString() : null;\r\n                    return { type: \"epi.cms.contentdata\", data: item, contextId: contextIdWithoutVersion };\r\n                }, this);\r\n            }\r\n\r\n            if (this.selection) {\r\n                this.selection.set(\"data\", selection);\r\n            }\r\n        },\r\n\r\n        _updateDeleteCommand: function (command, model) {\r\n            // summary:\r\n            //      Update delete command, to show a confirmation dialog.\r\n            // tags:\r\n            //      protected\r\n\r\n            if (!model) {\r\n                return;\r\n            }\r\n\r\n            // since execute function will be modify in withConfirmation, we must back it up.\r\n            if (!command._originalExecute) {\r\n                // keep original execute function\r\n                command._originalExecute = command._execute;\r\n            } else {\r\n                // rollback execute function\r\n                command._execute = command._originalExecute;\r\n            }\r\n\r\n            // make sure the input object is un-touched by creating a cloned object, then modify the name property.\r\n            var clonedObject = lang.clone(model);\r\n            clonedObject.name = htmlEntities.encode(clonedObject.name || \"\");\r\n            var setting = {\r\n                iconClass: \"epi-iconWarning epi-icon--large epi-icon--colored\",\r\n                title: res.deletecatalogconfirmationtitle,\r\n                description: dojoString.substitute(res.deletecatalogconfirmationdescription, clonedObject),\r\n                confirmActionText: res.deletecatalogconfirmationlabel,\r\n                cancelActionText: sharedResources.action.cancel,\r\n                setFocusOnConfirmButton: false // make Delete button gray\r\n            };\r\n\r\n            command = withConfirmation(command, DeleteCatalogContentHandler, setting);\r\n        },\r\n\r\n        destroy: function(){\r\n            this.treeStoreModel.destroy();\r\n            delete this.treeStoreModel;\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\viewmodel\\CatalogTreeStoreModel.js",
        "messages": [
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi/shell/XhrWrapper' is an internal Episerver module and can have a breaking change in any release.",
                "line": 14,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi/shell/XhrWrapper\",",
                "endLine": 14,
                "endColumn": 27
            },
            {
                "ruleId": "episerver-cms/no-internal-episerver-apis",
                "severity": 2,
                "message": "'epi-cms/widget/ContentForestStoreModel' is an internal Episerver module and can have a breaking change in any release.",
                "line": 20,
                "column": 5,
                "nodeType": "Literal",
                "source": "    \"epi-cms/widget/ContentForestStoreModel\",",
                "endLine": 20,
                "endColumn": 45
            }
        ],
        "errorCount": 2,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "﻿define([\r\n// dojo\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/Deferred\",\r\n    \"dojo/promise/all\",\r\n    \"dojo/when\",\r\n    \"dojo/topic\",\r\n// epi\r\n    \"epi/dependency\",\r\n    \"epi/routes\",\r\n    \"epi/string\",\r\n    \"epi/shell/XhrWrapper\",\r\n    \"epi/shell/widget/dialog/Alert\",\r\n    \"epi/shell/widget/dialog/Dialog\",\r\n    \"epi/shell/TypeDescriptorManager\",\r\n    \"epi-cms/contentediting/ContentActionSupport\",\r\n    \"epi-cms/core/ContentReference\",\r\n    \"epi-cms/widget/ContentForestStoreModel\",\r\n// epi-ecf-ui\r\n    \"../../contentediting/ModelSupport\",\r\n    \"../CatalogPasteItemDialog\",\r\n// resources\r\n    \"epi/i18n!epi/nls/commerce.components.catalogtree\"\r\n],\r\n\r\nfunction (\r\n// dojo\r\n    array,\r\n    declare,\r\n    lang,\r\n    Deferred,\r\n    promiseAll,\r\n    when,\r\n    topic,\r\n// epi\r\n    dependency,\r\n    routes,\r\n    epiString,\r\n    XhrWrapper,\r\n    Alert,\r\n    Dialog,\r\n    TypeDescriptorManager,\r\n    ContentActionSupport,\r\n    ContentReference,\r\n    ContentForestStoreModel,\r\n// epi-ecf-ui\r\n    ModelSupport,\r\n    CatalogPasteItemDialog,\r\n// resources\r\n    resources\r\n) {\r\n    // module:\r\n    //      epi-ecf-ui.widget.viewmodel.CatalogTreeStoreModel\r\n\r\n    return declare([ContentForestStoreModel], {\r\n        // summary:\r\n        //      Catalogs tree store model, which support listing catalog content with market filter.\r\n        // tags:\r\n        //      public\r\n\r\n        relationStore: null,\r\n\r\n        xhrHandler: null,\r\n\r\n        // flag to indicate whether the duplicate/move/link action is performed by DnD action from Catalog list.\r\n        _dropFromCatalogList: false,\r\n\r\n        typeDescriptorManager: TypeDescriptorManager,\r\n\r\n        constructor: function () {\r\n            this.relationStore = this.relationStore || dependency.resolve(\"epi.storeregistry\").get(\"epi.commerce.relation\");\r\n            this.contentTypeStore = this.contentTypeStore || dependency.resolve(\"epi.storeregistry\").get(\"epi.cms.contenttype\");\r\n            this._handles.push(topic.subscribe(\"relationChanged\", this._relationChanged.bind(this)));\r\n            if (!this.xhrHandler) {\r\n                this.xhrHandler = new XhrWrapper();\r\n            }\r\n        },\r\n\r\n        _relationChanged: function (addedItem) {\r\n            this._childrenChanged(addedItem.target);\r\n        },\r\n\r\n        newItems: function (items, newParentItem) {\r\n            var newItems = items.map(function (item) {\r\n                var contextId = item.dndData.options && item.dndData.options.oldParentItem\r\n                                    ? item.dndData.options.oldParentItem.contentLink\r\n                                    : item.dndData.data.parentLink;\r\n                return lang.mixin({ contextId : contextId }, item.dndData.data);\r\n            });\r\n\r\n            return this._selectAction(newItems, newParentItem);\r\n        },\r\n\r\n        pasteItems: function (sourceItems, targetItem, copy, sortIndex, actionType) {\r\n\r\n            if (!actionType) {\r\n                return this._selectAction(sourceItems, targetItem);\r\n            }\r\n\r\n            if (!sourceItems || !targetItem) { return; }\r\n\r\n            var inherited = this.getInherited(arguments);\r\n            switch (actionType) {\r\n                case 'link':\r\n                    var deferreds = sourceItems.map(function (childItem) {\r\n                        return this._addRelation(childItem, targetItem);\r\n                    }, this);\r\n                    return promiseAll(deferreds);\r\n\r\n                case 'move':\r\n                    var itemsToMove = [];\r\n                    var itemsToReplaceRelation = [];\r\n\r\n                    sourceItems.forEach(function (childItem) {\r\n                        if (ContentReference.compareIgnoreVersion(childItem.parentLink, childItem.contextId || childItem.parentLink)) {\r\n                            itemsToMove.push(childItem);\r\n                        } else {\r\n                            itemsToReplaceRelation.push(childItem);\r\n                        }\r\n                    });\r\n\r\n                    return this._replaceRelations(itemsToReplaceRelation, targetItem).then(function () {\r\n\r\n                            if (!itemsToMove.length) {\r\n                                return new Deferred().resolve([]);\r\n                            }\r\n\r\n                            return when(inherited.apply(this, [itemsToMove, targetItem, false, null]))\r\n                                .then(function () {\r\n                                    topic.publish(\"catalogItemsMoved\");\r\n                                });\r\n                        }.bind(this));\r\n\r\n                case 'duplicate':\r\n                    return inherited.apply(this, [sourceItems, targetItem, true, null]);\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        },\r\n\r\n        _selectAction: function (items, newParentItem) {\r\n\r\n            return this._isContentTypeAllowed(items, newParentItem).then(function (isContentTypesAllowed) {\r\n\r\n                if (!isContentTypesAllowed) {\r\n                    return this._showContentTypeAlert();\r\n                }\r\n\r\n                var isLinkSupported = this._isLinkSupported(newParentItem.typeIdentifier) && ContentActionSupport.hasAccessToAction(newParentItem, ContentActionSupport.action.Publish, ContentActionSupport.providerCapabilities.Publish, true);\r\n                var canBeDuplicated = ContentActionSupport.hasAccessToAction(newParentItem, ContentActionSupport.action.Create, ContentActionSupport.providerCapabilities.Create, true);\r\n                var canMoveToNewParent = this._canBeMoved(items, newParentItem);\r\n\r\n                return this._newItemConfirmation(!canMoveToNewParent, !isLinkSupported, !canBeDuplicated).then(function (actionType) {\r\n\r\n                    this._dropFromCatalogList = true;\r\n\r\n                    return this.pasteItems(items, newParentItem, null, null, actionType).then(function () {\r\n                        this._dropFromCatalogList = false;\r\n                    }.bind(this));\r\n                }.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        _canBeMoved: function (items, parentItem) {\r\n            // summary:\r\n            //      Check if all selected items can be moved to the parent item. An item can be moved if 3 conditions below are sastified:\r\n            //      - user has Create access on the parent item.\r\n            //      - user has Delete access on the item.\r\n            //      - the item is unpublished or the item is published and user has Publish access right on the parent item.\r\n            // tags:\r\n            //      private\r\n\r\n            if (!ContentActionSupport.hasAccessToAction(parentItem, ContentActionSupport.action.Create, ContentActionSupport.providerCapabilities.Create, true)) {\r\n                return false;\r\n            }\r\n\r\n            return array.every(items, function(item){\r\n                return ContentActionSupport.hasAccessToAction(item, ContentActionSupport.action.Delete, ContentActionSupport.providerCapabilities.Delete, true)\r\n                    && (item.status !== ContentActionSupport.versionStatus.Published || ContentActionSupport.hasAccessToAction(parentItem, ContentActionSupport.action.Publish, ContentActionSupport.providerCapabilities.Publish, true));\r\n            }, this);\r\n        },\r\n\r\n        _showContentTypeAlert: function (response) {\r\n            // summary:\r\n            //      Show an alert dialog if a content type can't be dropped\r\n            // tags:\r\n            //      protected\r\n\r\n            if (this._invalidContentTypeAlertDialog) {\r\n                this._invalidContentTypeAlertDialog.destroy();\r\n            }\r\n            var def = new Deferred();\r\n            this.own(this._invalidContentTypeAlertDialog = new Alert({\r\n                description: epiString.toHTML(resources.contenttypesnotallowed),\r\n                onAction: function () {\r\n                    def.reject();\r\n                }\r\n            }));\r\n\r\n            this._invalidContentTypeAlertDialog.show();\r\n\r\n            return def.promise;\r\n        },\r\n\r\n        _newItemConfirmation: function (hideMoveOption, hideLinkOption, hideDuplicateOption) {\r\n            var deferred = new Deferred();\r\n\r\n            var pasteItemDialog = new CatalogPasteItemDialog({\r\n                hideDuplicateOption: hideDuplicateOption,\r\n                hideMoveOption: hideMoveOption,\r\n                hideLinkOption: hideLinkOption,\r\n                executeDialog: function (actionType) {\r\n                    deferred.resolve(actionType);\r\n                },\r\n                cancelDialog: function () {\r\n                    deferred.cancel();\r\n                }\r\n            });\r\n\r\n            var dialog = new Dialog({\r\n                dialogClass: \"epi-dialog-confirm\",\r\n                defaultActionsVisible: false,\r\n                content: pasteItemDialog,\r\n                title: pasteItemDialog.title\r\n            });\r\n\r\n            dialog.show();\r\n\r\n            return deferred.promise;\r\n        },\r\n\r\n        _selectItemOnPasteComplete: function (item, copy, isDeleted, oldParentItem, newParentItem) {\r\n            // summary:\r\n            //\t\tSelect an item after a paste operation has completed. Override this function to keep current context when moving content.\r\n            // item: Item\r\n            //      The target item of the operation\r\n            // copy: boolean\r\n            //      If it was a copy operation or not\r\n            // isDeleted: boolean\r\n            //      If the operation resulted in the item being deleted, i.e. moved to the trash\r\n            // oldParentItem: Item\r\n            //      The current parent item\r\n            // newParentItem: Item\r\n            //      The target item for the operation\r\n            // tags: protected, override\r\n\r\n            if (this._dropFromCatalogList === true) {\r\n                // keep the selected/viewing page, instead of selecting the new parent page in case of dropping item from Catalog list to Catalog tree, to make it consistent with common UX pattern.\r\n            } else {\r\n                // otherwise, invoke base function to select new node.\r\n                this.inherited(arguments);\r\n            }\r\n        },\r\n\r\n        _getRelations: function (contentLink) {\r\n            return this.relationStore.query({ referenceId: contentLink });\r\n        },\r\n\r\n        _addRelation: function (childItem, newParentItem) {\r\n            return this._getRelations(childItem.contentLink).then(function (relations) {\r\n\r\n\r\n                return this.relationStore.add({\r\n                    source: childItem.contentLink,\r\n                    target: newParentItem.contentLink,\r\n                    type: ModelSupport.relationType.node,\r\n                    sortOrder: 0\r\n                }).then(function (addedItem) {\r\n                    topic.publish(\"relationChanged\", addedItem);\r\n                });\r\n            }.bind(this));\r\n        },\r\n\r\n        _replaceRelations: function (childItems, newParentItem) {\r\n\r\n            var promises = childItems.map(function (childItem) {\r\n\r\n                return this._getRelations(childItem.contentLink).then(function (relations) {\r\n\r\n                    var contextId = childItem.contextId || childItem.parentLink;\r\n                    var oldRelation;\r\n                    var newRelationExists;\r\n                    relations.forEach(function (relation) {\r\n                        if (relation.type !== ModelSupport.relationType.node ||\r\n                            !ContentReference.compareIgnoreVersion(relation.source, childItem.contentLink)) {\r\n                            return;\r\n                        }\r\n\r\n                        if (ContentReference.compareIgnoreVersion(relation.target, contextId)) {\r\n                            oldRelation = relation;\r\n                            return;\r\n                        }\r\n\r\n                        if (ContentReference.compareIgnoreVersion(relation.target, newParentItem.contentLink)) {\r\n                            newRelationExists = true;\r\n                            return;\r\n                        }\r\n                    }, this);\r\n\r\n                    if (!oldRelation) {\r\n                        return;\r\n                    }\r\n\r\n                    return this.relationStore.remove(oldRelation.id).then(function () {\r\n                        if (!!newRelationExists) {\r\n                            this._childrenChanged(new ContentReference(contextId).createVersionUnspecificReference().toString());\r\n                            return;\r\n                        }\r\n\r\n                        var newRelation = {\r\n                            source: childItem.contentLink,\r\n                            target: newParentItem.contentLink,\r\n                            type: ModelSupport.relationType.node,\r\n                            sortOrder: oldRelation.sortOrder\r\n                        };\r\n\r\n                        return this.relationStore.add(newRelation).then(function (addedItem) {\r\n                                topic.publish(\"relationChanged\", addedItem);\r\n                                this._childrenChanged(new ContentReference(contextId).createVersionUnspecificReference().toString());\r\n                            }.bind(this));\r\n                        }.bind(this));\r\n                }.bind(this));\r\n            }, this);\r\n            return promiseAll(promises);\r\n        },\r\n\r\n        copy: function (source, target) {\r\n            return this._isContentTypeAllowed(source, target).then(function (isContentTypesAllowed) {\r\n\r\n                if (!isContentTypesAllowed) {\r\n                    return this._showContentTypeAlert();\r\n                }\r\n\r\n                var isLinkSupported = this._isLinkSupported(target.typeIdentifier) && ContentActionSupport.hasAccessToAction(target, ContentActionSupport.action.Publish, ContentActionSupport.providerCapabilities.Publish, true),\r\n                    canBeDuplicated = ContentActionSupport.hasAccessToAction(target, ContentActionSupport.action.Create, ContentActionSupport.providerCapabilities.Create, true);\r\n\r\n                return this._newItemConfirmation(true, !isLinkSupported, !canBeDuplicated).then(function (choice) {\r\n\r\n                    var contentItems = source.map(function (item){\r\n                        return lang.mixin({ contextId: item.contextId }, item.data);\r\n                    });\r\n\r\n                    return this.pasteItems(contentItems, target, true, null, choice).then(function () {\r\n                        topic.publish(\"itemsPasted\");\r\n                    });\r\n                }.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        move: function (source, target) {\r\n            // summary:\r\n            //      Move source items to target\r\n\r\n            if (!target.contentLink) {\r\n                target = this.store.get(target);\r\n            }\r\n\r\n            return when(target).then(function (targetContent) {\r\n                return this._isContentTypeAllowed(source, targetContent).then(function (isContentTypesAllowed) {\r\n\r\n                    if (!isContentTypesAllowed) {\r\n                        return this._showContentTypeAlert();\r\n                    }\r\n\r\n                    var contentItems = source.map(function (item) {\r\n                        return lang.mixin({ contextId: item.contextId }, item.data);\r\n                    });\r\n\r\n                    return this.pasteItems(contentItems, targetContent, false, null, \"move\").then(function () {\r\n                        topic.publish(\"itemsPasted\");\r\n                    });\r\n                }.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        canCut: function (item) {\r\n            // summary:\r\n            //      disable cutting when entry doesn't belong to current category\r\n            var isRelated = false;\r\n            if (item.properties) {\r\n                isRelated = item.properties.isRelatedToCurrentCategory;\r\n            }\r\n            return isRelated && this.inherited(arguments);\r\n        },\r\n\r\n        canPaste: function (item, target, isCopy) {\r\n            // summary:\r\n            //      Determines whether the given item can be moved or copied from its current parent to a new location\r\n            //      Primarily used when validating drag & drop operations.\r\n            // tags:\r\n            //      public override\r\n\r\n            if (!item || !target) {\r\n                return false;\r\n            }\r\n\r\n            var isCopyToWastebasket = isCopy && target.isWastebasket,\r\n                isCutToTheSameItem = !isCopy && (this.getIdentity(item) === this.getIdentity(target)),\r\n                isLinkSupported = this._isLinkSupported(target.typeIdentifier) && ContentActionSupport.hasAccessToAction(target, ContentActionSupport.action.Publish, ContentActionSupport.providerCapabilities.Publish, true),\r\n                canBeDuplicated = ContentActionSupport.hasAccessToAction(target, ContentActionSupport.action.Create, ContentActionSupport.providerCapabilities.Create, true);\r\n\r\n            return !target.isDeleted && !isCopyToWastebasket && !isCutToTheSameItem && (isLinkSupported || canBeDuplicated);\r\n        },\r\n\r\n        onDeleted: function (deletedItems) {\r\n            // summary:\r\n            //\t\tPublished a \"catalogContentDeleted\" topic when all rows are deleted.\r\n\r\n            topic.publish(\"catalogContentDeleted\", deletedItems);\r\n        },\r\n\r\n        remove: function (items) {\r\n            // summary:\r\n            //      Removes the specified items from the catalog\r\n\r\n\r\n            // since ecf does not handle multiple async delete requests very well\r\n            // we're using a separate delete controller to batch delete multiple items\r\n            var urlToDeleteController = routes.getActionPath({\r\n                moduleArea: \"EPiServer.Commerce.Shell\",\r\n                controller: \"Delete\",\r\n                action: \"Delete\"\r\n            }),\r\n                contentReferences = array.map(items, function (item) {\r\n                    return item.data.contentLink;\r\n                }),\r\n\r\n                params = {\r\n                    url: urlToDeleteController,\r\n                    postData: { contentReferences: contentReferences },\r\n                    handleAs: \"json\",\r\n                    xsrfProtection: true\r\n                },\r\n\r\n                postRequest = this.xhrHandler.xhr(\"POST\", params),\r\n                deleteDeferred = new Deferred();\r\n\r\n            when(this.getCurrentContext(), function (currentContext) {\r\n                this.getAncestors(currentContext, function (ancestors) {\r\n                    when(postRequest, function () {\r\n                        array.some(items, function (item) {\r\n                            if (ContentReference.compareIgnoreVersion(currentContext.id, item.data.contentLink) && item.data.parentLink) {\r\n                                // we're deleting the currently selected item and need to change selection.\r\n                                this.onSelect(item.data.parentLink, true);\r\n                                return true;\r\n                            } else {\r\n                                return array.some(ancestors, function (ancestor) {\r\n                                    if (ContentReference.compareIgnoreVersion(ancestor.contentLink, item.data.contentLink) && item.data.parentLink) {\r\n                                        // we're deleting an ancestor to the currently selected item and need to change selection.\r\n                                        this.onSelect(item.data.parentLink, true);\r\n                                        return true;\r\n                                    }\r\n                                }, this);\r\n                            }\r\n                        }, this);\r\n\r\n                        //since we're deleting in a separate controller we need to tell the structure store that items are deleted.\r\n                        var promises = array.map(contentReferences, function (contentLink) {\r\n                            return this.store.remove(contentLink);\r\n                        }, this);\r\n                        when(promiseAll(promises), function () {\r\n                            this.onDeleted(items);\r\n                            deleteDeferred.resolve(items);\r\n                        }.bind(this));\r\n                    }.bind(this), function (errorResponse) {\r\n                        topic.publish(\"/epi/cms/action/delete/error\", errorResponse);\r\n                    });\r\n                }.bind(this));\r\n            }.bind(this));\r\n            return deleteDeferred.promise;\r\n        },\r\n\r\n        _isContentTypeAllowed: function (items, target) {\r\n            return this.contentTypeStore.query({ query: \"getavailablecontenttypes\", parentReference: target.contentLink })\r\n                .then(function (contentTypes) {\r\n\r\n                    var availableTypeIds = contentTypes.map(function (contentType) {\r\n                        return contentType.id;\r\n                    });\r\n\r\n                    return items.every(function (item) {\r\n                        if (!item) {\r\n                            return false;\r\n                        }\r\n                        var contentTypeID = item.dndData ? item.dndData.data.contentTypeID : item.data ? item.data.contentTypeID : item.contentTypeID;\r\n                        return availableTypeIds.indexOf(contentTypeID) > -1;\r\n                    });\r\n                });\r\n        },\r\n\r\n        _isLinkSupported: function (dataType) {\r\n            return this.typeDescriptorManager.isBaseTypeIdentifier(dataType, ModelSupport.contentTypeIdentifier.entryContentBase) ||\r\n                this.typeDescriptorManager.isBaseTypeIdentifier(dataType, ModelSupport.contentTypeIdentifier.nodeContent);\r\n        },\r\n\r\n        isSupportedType: function (dataType) {\r\n            var isSupportedType = this.inherited(arguments);\r\n            var inheritFromAnyContainedType = array.some(this.containedTypes, function (containedType) {\r\n                return this.typeDescriptorManager.isBaseTypeIdentifier(dataType, containedType);\r\n            }, this);\r\n            return isSupportedType || inheritFromAnyContainedType;\r\n        }\r\n    });\r\n});"
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\viewmodel\\DiscountListModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\viewmodel\\DiscountTreeStoreModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\viewmodel\\FacetGroupListViewModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\viewmodel\\FacetGroupViewModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\viewmodel\\InventoryOverviewModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\viewmodel\\MarketingFacetGroupListViewModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\viewmodel\\MarketingFacetGroupViewModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widget\\viewmodel\\PricingOverviewModel.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.Shell\\ClientResources\\epi-ecf-ui\\widgets.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.UI\\ClientResources\\CmoGadget\\CmoGadget.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.UI\\ClientResources\\Criteria\\CustomerProperties.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.UI\\ClientResources\\Criteria\\ProductInCartOrWishList.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.UI\\ClientResources\\Dialogs\\main.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Shopping.UI\\ClientResources\\OrderGadget\\OrderGadget.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Personal.Shopping\\ClientResources\\ViewMode\\epiRecommendations.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\SomeProject.Personal.Shopping\\ClientResources\\ViewMode\\epiRecommendations.min.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\formatter.js",
        "messages": [
            {
                "ruleId": null,
                "fatal": true,
                "severity": 2,
                "source": "    const hasMessages = result => result.messages.length;",
                "message": "Parsing error: The keyword 'const' is reserved",
                "line": 3,
                "column": 5
            }
        ],
        "errorCount": 1,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "module.exports = function (results) {\r\n\r\n    const hasMessages = result => result.messages.length;\r\n\r\n    const epiRulePlugin = \"episerver-cms/\";\r\n    const isEpiMessage = message => message.ruleId && message.ruleId.startsWith(epiRulePlugin);\r\n    const areEpiMessages = result => result.messages.filter(isEpiMessage);\r\n\r\n    const moduleNameFromMessage = msg => msg.message\r\n        .replace(/'/g, \"\")\r\n        .replace(\" is an internal Episerver module and can have a breaking change in any release.\", \"\")\r\n        .replace(\" is a deprecated Episerver module and will be removed in a future major version.\", \"\");\r\n\r\n    const countModules = (seq, current) => {\r\n        current.messages\r\n            .filter(isEpiMessage) // `areEpiMessages` doesn't seem to work. It includes linting errors from this file, which is strange.\r\n            .forEach(msg => {\r\n            const name = moduleNameFromMessage(msg);\r\n            \r\n            if (!seq[name]) {\r\n                seq[name] = 0;\r\n            }\r\n\r\n            seq[name]++;\r\n        });\r\n\r\n        return seq;            \r\n    };\r\n\r\n    // This holds an object with module name and usage count as key and value.\r\n    const summary = results\r\n        .filter(hasMessages)\r\n        .filter(areEpiMessages)\r\n        .reduce(countModules, {\r\n            // empty object to start with, to use as a simple hash map\r\n        });\r\n\r\n    // Time to turn the `summary` to CSV\r\n    const byModuleCount = summary => (nameA, nameB) => summary[nameB] - summary[nameA];\r\n    const toCsvLine = summary => name => {\r\n        const count = summary[name];\r\n        return `${name},${count}`;\r\n    }\r\n\r\n    // Turn it into CSV.\r\n    return \"Module name,Usage count\\n\" +\r\n        Object.keys(summary)\r\n        .sort(byModuleCount(summary))\r\n        .map(toCsvLine(summary))\r\n        .join(\"\\n\");\r\n\r\n    return summary;\r\n}"
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\bootstrap.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\jquery-1.11.1.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\jquery.validate.min.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\jquery.validate.unobtrusive.min.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\js\\AddressBook.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\js\\Cart.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\js\\Checkout.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\js\\Login.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\js\\Market.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\js\\Misc.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\js\\Navigation.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\js\\Product.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\js\\quicksilver.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\js\\Recommendations.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\js\\Registration.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\js\\Search.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\js\\Warehouse.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    },
    {
        "filePath": "C:\\SomeProject\\Sources\\SomeProject.Reference.Shopping.Site\\Scripts\\mustache.min.js",
        "messages": [],
        "errorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0
    }
]
